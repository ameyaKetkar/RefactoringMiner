refactorings {
  classesAftr: "org.whizu.annotation.AnnotationDetector"
  classesB4: "org.whizu.annotation.AnnotationDetector"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.whizu.annotation.AnnotationDetector"
    classAftr: "org.whizu.annotation.AnnotationDetector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationDetector"
  classesB4: "org.whizu.annotation.AnnotationDetector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationDetector.Reporter"
  classesB4: "org.whizu.annotation.AnnotationDetector.Reporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationDetector.TypeReporter"
  classesB4: "org.whizu.annotation.AnnotationDetector.TypeReporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationDetector.FieldReporter"
  classesB4: "org.whizu.annotation.AnnotationDetector.FieldReporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationDetector.MethodReporter"
  classesB4: "org.whizu.annotation.AnnotationDetector.MethodReporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationUtils"
  classesB4: "org.whizu.annotation.AnnotationUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.whizu.annotation.AnnotationUtils"
    classAftr: "org.whizu.annotation.AnnotationUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.whizu.annotation.AnnotationUtils"
  classesB4: "org.whizu.annotation.AnnotationUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.server.ApplicationEnhancer"
  classesB4: "org.whizu.server.ApplicationEnhancer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.whizu.server.ApplicationEnhancer"
    classAftr: "org.whizu.server.ApplicationEnhancer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.whizu.server.ApplicationEnhancer"
  classesB4: "org.whizu.server.ApplicationEnhancer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.server.Configuration"
  classesB4: "org.whizu.server.Configuration"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.whizu.server.Configuration"
    classAftr: "org.whizu.server.Configuration"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.whizu.server.Configuration"
  classesB4: "org.whizu.server.Configuration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.server.WhizuServlet"
  classesB4: "org.whizu.server.WhizuServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.whizu.server.WhizuServlet"
    classAftr: "org.whizu.server.WhizuServlet"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.whizu.server.WhizuServlet"
  classesB4: "org.whizu.server.WhizuServlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.whizu.tutorial.WhizuServer"
  classesB4: "org.whizu.tutorial.WhizuServer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.whizu.tutorial.WhizuServer"
    classAftr: "org.whizu.tutorial.WhizuServer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.whizu.tutorial.WhizuServer"
  classesB4: "org.whizu.tutorial.WhizuServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "whizu.java"
commit: "whizu.java"
tooBig: false

refactorings {
  classesAftr: "com.groupon.seleniumgridextras.ApiDocumentation"
  classesB4: "com.groupon.seleniumgridextras.ApiDocumentation"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "apiSpec"
    nameaftr: "apiSpec"
    classb4: "com.groupon.seleniumgridextras.ApiDocumentation"
    classAftr: "com.groupon.seleniumgridextras.ApiDocumentation"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.ApiDocumentation"
  classesB4: "com.groupon.seleniumgridextras.ApiDocumentation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "enabledPlugins"
    nameaftr: "enabledPlugins"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "disabledPlugins"
    nameaftr: "disabledPlugins"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "setupTask"
    nameaftr: "setupTask"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "teardownTask"
    nameaftr: "teardownTask"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "gridConfig"
    nameaftr: "gridConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "webdriverConfig"
    nameaftr: "webdriverConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getDefaultConfig"
    nameaftr: "getDefaultConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getGridHubConfig"
    nameaftr: "getGridHubConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getGridNodeConfig"
    nameaftr: "getGridNodeConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "gridHubConfig"
    nameaftr: "gridHubConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "gridNodeConfig"
    nameaftr: "gridNodeConfig"
    classb4: "com.groupon.seleniumgridextras.DefaultConfig"
    classAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DefaultConfig"
  classesB4: "com.groupon.seleniumgridextras.DefaultConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.ExtrasEndPoint"
  classesB4: "com.groupon.seleniumgridextras.ExtrasEndPoint"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getResponseDescription"
    nameaftr: "getResponseDescription"
    classb4: "com.groupon.seleniumgridextras.ExtrasEndPoint"
    classAftr: "com.groupon.seleniumgridextras.ExtrasEndPoint"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.ExtrasEndPoint"
  classesB4: "com.groupon.seleniumgridextras.ExtrasEndPoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "setGridHubAutostart"
    nameaftr: "setGridHubAutostart"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "setGridNodeAutostart"
    nameaftr: "setGridNodeAutostart"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "setWebDriverVersion"
    nameaftr: "setWebDriverVersion"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "setGridHubUrl"
    nameaftr: "setGridHubUrl"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "setDefaultService"
    nameaftr: "setDefaultService"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultConfig"
    nameaftr: "defaultConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "webdriver"
    nameaftr: "webdriver"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "nodeConfig"
    nameaftr: "nodeConfig"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
    classAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  classesB4: "com.groupon.seleniumgridextras.FirstTimeRunConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  classesB4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "keyDescriptions"
    nameaftr: "keyDescriptions"
    classb4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
    classAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  classesB4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "keyValues"
    nameaftr: "keyValues"
    classb4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
    classAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  classesB4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getKeyDescriptions"
    nameaftr: "getKeyDescriptions"
    classb4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
    classAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  classesB4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "convertLineToArray"
    nameaftr: "convertLineToArray"
    classb4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
    classAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  classesB4: "com.groupon.seleniumgridextras.JsonResponseBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonWrapper"
  classesB4: "com.groupon.seleniumgridextras.JsonWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "returnHash"
    nameaftr: "map"
    classb4: "com.groupon.seleniumgridextras.JsonWrapper"
    classAftr: "com.groupon.seleniumgridextras.JsonWrapper"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonWrapper"
  classesB4: "com.groupon.seleniumgridextras.JsonWrapper"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.JsonWrapper"
  classesB4: "com.groupon.seleniumgridextras.JsonWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "config"
    nameaftr: "config"
    classb4: "com.groupon.seleniumgridextras.RuntimeConfig"
    classAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getConfig"
    nameaftr: "getConfig"
    classb4: "com.groupon.seleniumgridextras.RuntimeConfig"
    classAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getWebdriverConfig"
    nameaftr: "getWebdriverConfig"
    classb4: "com.groupon.seleniumgridextras.RuntimeConfig"
    classAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "HashMap"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getGridConfig"
    nameaftr: "getGridConfig"
    classb4: "com.groupon.seleniumgridextras.RuntimeConfig"
    classAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.RuntimeConfig"
    classAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.RuntimeConfig"
    classAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.RuntimeConfig"
  classesB4: "com.groupon.seleniumgridextras.RuntimeConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapper"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getGridConfig"
    nameaftr: "getGridConfig"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapper"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapper"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "config"
    nameaftr: "config"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapper"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapper"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapper"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "config"
    nameaftr: "config"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapper"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "grid"
    nameaftr: "grid"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapper"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapper"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  classesB4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "nodes"
    nameaftr: "nodes"
    classb4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
    classAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  classesB4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "node"
    nameaftr: "node"
    classb4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
    classAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  classesB4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "endpoints"
    nameaftr: "endpoints"
    classb4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
    classAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  classesB4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "endpoint"
    nameaftr: "endpoint"
    classb4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
    classAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  classesB4: "com.groupon.seleniumgridextras.grid.servlets.SeleniumGridExtrasServlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.tasks.GetConfig"
  classesB4: "com.groupon.seleniumgridextras.tasks.GetConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.tasks.KillAllIE"
  classesB4: "com.groupon.seleniumgridextras.tasks.KillAllIE"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.DownloadWebdriverTest"
  classesB4: "com.groupon.seleniumgridextras.DownloadWebdriverTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.ExposeDirectoryTest"
  classesB4: "com.groupon.seleniumgridextras.ExposeDirectoryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.GetProcessesTest"
  classesB4: "com.groupon.seleniumgridextras.GetProcessesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.KillAllByNameTest"
  classesB4: "com.groupon.seleniumgridextras.KillAllByNameTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.ScreenshotTest"
  classesB4: "com.groupon.seleniumgridextras.ScreenshotTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.UpgradeWebdriverTest"
  classesB4: "com.groupon.seleniumgridextras.UpgradeWebdriverTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "descriptions"
    nameaftr: "descriptions"
    classb4: "com.groupon.seleniumgridextras.UpgradeWebdriverTest"
    classAftr: "com.groupon.seleniumgridextras.UpgradeWebdriverTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.UpgradeWebdriverTest"
  classesB4: "com.groupon.seleniumgridextras.UpgradeWebdriverTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "gridConfig"
    nameaftr: "gridConfig"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Map"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wdConfig"
    nameaftr: "wdConfig"
    classb4: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
    classAftr: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  classesB4: "com.groupon.seleniumgridextras.grid.GridWrapperTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.tasks.GetInfoForPortTest"
  classesB4: "com.groupon.seleniumgridextras.tasks.GetInfoForPortTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.tasks.GridStatusTest"
  classesB4: "com.groupon.seleniumgridextras.tasks.GridStatusTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.tasks.SetupTest"
  classesB4: "com.groupon.seleniumgridextras.tasks.SetupTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.groupon.seleniumgridextras.tasks.TeardownTest"
  classesB4: "com.groupon.seleniumgridextras.tasks.TeardownTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.util.HashMap"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Map"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.util.HashMap"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.util.HashMap"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonArray"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonArray"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.List"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonArray"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Map"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonElement"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.util.Map"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonElement"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "java.util.Map"
            to: "com.google.gson.JsonElement"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.util.Map"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonElement"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonElement"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Map"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Map"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.util.Map"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonObject"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "java.util.Map"
            to: "com.google.gson.JsonObject"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.util.Map"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Map"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Map"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Map"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Map"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Map"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONObject"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.JSONObject"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonObject"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.simple.JSONObject"
            to: "com.google.gson.JsonObject"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.JSONObject"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONObject"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONObject"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONArray"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonArray"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.JSONArray"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonArray"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.simple.JSONArray"
            to: "com.google.gson.JsonArray"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonArray"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONArray"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonArray"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonElement"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonElement"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Map"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonElement"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Map"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
project: "Selenium-Grid-Extras"
commit: "Selenium-Grid-Extras"
tooBig: false

refactorings {
  classesAftr: "org.apache.wss4j.performance.PerformanceMemoryTest"
  classesB4: "org.apache.wss4j.stax.test.PerformanceMemoryTest"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "org.apache.wss4j.performance.PerformanceTimingTest"
  classesB4: "org.apache.wss4j.stax.test.PerformanceTimingTest"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "org.apache.wss4j.integration.test.kerberos.KerberosTest"
  classesB4: "org.apache.wss4j.integration.test.kerberos.KerberosTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.AbstractPolicyTestBase"
  classesB4: "org.apache.wss4j.policy.stax.test.AbstractPolicyTestBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.AlgorithmSuiteTest"
  classesB4: "org.apache.wss4j.policy.stax.test.AlgorithmSuiteTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.AsymmetricBindingIntegrationTest"
  classesB4: "org.apache.wss4j.policy.stax.test.AsymmetricBindingIntegrationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.AsymmetricBindingTest"
  classesB4: "org.apache.wss4j.policy.stax.test.AsymmetricBindingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.ContentEncryptedElementsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.ContentEncryptedElementsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.DerivedKeyTests"
  classesB4: "org.apache.wss4j.policy.stax.test.DerivedKeyTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.EncryptedElementsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.EncryptedElementsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.EncryptedPartsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.EncryptedPartsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.HttpsTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.HttpsTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.IssuedTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.IssuedTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.KerberosTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.KerberosTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.KeyValueTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.KeyValueTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.ProtectionOrderTest"
  classesB4: "org.apache.wss4j.policy.stax.test.ProtectionOrderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.RelTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.RelTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.RequiredElementsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.RequiredElementsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.RequiredPartsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.RequiredPartsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SamlTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SamlTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SecureConversationTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SecureConversationTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SecurityContextTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SecurityContextTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SignedElementsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SignedElementsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SignedPartsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SignedPartsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SpnegoContextTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SpnegoContextTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SupportingTokensTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SupportingTokensTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.SymmetricBindingTest"
  classesB4: "org.apache.wss4j.policy.stax.test.SymmetricBindingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.TokenProtectionTest"
  classesB4: "org.apache.wss4j.policy.stax.test.TokenProtectionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.TransportBindingIntegrationTest"
  classesB4: "org.apache.wss4j.policy.stax.test.TransportBindingIntegrationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.TransportBindingTest"
  classesB4: "org.apache.wss4j.policy.stax.test.TransportBindingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.UsernameTokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.UsernameTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.VulnerabliltyVectorsTest"
  classesB4: "org.apache.wss4j.policy.stax.test.VulnerabliltyVectorsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.WSP13SpecTest"
  classesB4: "org.apache.wss4j.policy.stax.test.WSP13SpecTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.policy.stax.test.X509TokenTest"
  classesB4: "org.apache.wss4j.policy.stax.test.X509TokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.AbstractTestBase"
  classesB4: "org.apache.wss4j.stax.test.AbstractTestBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.AbstractTestBase.CustomWSS4JHandler"
  classesB4: "org.apache.wss4j.stax.test.AbstractTestBase.CustomWSS4JHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.AbstractTestBase.TestSecurityEventListener"
  classesB4: "org.apache.wss4j.stax.test.AbstractTestBase.TestSecurityEventListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.AttachmentTest"
  classesB4: "org.apache.wss4j.stax.test.AttachmentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.ConfigurationConverterTest"
  classesB4: "org.apache.wss4j.stax.test.ConfigurationConverterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.DerivedKeyTokenTest"
  classesB4: "org.apache.wss4j.stax.test.DerivedKeyTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.EncDecryptionTest"
  classesB4: "org.apache.wss4j.stax.test.EncDecryptionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.EncryptionCRLTest"
  classesB4: "org.apache.wss4j.stax.test.EncryptionCRLTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.HeaderOrderingTest"
  classesB4: "org.apache.wss4j.stax.test.HeaderOrderingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.InboundWSSecurityContextImplTest"
  classesB4: "org.apache.wss4j.stax.test.InboundWSSecurityContextImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.InteroperabilityTest"
  classesB4: "org.apache.wss4j.stax.test.InteroperabilityTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.OutputChainTest"
  classesB4: "org.apache.wss4j.stax.test.OutputChainTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.PasswordEncryptorTest"
  classesB4: "org.apache.wss4j.stax.test.PasswordEncryptorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.PasswordTypeTest"
  classesB4: "org.apache.wss4j.stax.test.PasswordTypeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.PrincipalTest"
  classesB4: "org.apache.wss4j.stax.test.PrincipalTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.ReplayTest"
  classesB4: "org.apache.wss4j.stax.test.ReplayTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.SecurityContextTokenTest"
  classesB4: "org.apache.wss4j.stax.test.SecurityContextTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.SignatureCRLTest"
  classesB4: "org.apache.wss4j.stax.test.SignatureCRLTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.SignatureCertConstaintsTest"
  classesB4: "org.apache.wss4j.stax.test.SignatureCertConstaintsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.SignatureConfirmationTest"
  classesB4: "org.apache.wss4j.stax.test.SignatureConfirmationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.SignatureEncryptionTest"
  classesB4: "org.apache.wss4j.stax.test.SignatureEncryptionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.SignatureTest"
  classesB4: "org.apache.wss4j.stax.test.SignatureTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.TimestampTest"
  classesB4: "org.apache.wss4j.stax.test.TimestampTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.UsernameTokenTest"
  classesB4: "org.apache.wss4j.stax.test.UsernameTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.VulnerabliltyVectorsTest"
  classesB4: "org.apache.wss4j.stax.test.VulnerabliltyVectorsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SAMLTokenHOKTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SAMLTokenHOKTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SAMLTokenNegativeTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SAMLTokenNegativeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SAMLTokenReferenceTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SAMLTokenReferenceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SAMLTokenSVTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SAMLTokenSVTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SAMLTokenTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SAMLTokenTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SamlConditionsTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SamlConditionsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.stax.test.saml.SamlTokenDerivedTest"
  classesB4: "org.apache.wss4j.stax.test.saml.SamlTokenDerivedTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.performance.PerformanceMemoryTest"
  classesB4: "org.apache.wss4j.stax.test.PerformanceMemoryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.performance.PerformanceTimingTest"
  classesB4: "org.apache.wss4j.stax.test.PerformanceTimingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.performance.PerformanceMemoryTest.MemorySamplerThread"
  classesB4: "org.apache.wss4j.stax.test.PerformanceMemoryTest.MemorySamplerThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.wss4j.performance.PerformanceMemoryTest.ThreadStopper"
  classesB4: "org.apache.wss4j.stax.test.PerformanceMemoryTest.ThreadStopper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "wss4j"
commit: "wss4j"
tooBig: false

refactorings {
  classesAftr: "com.consol.citrus.admin.handlebars.HandlebarsHelperPostProcessorTest"
  classesB4: "com.consol.citrus.admin.handlebars.HandlebarsHelperPostProcessorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.admin.handlebars.HandlebarsHelperPostProcessorTest.HelperSourceMock"
  classesB4: "com.consol.citrus.admin.handlebars.HandlebarsHelperPostProcessorTest.HelperSourceMock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.admin.handlebars.HandlebarsHelperPostProcessorTest.HelperMock"
  classesB4: "com.consol.citrus.admin.handlebars.HandlebarsHelperPostProcessorTest.HelperMock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.admin.launcher.ProcessMonitorImplTest"
  classesB4: "com.consol.citrus.admin.launcher.ProcessMonitorImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.admin.service.TestCaseServiceTest"
  classesB4: "com.consol.citrus.admin.service.TestCaseServiceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.admin.websocket.WebSocketProcessListenerTest"
  classesB4: "com.consol.citrus.admin.websocket.WebSocketProcessListenerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.client.CitrusArchiveAppenderTest"
  classesB4: "com.consol.citrus.arquillian.client.CitrusArchiveAppenderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.client.CitrusArchiveProcessorTest"
  classesB4: "com.consol.citrus.arquillian.client.CitrusArchiveProcessorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.client.CitrusExtensionTest"
  classesB4: "com.consol.citrus.arquillian.client.CitrusExtensionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.configuration.CitrusConfigurationProducerTest"
  classesB4: "com.consol.citrus.arquillian.configuration.CitrusConfigurationProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.configuration.CitrusConfigurationTest"
  classesB4: "com.consol.citrus.arquillian.configuration.CitrusConfigurationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.configuration.CitrusConfigurationTest.CitrusCustomConfig"
  classesB4: "com.consol.citrus.arquillian.configuration.CitrusConfigurationTest.CitrusCustomConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.container.CitrusRemoteConfigurationProducerTest"
  classesB4: "com.consol.citrus.arquillian.container.CitrusRemoteConfigurationProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.container.CitrusRemoteExtensionTest"
  classesB4: "com.consol.citrus.arquillian.container.CitrusRemoteExtensionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.enricher.CitrusInstanceProducerTest"
  classesB4: "com.consol.citrus.arquillian.enricher.CitrusInstanceProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.enricher.CitrusRemoteInstanceProducerTest"
  classesB4: "com.consol.citrus.arquillian.enricher.CitrusRemoteInstanceProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.enricher.CitrusTestEnricherTest"
  classesB4: "com.consol.citrus.arquillian.enricher.CitrusTestEnricherTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.lifecycle.CitrusLifecycleHandlerTest"
  classesB4: "com.consol.citrus.arquillian.lifecycle.CitrusLifecycleHandlerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.arquillian.lifecycle.CitrusRemoteLifecycleHandlerTest"
  classesB4: "com.consol.citrus.arquillian.lifecycle.CitrusRemoteLifecycleHandlerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.actions.CamelControlBusActionTest"
  classesB4: "com.consol.citrus.camel.actions.CamelControlBusActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.actions.CreateCamelRouteActionTest"
  classesB4: "com.consol.citrus.camel.actions.CreateCamelRouteActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.actions.RemoveCamelRouteActionTest"
  classesB4: "com.consol.citrus.camel.actions.RemoveCamelRouteActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.actions.StartCamelRouteActionTest"
  classesB4: "com.consol.citrus.camel.actions.StartCamelRouteActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.actions.StopCamelRouteActionTest"
  classesB4: "com.consol.citrus.camel.actions.StopCamelRouteActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.endpoint.CamelEndpointComponentTest"
  classesB4: "com.consol.citrus.camel.endpoint.CamelEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.endpoint.CamelEndpointTest"
  classesB4: "com.consol.citrus.camel.endpoint.CamelEndpointTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.endpoint.CamelSyncEndpointTest"
  classesB4: "com.consol.citrus.camel.endpoint.CamelSyncEndpointTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.camel.message.CamelMessageConverterTest"
  classesB4: "com.consol.citrus.camel.message.CamelMessageConverterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.HeaderValuesTest"
  classesB4: "com.consol.citrus.HeaderValuesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.IgnoreElementsLegacyTest"
  classesB4: "com.consol.citrus.IgnoreElementsLegacyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.IgnoreElementsTest"
  classesB4: "com.consol.citrus.IgnoreElementsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.MessageElementsLegacyTest"
  classesB4: "com.consol.citrus.MessageElementsLegacyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.MessageElementsTest"
  classesB4: "com.consol.citrus.MessageElementsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.NamespaceTest"
  classesB4: "com.consol.citrus.NamespaceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.TestSuiteTest"
  classesB4: "com.consol.citrus.TestSuiteTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ValidationTest"
  classesB4: "com.consol.citrus.ValidationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.VariableSupportTest"
  classesB4: "com.consol.citrus.VariableSupportTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.XPathTest"
  classesB4: "com.consol.citrus.XPathTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.ExecutePLSQLActionTest"
  classesB4: "com.consol.citrus.actions.ExecutePLSQLActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.ExecuteSQLActionTest"
  classesB4: "com.consol.citrus.actions.ExecuteSQLActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.ExecuteSQLQueryActionTest"
  classesB4: "com.consol.citrus.actions.ExecuteSQLQueryActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.InputActionTest"
  classesB4: "com.consol.citrus.actions.InputActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.PurgeEndpointActionTest"
  classesB4: "com.consol.citrus.actions.PurgeEndpointActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.PurgeMessageChannelActionTest"
  classesB4: "com.consol.citrus.actions.PurgeMessageChannelActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.ReceiveMessageActionTest"
  classesB4: "com.consol.citrus.actions.ReceiveMessageActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.ReceiveTimeoutActionTest"
  classesB4: "com.consol.citrus.actions.ReceiveTimeoutActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.SendMessageActionTest"
  classesB4: "com.consol.citrus.actions.SendMessageActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.StartServerActionTest"
  classesB4: "com.consol.citrus.actions.StartServerActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.StopServerActionTest"
  classesB4: "com.consol.citrus.actions.StopServerActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.actions.WaitActionTest"
  classesB4: "com.consol.citrus.actions.WaitActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.channel.ChannelEndpointComponentTest"
  classesB4: "com.consol.citrus.channel.ChannelEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.channel.ChannelEndpointConsumerTest"
  classesB4: "com.consol.citrus.channel.ChannelEndpointConsumerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.channel.ChannelEndpointProducerTest"
  classesB4: "com.consol.citrus.channel.ChannelEndpointProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.channel.ChannelEndpointSyncConsumerTest"
  classesB4: "com.consol.citrus.channel.ChannelEndpointSyncConsumerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.channel.ChannelEndpointSyncProducerTest"
  classesB4: "com.consol.citrus.channel.ChannelEndpointSyncProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.channel.selector.DispatchingMessageSelectorTest"
  classesB4: "com.consol.citrus.channel.selector.DispatchingMessageSelectorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.condition.FileConditionTest"
  classesB4: "com.consol.citrus.condition.FileConditionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.condition.HttpConditionTest"
  classesB4: "com.consol.citrus.condition.HttpConditionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.CatchTest"
  classesB4: "com.consol.citrus.container.CatchTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.ConditionalTest"
  classesB4: "com.consol.citrus.container.ConditionalTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.IterateTest"
  classesB4: "com.consol.citrus.container.IterateTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.ParallelTest"
  classesB4: "com.consol.citrus.container.ParallelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.RepeatOnErrorUntilTrueTest"
  classesB4: "com.consol.citrus.container.RepeatOnErrorUntilTrueTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.RepeatUntilTrueTest"
  classesB4: "com.consol.citrus.container.RepeatUntilTrueTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.SequenceTest"
  classesB4: "com.consol.citrus.container.SequenceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.container.TemplateTest"
  classesB4: "com.consol.citrus.container.TemplateTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.endpoint.AbstractEndpointAdapterTest"
  classesB4: "com.consol.citrus.endpoint.AbstractEndpointAdapterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.endpoint.DefaultEndpointFactoryTest"
  classesB4: "com.consol.citrus.endpoint.DefaultEndpointFactoryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.endpoint.adapter.mapping.BeanNameMappingStrategyTest"
  classesB4: "com.consol.citrus.endpoint.adapter.mapping.BeanNameMappingStrategyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.endpoint.adapter.mapping.SimpleMappingStrategyTest"
  classesB4: "com.consol.citrus.endpoint.adapter.mapping.SimpleMappingStrategyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.message.correlation.PollingCorrelationManagerTest"
  classesB4: "com.consol.citrus.message.correlation.PollingCorrelationManagerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.util.XMLUtilsTest"
  classesB4: "com.consol.citrus.util.XMLUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.validation.DTDValidationTest"
  classesB4: "com.consol.citrus.validation.DTDValidationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.validation.matcher.ValidationMatcherUtilsTest"
  classesB4: "com.consol.citrus.validation.matcher.ValidationMatcherUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.validation.xhtml.XhtmlMessageValidatorTest"
  classesB4: "com.consol.citrus.validation.xhtml.XhtmlMessageValidatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.xml.schema.RootQNameSchemaMappingStrategyTest"
  classesB4: "com.consol.citrus.xml.schema.RootQNameSchemaMappingStrategyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.xml.schema.SchemaMappingStrategyChainTest"
  classesB4: "com.consol.citrus.xml.schema.SchemaMappingStrategyChainTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.xml.schema.TargetNamespaceSchemaMappingStrategyTest"
  classesB4: "com.consol.citrus.xml.schema.TargetNamespaceSchemaMappingStrategyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.docker.actions.DockerExecuteActionTest"
  classesB4: "com.consol.citrus.docker.actions.DockerExecuteActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ftp.client.FtpClientTest"
  classesB4: "com.consol.citrus.ftp.client.FtpClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ftp.client.FtpEndpointComponentTest"
  classesB4: "com.consol.citrus.ftp.client.FtpEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ftp.server.FtpServerLetTest"
  classesB4: "com.consol.citrus.ftp.server.FtpServerLetTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.http.client.HttpClientTest"
  classesB4: "com.consol.citrus.http.client.HttpClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.http.client.HttpEndpointComponentTest"
  classesB4: "com.consol.citrus.http.client.HttpEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.http.servlet.CitrusDispatcherServletTest"
  classesB4: "com.consol.citrus.http.servlet.CitrusDispatcherServletTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.AntRunTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.AntRunTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.AssertSoapFaultTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.AssertSoapFaultTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.DefaultTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.DefaultTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ExecutePLSQLTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ExecutePLSQLTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ExecuteSQLQueryTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ExecuteSQLQueryTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ExecuteSQLTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ExecuteSQLTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.GroovyTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.GroovyTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.PurgeEndpointTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.PurgeEndpointTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.PurgeJmsQueueTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.PurgeJmsQueueTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.PurgeMessageChannelTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.PurgeMessageChannelTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ReceiveHttpMessageTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ReceiveHttpMessageTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ReceiveMessageTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ReceiveMessageTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ReceiveSoapMessageTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ReceiveSoapMessageTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.ReceiveTimeoutTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.ReceiveTimeoutTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.SendHttpMessageTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.SendHttpMessageTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.SendMessageTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.SendMessageTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.SendSoapFaultTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.SendSoapFaultTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.SendSoapMessageTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.SendSoapMessageTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.StartServerTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.StartServerTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.StopServerTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.StopServerTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.TemplateTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.TemplateTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.design.TransformTestDesignerTest"
  classesB4: "com.consol.citrus.dsl.design.TransformTestDesignerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.AntRunTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.AntRunTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.AssertSoapFaultTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.AssertSoapFaultTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.DockerTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.DockerTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ExecutePLSQLTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ExecutePLSQLTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ExecuteSQLQueryTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ExecuteSQLQueryTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ExecuteSQLTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ExecuteSQLTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.GroovyTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.GroovyTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.PurgeEndpointTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.PurgeEndpointTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.PurgeJmsQueueTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.PurgeJmsQueueTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.PurgeMessageChannelTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.PurgeMessageChannelTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ReceiveHttpMessageTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ReceiveHttpMessageTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ReceiveMessageTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ReceiveMessageTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ReceiveSoapMessageTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ReceiveSoapMessageTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.ReceiveTimeoutTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.ReceiveTimeoutTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.SendHttpMessageTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.SendHttpMessageTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.SendMessageTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.SendMessageTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.SendSoapFaultTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.SendSoapFaultTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.SendSoapMessageTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.SendSoapMessageTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.StartServerTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.StartServerTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.StopServerTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.StopServerTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.TemplateTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.TemplateTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.dsl.runner.WaitTestRunnerTest"
  classesB4: "com.consol.citrus.dsl.runner.WaitTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.actions.PurgeJmsQueuesActionTest"
  classesB4: "com.consol.citrus.jms.actions.PurgeJmsQueuesActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.endpoint.JmsEndpointAdapterTest"
  classesB4: "com.consol.citrus.jms.endpoint.JmsEndpointAdapterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.endpoint.JmsEndpointComponentTest"
  classesB4: "com.consol.citrus.jms.endpoint.JmsEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.endpoint.JmsEndpointConsumerTest"
  classesB4: "com.consol.citrus.jms.endpoint.JmsEndpointConsumerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.endpoint.JmsEndpointProducerTest"
  classesB4: "com.consol.citrus.jms.endpoint.JmsEndpointProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.endpoint.JmsEndpointSyncConsumerTest"
  classesB4: "com.consol.citrus.jms.endpoint.JmsEndpointSyncConsumerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.jms.endpoint.JmsEndpointSyncProducerTest"
  classesB4: "com.consol.citrus.jms.endpoint.JmsEndpointSyncProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.mail.client.MailClientTest"
  classesB4: "com.consol.citrus.mail.client.MailClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.mail.client.MailEndpointComponentTest"
  classesB4: "com.consol.citrus.mail.client.MailEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.mail.server.MailServerTest"
  classesB4: "com.consol.citrus.mail.server.MailServerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ssh.SshCommandTest"
  classesB4: "com.consol.citrus.ssh.SshCommandTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ssh.client.SshClientTest"
  classesB4: "com.consol.citrus.ssh.client.SshClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ssh.client.SshEndpointComponentTest"
  classesB4: "com.consol.citrus.ssh.client.SshEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.vertx.endpoint.VertxEndpointComponentTest"
  classesB4: "com.consol.citrus.vertx.endpoint.VertxEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.vertx.endpoint.VertxEndpointTest"
  classesB4: "com.consol.citrus.vertx.endpoint.VertxEndpointTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.vertx.endpoint.VertxSyncEndpointTest"
  classesB4: "com.consol.citrus.vertx.endpoint.VertxSyncEndpointTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.vertx.message.VertxMessageConverterTest"
  classesB4: "com.consol.citrus.vertx.message.VertxMessageConverterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.websocket.endpoint.WebSocketClientTest"
  classesB4: "com.consol.citrus.websocket.endpoint.WebSocketClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.websocket.endpoint.WebSocketEndpointComponentTest"
  classesB4: "com.consol.citrus.websocket.endpoint.WebSocketEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.websocket.endpoint.WebSocketEndpointTest"
  classesB4: "com.consol.citrus.websocket.endpoint.WebSocketEndpointTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.websocket.servlet.CitrusWebSocketDispatcherServletTest"
  classesB4: "com.consol.citrus.websocket.servlet.CitrusWebSocketDispatcherServletTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.WebServiceEndpointTest"
  classesB4: "com.consol.citrus.ws.WebServiceEndpointTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.actions.ReceiveSoapMessageActionTest"
  classesB4: "com.consol.citrus.ws.actions.ReceiveSoapMessageActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.actions.SendSoapFaultActionTest"
  classesB4: "com.consol.citrus.ws.actions.SendSoapFaultActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.actions.SendSoapMessageActionTest"
  classesB4: "com.consol.citrus.ws.actions.SendSoapMessageActionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.client.WebServiceClientTest"
  classesB4: "com.consol.citrus.ws.client.WebServiceClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.client.WebServiceEndpointComponentTest"
  classesB4: "com.consol.citrus.ws.client.WebServiceEndpointComponentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.interceptor.DelegatingEndpointInterceptorTest"
  classesB4: "com.consol.citrus.ws.interceptor.DelegatingEndpointInterceptorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.interceptor.SoapMustUnderstandEndpointInterceptorTest"
  classesB4: "com.consol.citrus.ws.interceptor.SoapMustUnderstandEndpointInterceptorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.message.SoapAttachmentTest"
  classesB4: "com.consol.citrus.ws.message.SoapAttachmentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.message.SoapAttachmentTest.StaticTextDataSource"
  classesB4: "com.consol.citrus.ws.message.SoapAttachmentTest.StaticTextDataSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.message.callback.SoapRequestMessageCallbackTest"
  classesB4: "com.consol.citrus.ws.message.callback.SoapRequestMessageCallbackTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.message.callback.SoapResponseMessageCallbackTest"
  classesB4: "com.consol.citrus.ws.message.callback.SoapResponseMessageCallbackTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.message.converter.SoapMessageConverterTest"
  classesB4: "com.consol.citrus.ws.message.converter.SoapMessageConverterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.message.converter.WsAddressingMessageConverterTest"
  classesB4: "com.consol.citrus.ws.message.converter.WsAddressingMessageConverterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.consol.citrus.ws.servlet.CitrusMessageDispatcherServletTest"
  classesB4: "com.consol.citrus.ws.servlet.CitrusMessageDispatcherServletTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "citrus"
commit: "citrus"
tooBig: false

refactorings {
  classesAftr: "org.apache.xml.security.samples.encryption.Decrypter"
  classesB4: "org.apache.xml.security.samples.encryption.Decrypter"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.encryption.Decrypter"
    classAftr: "org.apache.xml.security.samples.encryption.Decrypter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.encryption.Decrypter"
  classesB4: "org.apache.xml.security.samples.encryption.Decrypter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.encryption.Encrypter"
  classesB4: "org.apache.xml.security.samples.encryption.Encrypter"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.encryption.Encrypter"
    classAftr: "org.apache.xml.security.samples.encryption.Encrypter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.encryption.Encrypter"
  classesB4: "org.apache.xml.security.samples.encryption.Encrypter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.iaik.IAIKInterOp"
  classesB4: "org.apache.xml.security.samples.iaik.IAIKInterOp"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.iaik.IAIKInterOp"
    classAftr: "org.apache.xml.security.samples.iaik.IAIKInterOp"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.iaik.IAIKInterOp"
  classesB4: "org.apache.xml.security.samples.iaik.IAIKInterOp"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateCollectableSignature"
  classesB4: "org.apache.xml.security.samples.signature.CreateCollectableSignature"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.CreateCollectableSignature"
    classAftr: "org.apache.xml.security.samples.signature.CreateCollectableSignature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateCollectableSignature"
  classesB4: "org.apache.xml.security.samples.signature.CreateCollectableSignature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
  classesB4: "org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
    classAftr: "org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
  classesB4: "org.apache.xml.security.samples.signature.CreateEnvelopingSignature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
  classesB4: "org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
    classAftr: "org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
  classesB4: "org.apache.xml.security.samples.signature.CreateMerlinsExampleSixteen"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateMerlinsExampleTwentyThree"
  classesB4: "org.apache.xml.security.samples.signature.CreateMerlinsExampleTwentyThree"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.CreateMerlinsExampleTwentyThree"
    classAftr: "org.apache.xml.security.samples.signature.CreateMerlinsExampleTwentyThree"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateMerlinsExampleTwentyThree"
  classesB4: "org.apache.xml.security.samples.signature.CreateMerlinsExampleTwentyThree"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateSignature"
  classesB4: "org.apache.xml.security.samples.signature.CreateSignature"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.CreateSignature"
    classAftr: "org.apache.xml.security.samples.signature.CreateSignature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.CreateSignature"
  classesB4: "org.apache.xml.security.samples.signature.CreateSignature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.HereSigner"
  classesB4: "org.apache.xml.security.samples.signature.HereSigner"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.HereSigner"
    classAftr: "org.apache.xml.security.samples.signature.HereSigner"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.HereSigner"
  classesB4: "org.apache.xml.security.samples.signature.HereSigner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.NullURIReferenceResolver"
  classesB4: "org.apache.xml.security.samples.signature.NullURIReferenceResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.NullURIReferenceResolver"
    classAftr: "org.apache.xml.security.samples.signature.NullURIReferenceResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.NullURIReferenceResolver"
  classesB4: "org.apache.xml.security.samples.signature.NullURIReferenceResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyCollectableSignature"
  classesB4: "org.apache.xml.security.samples.signature.VerifyCollectableSignature"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.VerifyCollectableSignature"
    classAftr: "org.apache.xml.security.samples.signature.VerifyCollectableSignature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyCollectableSignature"
  classesB4: "org.apache.xml.security.samples.signature.VerifyCollectableSignature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
  classesB4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
    classAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
  classesB4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesFifteen"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
  classesB4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
    classAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
  classesB4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesSixteen"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesTwentyThree"
  classesB4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesTwentyThree"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesTwentyThree"
    classAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesTwentyThree"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesTwentyThree"
  classesB4: "org.apache.xml.security.samples.signature.VerifyMerlinsExamplesTwentyThree"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.transforms.SampleTransformNone"
  classesB4: "org.apache.xml.security.samples.transforms.SampleTransformNone"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.transforms.SampleTransformNone"
    classAftr: "org.apache.xml.security.samples.transforms.SampleTransformNone"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.transforms.SampleTransformNone"
  classesB4: "org.apache.xml.security.samples.transforms.SampleTransformNone"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.utils.resolver.OfflineResolver"
  classesB4: "org.apache.xml.security.samples.utils.resolver.OfflineResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.samples.utils.resolver.OfflineResolver"
    classAftr: "org.apache.xml.security.samples.utils.resolver.OfflineResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.samples.utils.resolver.OfflineResolver"
  classesB4: "org.apache.xml.security.samples.utils.resolver.OfflineResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.DigesterOutputStream"
  classesB4: "org.apache.jcp.xml.dsig.internal.DigesterOutputStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.DigesterOutputStream"
    classAftr: "org.apache.jcp.xml.dsig.internal.DigesterOutputStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.DigesterOutputStream"
  classesB4: "org.apache.jcp.xml.dsig.internal.DigesterOutputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.ApacheCanonicalizer"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.ApacheCanonicalizer"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.ApacheCanonicalizer"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.ApacheCanonicalizer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.ApacheCanonicalizer"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.ApacheCanonicalizer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.ApacheTransform"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.ApacheTransform"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.ApacheTransform"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.ApacheTransform"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.ApacheTransform"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.ApacheTransform"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA1"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA256"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA256"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA384"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA384"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA512"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod.SHA512"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMReference"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMReference"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.DOMReference"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMReference"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMReference"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMReference"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA1withRSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA1withRSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA256withRSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA256withRSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA384withRSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA384withRSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA512withRSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA512withRSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA1withDSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA1withDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA1withECDSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA1withECDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA256withECDSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA256withECDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA384withECDSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA384withECDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA512withECDSA"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod.SHA512withECDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature"
    classAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature.DOMSignatureValue"
  classesB4: "org.apache.jcp.xml.dsig.internal.dom.DOMXMLSignature.DOMSignatureValue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.Init"
  classesB4: "org.apache.xml.security.Init"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.Init"
    classAftr: "org.apache.xml.security.Init"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.Init"
  classesB4: "org.apache.xml.security.Init"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.JCEMapper"
  classesB4: "org.apache.xml.security.algorithms.JCEMapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.algorithms.JCEMapper"
    classAftr: "org.apache.xml.security.algorithms.JCEMapper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.JCEMapper"
  classesB4: "org.apache.xml.security.algorithms.JCEMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.JCEMapper.Algorithm"
  classesB4: "org.apache.xml.security.algorithms.JCEMapper.Algorithm"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.SignatureAlgorithm"
  classesB4: "org.apache.xml.security.algorithms.SignatureAlgorithm"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.algorithms.SignatureAlgorithm"
    classAftr: "org.apache.xml.security.algorithms.SignatureAlgorithm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.SignatureAlgorithm"
  classesB4: "org.apache.xml.security.algorithms.SignatureAlgorithm"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac"
    classAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA1"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA256"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA256"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA384"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA384"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA512"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacSHA512"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacRIPEMD160"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacRIPEMD160"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacMD5"
  classesB4: "org.apache.xml.security.algorithms.implementations.IntegrityHmac.IntegrityHmacMD5"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA"
    classAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA1"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA256"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA256"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA384"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA384"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA512"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSASHA512"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSARIPEMD160"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSARIPEMD160"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSAMD5"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureBaseRSA.SignatureRSAMD5"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureDSA"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureDSA"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.algorithms.implementations.SignatureDSA"
    classAftr: "org.apache.xml.security.algorithms.implementations.SignatureDSA"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureDSA"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA"
    classAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA1"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA256"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA256"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA384"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA384"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA512"
  classesB4: "org.apache.xml.security.algorithms.implementations.SignatureECDSA.SignatureECDSASHA512"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.c14n.implementations.Canonicalizer11"
  classesB4: "org.apache.xml.security.c14n.implementations.Canonicalizer11"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.c14n.implementations.Canonicalizer11"
    classAftr: "org.apache.xml.security.c14n.implementations.Canonicalizer11"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.c14n.implementations.Canonicalizer11"
  classesB4: "org.apache.xml.security.c14n.implementations.Canonicalizer11"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.c14n.implementations.Canonicalizer11.XmlAttrStack"
  classesB4: "org.apache.xml.security.c14n.implementations.Canonicalizer11.XmlAttrStack"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher"
  classesB4: "org.apache.xml.security.encryption.XMLCipher"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.encryption.XMLCipher"
    classAftr: "org.apache.xml.security.encryption.XMLCipher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher"
  classesB4: "org.apache.xml.security.encryption.XMLCipher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.AgreementMethodImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.AgreementMethodImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.CipherDataImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.CipherDataImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.CipherReferenceImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.CipherReferenceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.CipherValueImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.CipherValueImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptedDataImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptedDataImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptedKeyImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptedKeyImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptedTypeImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptedTypeImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptionMethodImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptionMethodImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptionPropertiesImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptionPropertiesImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptionPropertyImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.EncryptionPropertyImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.TransformsImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.TransformsImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl.ReferenceImpl"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl.ReferenceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl.DataReference"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl.DataReference"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl.KeyReference"
  classesB4: "org.apache.xml.security.encryption.XMLCipher.Factory.ReferenceListImpl.KeyReference"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipherInput"
  classesB4: "org.apache.xml.security.encryption.XMLCipherInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.encryption.XMLCipherInput"
    classAftr: "org.apache.xml.security.encryption.XMLCipherInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.encryption.XMLCipherInput"
  classesB4: "org.apache.xml.security.encryption.XMLCipherInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.KeyInfo"
  classesB4: "org.apache.xml.security.keys.KeyInfo"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.KeyInfo"
    classAftr: "org.apache.xml.security.keys.KeyInfo"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.KeyInfo"
  classesB4: "org.apache.xml.security.keys.KeyInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.X509Data"
  classesB4: "org.apache.xml.security.keys.content.X509Data"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.content.X509Data"
    classAftr: "org.apache.xml.security.keys.content.X509Data"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.X509Data"
  classesB4: "org.apache.xml.security.keys.content.X509Data"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.x509.XMLX509Certificate"
  classesB4: "org.apache.xml.security.keys.content.x509.XMLX509Certificate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial"
  classesB4: "org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial"
    classAftr: "org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial"
  classesB4: "org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.x509.XMLX509SKI"
  classesB4: "org.apache.xml.security.keys.content.x509.XMLX509SKI"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.content.x509.XMLX509SKI"
    classAftr: "org.apache.xml.security.keys.content.x509.XMLX509SKI"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.content.x509.XMLX509SKI"
  classesB4: "org.apache.xml.security.keys.content.x509.XMLX509SKI"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.KeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.KeyResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.KeyResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.KeyResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.KeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.KeyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.KeyResolver.ResolverIterator"
  classesB4: "org.apache.xml.security.keys.keyresolver.KeyResolver.ResolverIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.DSAKeyValueResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.DSAKeyValueResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.DSAKeyValueResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.DSAKeyValueResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.DSAKeyValueResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.DSAKeyValueResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.EncryptedKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.EncryptedKeyResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.EncryptedKeyResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.EncryptedKeyResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.EncryptedKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.EncryptedKeyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.KeyInfoReferenceResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.KeyInfoReferenceResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.KeyInfoReferenceResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.KeyInfoReferenceResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.KeyInfoReferenceResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.KeyInfoReferenceResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.PrivateKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.PrivateKeyResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.PrivateKeyResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.PrivateKeyResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.PrivateKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.PrivateKeyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.SecretKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.SecretKeyResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.SecretKeyResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.SecretKeyResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.SecretKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.SecretKeyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.SingleKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.SingleKeyResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.SingleKeyResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.SingleKeyResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.SingleKeyResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.SingleKeyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509IssuerSerialResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509IssuerSerialResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.X509IssuerSerialResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509IssuerSerialResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509IssuerSerialResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509IssuerSerialResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509SKIResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509SKIResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.X509SKIResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509SKIResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509SKIResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509SKIResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver"
    classAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver"
  classesB4: "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.storage.StorageResolver"
  classesB4: "org.apache.xml.security.keys.storage.StorageResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.storage.StorageResolver"
    classAftr: "org.apache.xml.security.keys.storage.StorageResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.storage.StorageResolver"
  classesB4: "org.apache.xml.security.keys.storage.StorageResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.storage.StorageResolver.StorageResolverIterator"
  classesB4: "org.apache.xml.security.keys.storage.StorageResolver.StorageResolverIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver"
  classesB4: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver"
    classAftr: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver"
  classesB4: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver.FilesystemIterator"
  classesB4: "org.apache.xml.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver.FilesystemIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.signature.Manifest"
  classesB4: "org.apache.xml.security.signature.Manifest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.signature.Manifest"
    classAftr: "org.apache.xml.security.signature.Manifest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.signature.Manifest"
  classesB4: "org.apache.xml.security.signature.Manifest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.signature.Reference"
  classesB4: "org.apache.xml.security.signature.Reference"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.signature.Reference"
    classAftr: "org.apache.xml.security.signature.Reference"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.signature.Reference"
  classesB4: "org.apache.xml.security.signature.Reference"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.signature.XMLSignature"
  classesB4: "org.apache.xml.security.signature.XMLSignature"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.signature.XMLSignature"
    classAftr: "org.apache.xml.security.signature.XMLSignature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.signature.XMLSignature"
  classesB4: "org.apache.xml.security.signature.XMLSignature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.config.XIncludeHandler"
  classesB4: "org.apache.xml.security.stax.config.XIncludeHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.config.XIncludeHandler"
    classAftr: "org.apache.xml.security.stax.config.XIncludeHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.config.XIncludeHandler"
  classesB4: "org.apache.xml.security.stax.config.XIncludeHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.ext.InboundXMLSec"
  classesB4: "org.apache.xml.security.stax.ext.InboundXMLSec"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.stax.ext.InboundXMLSec"
    classAftr: "org.apache.xml.security.stax.ext.InboundXMLSec"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.ext.InboundXMLSec"
  classesB4: "org.apache.xml.security.stax.ext.InboundXMLSec"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.InputProcessorChainImpl"
  classesB4: "org.apache.xml.security.stax.impl.InputProcessorChainImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.stax.impl.InputProcessorChainImpl"
    classAftr: "org.apache.xml.security.stax.impl.InputProcessorChainImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.InputProcessorChainImpl"
  classesB4: "org.apache.xml.security.stax.impl.InputProcessorChainImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.OutputProcessorChainImpl"
  classesB4: "org.apache.xml.security.stax.impl.OutputProcessorChainImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.stax.impl.OutputProcessorChainImpl"
    classAftr: "org.apache.xml.security.stax.impl.OutputProcessorChainImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.OutputProcessorChainImpl"
  classesB4: "org.apache.xml.security.stax.impl.OutputProcessorChainImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor.AbstractDecryptedEventReaderInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor.AbstractDecryptedEventReaderInputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor.DecryptionThread"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractDecryptInputProcessor.DecryptionThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor.InternalSignatureReferenceVerifier"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.AbstractSignatureReferenceVerifyInputProcessor.InternalSignatureReferenceVerifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.LogInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.LogInputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.input.LogInputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.input.LogInputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.LogInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.LogInputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.XMLEncryptedKeyInputHandler"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.XMLEncryptedKeyInputHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.input.XMLEncryptedKeyInputHandler"
    classAftr: "org.apache.xml.security.stax.impl.processor.input.XMLEncryptedKeyInputHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.XMLEncryptedKeyInputHandler"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.XMLEncryptedKeyInputHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor.InternalBufferProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor.InternalBufferProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor.InternalReplayProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor.InternalReplayProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor"
    classAftr: "org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor"
  classesB4: "org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.util.DigestOutputStream"
  classesB4: "org.apache.xml.security.stax.impl.util.DigestOutputStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.stax.impl.util.DigestOutputStream"
    classAftr: "org.apache.xml.security.stax.impl.util.DigestOutputStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.util.DigestOutputStream"
  classesB4: "org.apache.xml.security.stax.impl.util.DigestOutputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.util.SignerOutputStream"
  classesB4: "org.apache.xml.security.stax.impl.util.SignerOutputStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.stax.impl.util.SignerOutputStream"
    classAftr: "org.apache.xml.security.stax.impl.util.SignerOutputStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.stax.impl.util.SignerOutputStream"
  classesB4: "org.apache.xml.security.stax.impl.util.SignerOutputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.transforms.Transform"
  classesB4: "org.apache.xml.security.transforms.Transform"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.transforms.Transform"
    classAftr: "org.apache.xml.security.transforms.Transform"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.transforms.Transform"
  classesB4: "org.apache.xml.security.transforms.Transform"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.transforms.Transforms"
  classesB4: "org.apache.xml.security.transforms.Transforms"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.transforms.Transforms"
    classAftr: "org.apache.xml.security.transforms.Transforms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.transforms.Transforms"
  classesB4: "org.apache.xml.security.transforms.Transforms"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.transforms.implementations.TransformXSLT"
  classesB4: "org.apache.xml.security.transforms.implementations.TransformXSLT"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.transforms.implementations.TransformXSLT"
    classAftr: "org.apache.xml.security.transforms.implementations.TransformXSLT"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.transforms.implementations.TransformXSLT"
  classesB4: "org.apache.xml.security.transforms.implementations.TransformXSLT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.ClassLoaderUtils"
  classesB4: "org.apache.xml.security.utils.ClassLoaderUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.ClassLoaderUtils"
    classAftr: "org.apache.xml.security.utils.ClassLoaderUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.ClassLoaderUtils"
  classesB4: "org.apache.xml.security.utils.ClassLoaderUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.DigesterOutputStream"
  classesB4: "org.apache.xml.security.utils.DigesterOutputStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.DigesterOutputStream"
    classAftr: "org.apache.xml.security.utils.DigesterOutputStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.DigesterOutputStream"
  classesB4: "org.apache.xml.security.utils.DigesterOutputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.ElementProxy"
  classesB4: "org.apache.xml.security.utils.ElementProxy"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.ElementProxy"
    classAftr: "org.apache.xml.security.utils.ElementProxy"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.ElementProxy"
  classesB4: "org.apache.xml.security.utils.ElementProxy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.IgnoreAllErrorHandler"
  classesB4: "org.apache.xml.security.utils.IgnoreAllErrorHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.IgnoreAllErrorHandler"
    classAftr: "org.apache.xml.security.utils.IgnoreAllErrorHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.IgnoreAllErrorHandler"
  classesB4: "org.apache.xml.security.utils.IgnoreAllErrorHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.JavaUtils"
  classesB4: "org.apache.xml.security.utils.JavaUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.JavaUtils"
    classAftr: "org.apache.xml.security.utils.JavaUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.JavaUtils"
  classesB4: "org.apache.xml.security.utils.JavaUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.SignerOutputStream"
  classesB4: "org.apache.xml.security.utils.SignerOutputStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.SignerOutputStream"
    classAftr: "org.apache.xml.security.utils.SignerOutputStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.SignerOutputStream"
  classesB4: "org.apache.xml.security.utils.SignerOutputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.XMLUtils"
  classesB4: "org.apache.xml.security.utils.XMLUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.XMLUtils"
    classAftr: "org.apache.xml.security.utils.XMLUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.XMLUtils"
  classesB4: "org.apache.xml.security.utils.XMLUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.XalanXPathAPI"
  classesB4: "org.apache.xml.security.utils.XalanXPathAPI"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.XalanXPathAPI"
    classAftr: "org.apache.xml.security.utils.XalanXPathAPI"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.XalanXPathAPI"
  classesB4: "org.apache.xml.security.utils.XalanXPathAPI"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.ResourceResolver"
  classesB4: "org.apache.xml.security.utils.resolver.ResourceResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.resolver.ResourceResolver"
    classAftr: "org.apache.xml.security.utils.resolver.ResourceResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.ResourceResolver"
  classesB4: "org.apache.xml.security.utils.resolver.ResourceResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.ResourceResolverSpi"
  classesB4: "org.apache.xml.security.utils.resolver.ResourceResolverSpi"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.resolver.ResourceResolverSpi"
    classAftr: "org.apache.xml.security.utils.resolver.ResourceResolverSpi"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.ResourceResolverSpi"
  classesB4: "org.apache.xml.security.utils.resolver.ResourceResolverSpi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP"
    classAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverFragment"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverFragment"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.resolver.implementations.ResolverFragment"
    classAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverFragment"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverFragment"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverFragment"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem"
    classAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverXPointer"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverXPointer"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.utils.resolver.implementations.ResolverXPointer"
    classAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverXPointer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.utils.resolver.implementations.ResolverXPointer"
  classesB4: "org.apache.xml.security.utils.resolver.implementations.ResolverXPointer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "javax.xml.crypto.test.dsig.ClassLoaderTest"
  classesB4: "javax.xml.crypto.test.dsig.ClassLoaderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "javax.xml.crypto.test.dsig.ClassLoaderTest"
    classAftr: "javax.xml.crypto.test.dsig.ClassLoaderTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "javax.xml.crypto.test.dsig.ClassLoaderTest"
  classesB4: "javax.xml.crypto.test.dsig.ClassLoaderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "javax.xml.crypto.test.dsig.Driver"
  classesB4: "javax.xml.crypto.test.dsig.Driver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "javax.xml.crypto.test.dsig.Driver"
    classAftr: "javax.xml.crypto.test.dsig.Driver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "javax.xml.crypto.test.dsig.Driver"
  classesB4: "javax.xml.crypto.test.dsig.Driver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.algorithms.SignatureAlgorithmTest"
  classesB4: "org.apache.xml.security.test.dom.algorithms.SignatureAlgorithmTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.algorithms.SignatureAlgorithmTest"
    classAftr: "org.apache.xml.security.test.dom.algorithms.SignatureAlgorithmTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.algorithms.SignatureAlgorithmTest"
  classesB4: "org.apache.xml.security.test.dom.algorithms.SignatureAlgorithmTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.helper.C14nHelperTest"
  classesB4: "org.apache.xml.security.test.dom.c14n.helper.C14nHelperTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.c14n.helper.C14nHelperTest"
    classAftr: "org.apache.xml.security.test.dom.c14n.helper.C14nHelperTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.helper.C14nHelperTest"
  classesB4: "org.apache.xml.security.test.dom.c14n.helper.C14nHelperTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer11Test"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer11Test"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer11Test"
    classAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer11Test"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer11Test"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer11Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315ExclusiveTest"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315ExclusiveTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315ExclusiveTest"
    classAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315ExclusiveTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315ExclusiveTest"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315ExclusiveTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315Test"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315Test"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315Test"
    classAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315Test"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315Test"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.Canonicalizer20010315Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.ExclusiveC14NInteropTest"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.ExclusiveC14NInteropTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.c14n.implementations.ExclusiveC14NInteropTest"
    classAftr: "org.apache.xml.security.test.dom.c14n.implementations.ExclusiveC14NInteropTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.c14n.implementations.ExclusiveC14NInteropTest"
  classesB4: "org.apache.xml.security.test.dom.c14n.implementations.ExclusiveC14NInteropTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.BaltimoreEncTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.BaltimoreEncTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.encryption.BaltimoreEncTest"
    classAftr: "org.apache.xml.security.test.dom.encryption.BaltimoreEncTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.BaltimoreEncTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.BaltimoreEncTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.BobKeyResolver"
  classesB4: "org.apache.xml.security.test.dom.encryption.BobKeyResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.encryption.BobKeyResolver"
    classAftr: "org.apache.xml.security.test.dom.encryption.BobKeyResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.BobKeyResolver"
  classesB4: "org.apache.xml.security.test.dom.encryption.BobKeyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.EncryptContentTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.EncryptContentTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.encryption.EncryptContentTest"
    classAftr: "org.apache.xml.security.test.dom.encryption.EncryptContentTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.EncryptContentTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.EncryptContentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.ReferenceListTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.ReferenceListTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.encryption.ReferenceListTest"
    classAftr: "org.apache.xml.security.test.dom.encryption.ReferenceListTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.ReferenceListTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.ReferenceListTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.XMLCipherTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.XMLCipherTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.encryption.XMLCipherTest"
    classAftr: "org.apache.xml.security.test.dom.encryption.XMLCipherTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.XMLCipherTest"
  classesB4: "org.apache.xml.security.test.dom.encryption.XMLCipherTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.XMLEncryption11Test"
  classesB4: "org.apache.xml.security.test.dom.encryption.XMLEncryption11Test"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.encryption.XMLEncryption11Test"
    classAftr: "org.apache.xml.security.test.dom.encryption.XMLEncryption11Test"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.encryption.XMLEncryption11Test"
  classesB4: "org.apache.xml.security.test.dom.encryption.XMLEncryption11Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.BaltimoreTest"
  classesB4: "org.apache.xml.security.test.dom.interop.BaltimoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.interop.BaltimoreTest"
    classAftr: "org.apache.xml.security.test.dom.interop.BaltimoreTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.BaltimoreTest"
  classesB4: "org.apache.xml.security.test.dom.interop.BaltimoreTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.IAIKTest"
  classesB4: "org.apache.xml.security.test.dom.interop.IAIKTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.interop.IAIKTest"
    classAftr: "org.apache.xml.security.test.dom.interop.IAIKTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.IAIKTest"
  classesB4: "org.apache.xml.security.test.dom.interop.IAIKTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.IBMTest"
  classesB4: "org.apache.xml.security.test.dom.interop.IBMTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.interop.IBMTest"
    classAftr: "org.apache.xml.security.test.dom.interop.IBMTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.IBMTest"
  classesB4: "org.apache.xml.security.test.dom.interop.IBMTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.InteropTestBase"
  classesB4: "org.apache.xml.security.test.dom.interop.InteropTestBase"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.interop.InteropTestBase"
    classAftr: "org.apache.xml.security.test.dom.interop.InteropTestBase"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.InteropTestBase"
  classesB4: "org.apache.xml.security.test.dom.interop.InteropTestBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.RSASecurityTest"
  classesB4: "org.apache.xml.security.test.dom.interop.RSASecurityTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.interop.RSASecurityTest"
    classAftr: "org.apache.xml.security.test.dom.interop.RSASecurityTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.interop.RSASecurityTest"
  classesB4: "org.apache.xml.security.test.dom.interop.RSASecurityTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.resource.TestVectorResolver"
  classesB4: "org.apache.xml.security.test.dom.resource.TestVectorResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.resource.TestVectorResolver"
    classAftr: "org.apache.xml.security.test.dom.resource.TestVectorResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.resource.TestVectorResolver"
  classesB4: "org.apache.xml.security.test.dom.resource.TestVectorResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenAlgorithmTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.ForbiddenAlgorithmTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.secure_val.ForbiddenAlgorithmTest"
    classAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenAlgorithmTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenAlgorithmTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.ForbiddenAlgorithmTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenRefCountTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.ForbiddenRefCountTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.secure_val.ForbiddenRefCountTest"
    classAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenRefCountTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenRefCountTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.ForbiddenRefCountTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenReferenceTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.ForbiddenReferenceTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.secure_val.ForbiddenReferenceTest"
    classAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenReferenceTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.ForbiddenReferenceTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.ForbiddenReferenceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.WrappingAttackTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.WrappingAttackTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.secure_val.WrappingAttackTest"
    classAftr: "org.apache.xml.security.test.dom.secure_val.WrappingAttackTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.secure_val.WrappingAttackTest"
  classesB4: "org.apache.xml.security.test.dom.secure_val.WrappingAttackTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.CreateSignatureTest"
  classesB4: "org.apache.xml.security.test.dom.signature.CreateSignatureTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.signature.CreateSignatureTest"
    classAftr: "org.apache.xml.security.test.dom.signature.CreateSignatureTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.CreateSignatureTest"
  classesB4: "org.apache.xml.security.test.dom.signature.CreateSignatureTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.ECDSASignatureTest"
  classesB4: "org.apache.xml.security.test.dom.signature.ECDSASignatureTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.signature.ECDSASignatureTest"
    classAftr: "org.apache.xml.security.test.dom.signature.ECDSASignatureTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.ECDSASignatureTest"
  classesB4: "org.apache.xml.security.test.dom.signature.ECDSASignatureTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.HMACOutputLengthTest"
  classesB4: "org.apache.xml.security.test.dom.signature.HMACOutputLengthTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.signature.HMACOutputLengthTest"
    classAftr: "org.apache.xml.security.test.dom.signature.HMACOutputLengthTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.HMACOutputLengthTest"
  classesB4: "org.apache.xml.security.test.dom.signature.HMACOutputLengthTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.XMLSignatureInputTest"
  classesB4: "org.apache.xml.security.test.dom.signature.XMLSignatureInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.signature.XMLSignatureInputTest"
    classAftr: "org.apache.xml.security.test.dom.signature.XMLSignatureInputTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.XMLSignatureInputTest"
  classesB4: "org.apache.xml.security.test.dom.signature.XMLSignatureInputTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.XPointerResourceResolver"
  classesB4: "org.apache.xml.security.test.dom.signature.XPointerResourceResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.signature.XPointerResourceResolver"
    classAftr: "org.apache.xml.security.test.dom.signature.XPointerResourceResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.XPointerResourceResolver"
  classesB4: "org.apache.xml.security.test.dom.signature.XPointerResourceResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.XmlSecTest"
  classesB4: "org.apache.xml.security.test.dom.signature.XmlSecTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.signature.XmlSecTest"
    classAftr: "org.apache.xml.security.test.dom.signature.XmlSecTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.signature.XmlSecTest"
  classesB4: "org.apache.xml.security.test.dom.signature.XmlSecTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.transforms.implementations.TransformBase64DecodeTest"
  classesB4: "org.apache.xml.security.test.dom.transforms.implementations.TransformBase64DecodeTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.transforms.implementations.TransformBase64DecodeTest"
    classAftr: "org.apache.xml.security.test.dom.transforms.implementations.TransformBase64DecodeTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.transforms.implementations.TransformBase64DecodeTest"
  classesB4: "org.apache.xml.security.test.dom.transforms.implementations.TransformBase64DecodeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.transforms.implementations.TransformXSLTTest"
  classesB4: "org.apache.xml.security.test.dom.transforms.implementations.TransformXSLTTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.transforms.implementations.TransformXSLTTest"
    classAftr: "org.apache.xml.security.test.dom.transforms.implementations.TransformXSLTTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.transforms.implementations.TransformXSLTTest"
  classesB4: "org.apache.xml.security.test.dom.transforms.implementations.TransformXSLTTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.utils.Base64Test"
  classesB4: "org.apache.xml.security.test.dom.utils.Base64Test"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.utils.Base64Test"
    classAftr: "org.apache.xml.security.test.dom.utils.Base64Test"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.utils.Base64Test"
  classesB4: "org.apache.xml.security.test.dom.utils.Base64Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.utils.resolver.OfflineResolver"
  classesB4: "org.apache.xml.security.test.dom.utils.resolver.OfflineResolver"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.utils.resolver.OfflineResolver"
    classAftr: "org.apache.xml.security.test.dom.utils.resolver.OfflineResolver"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.utils.resolver.OfflineResolver"
  classesB4: "org.apache.xml.security.test.dom.utils.resolver.OfflineResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.utils.resolver.ResourceResolverTest"
  classesB4: "org.apache.xml.security.test.dom.utils.resolver.ResourceResolverTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.xml.security.test.dom.utils.resolver.ResourceResolverTest"
    classAftr: "org.apache.xml.security.test.dom.utils.resolver.ResourceResolverTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.xml.security.test.dom.utils.resolver.ResourceResolverTest"
  classesB4: "org.apache.xml.security.test.dom.utils.resolver.ResourceResolverTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "Log"
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "Log"
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "Log"
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "Log"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "Log"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
      }
    }
  }
}
project: "santuario-java"
commit: "santuario-java"
tooBig: false

refactorings {
  classesAftr: "snaq.util.JmxUtils"
  classesB4: "snaq.db.jmx.JmxUtils"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "snaq.db.AutoCommitValidator"
  classesB4: "snaq.db.AutoCommitValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "snaq.db.CacheConnection"
    classAftr: "snaq.db.CacheConnection"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          simpleType {
            name: "CachedStatement"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "it"
    nameaftr: "it"
    classb4: "snaq.db.CacheConnection"
    classAftr: "snaq.db.CacheConnection"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          simpleType {
            name: "CachedPreparedStatement"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "it"
    nameaftr: "it"
    classb4: "snaq.db.CacheConnection"
    classAftr: "snaq.db.CacheConnection"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          simpleType {
            name: "CachedCallableStatement"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "it"
    nameaftr: "it"
    classb4: "snaq.db.CacheConnection"
    classAftr: "snaq.db.CacheConnection"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "List"
              }
            }
            params {
              simpleType {
                name: "CachedPreparedStatement"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "it"
    nameaftr: "it"
    classb4: "snaq.db.CacheConnection"
    classAftr: "snaq.db.CacheConnection"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "List"
              }
            }
            params {
              simpleType {
                name: "CachedCallableStatement"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "it"
    nameaftr: "it"
    classb4: "snaq.db.CacheConnection"
    classAftr: "snaq.db.CacheConnection"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "snaq.db.CacheConnection"
  classesB4: "snaq.db.CacheConnection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.CachedCallableStatement"
  classesB4: "snaq.db.CachedCallableStatement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.CachedPreparedStatement"
  classesB4: "snaq.db.CachedPreparedStatement"
  typeChange {
    dtB4 {
      simpleType {
        name: "StringBuffer"
      }
    }
    dtAftr {
      simpleType {
        name: "StringBuilder"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sb"
    nameaftr: "sb"
    classb4: "snaq.db.CachedPreparedStatement"
    classAftr: "snaq.db.CachedPreparedStatement"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CachedPreparedStatement"
  classesB4: "snaq.db.CachedPreparedStatement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.CachedStatement"
  classesB4: "snaq.db.CachedStatement"
  typeChange {
    dtB4 {
      simpleType {
        name: "StringBuffer"
      }
    }
    dtAftr {
      simpleType {
        name: "StringBuilder"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sb"
    nameaftr: "sb"
    classb4: "snaq.db.CachedStatement"
    classAftr: "snaq.db.CachedStatement"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.CachedStatement"
  classesB4: "snaq.db.CachedStatement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool"
  classesB4: "snaq.db.ConnectionPool"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.DefaultValidator"
  classesB4: "snaq.db.ConnectionPool.DefaultValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.db.ConnectionPool.EventRelay"
    classAftr: "snaq.db.ConnectionPool.EventRelay"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.EventRelay"
  classesB4: "snaq.db.ConnectionPool.EventRelay"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPool.Notifier"
  classesB4: "snaq.db.ConnectionPool.Notifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolEvent"
  classesB4: "snaq.db.ConnectionPoolEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "CacheConnection"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.db.ConnectionPoolEvent"
    classAftr: "snaq.db.ConnectionPoolEvent"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolEvent"
  classesB4: "snaq.db.ConnectionPoolEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolEventAdapter"
  classesB4: "snaq.db.ConnectionPoolEventAdapter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolListener"
  classesB4: "snaq.db.ConnectionPoolListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Hashtable"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
        params {
          simpleType {
            name: "ConnectionPoolManager"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "HashMap"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
        params {
          simpleType {
            name: "ConnectionPoolManager"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "managers"
    nameaftr: "managers"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ObjectPoolListener"
              }
            }
            params {
              simpleType {
                name: "CacheConnection"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "parseListeners"
    nameaftr: "parseListeners"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Enumeration"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Enumeration"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "e"
    nameaftr: "e"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "it"
    nameaftr: "it"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ObjectPoolListener"
              }
            }
            params {
              simpleType {
                name: "CacheConnection"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "poolListeners"
    nameaftr: "poolListeners"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Iterator"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "iter"
    nameaftr: "iter"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Enumeration"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Enumeration"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "e"
    nameaftr: "e"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Enumeration"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Enumeration"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "e"
    nameaftr: "e"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "loggerShared"
    nameaftr: "logShared"
    classb4: "snaq.db.ConnectionPoolManager"
    classAftr: "snaq.db.ConnectionPoolManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager"
  classesB4: "snaq.db.ConnectionPoolManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManager.Releaser"
  classesB4: "snaq.db.ConnectionPoolManager.Releaser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManagerEvent"
  classesB4: "snaq.db.ConnectionPoolManagerEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionPoolManagerListener"
  classesB4: "snaq.db.ConnectionPoolManagerListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.ConnectionValidator"
  classesB4: "snaq.db.ConnectionValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.DBPoolDataSource"
  classesB4: "snaq.db.DBPoolDataSource"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "snaq.db.DBPoolDataSource"
    classAftr: "snaq.db.DBPoolDataSource"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.DBPoolDataSource"
  classesB4: "snaq.db.DBPoolDataSource"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "snaq.db.DBPoolDataSource"
  classesB4: "snaq.db.DBPoolDataSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.DBPoolDataSourceFactory"
  classesB4: "snaq.db.DBPoolDataSourceFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "snaq.db.DBPoolDataSourceFactory"
    classAftr: "snaq.db.DBPoolDataSourceFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.DBPoolDataSourceFactory"
  classesB4: "snaq.db.DBPoolDataSourceFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.JDBCInfo"
  classesB4: "snaq.db.JDBCInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.PasswordDecoder"
  classesB4: "snaq.db.PasswordDecoder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.QueryValidator"
  classesB4: "snaq.db.QueryValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.RotDecoder"
  classesB4: "snaq.db.RotDecoder"
  typeChange {
    dtB4 {
      simpleType {
        name: "StringBuffer"
      }
    }
    dtAftr {
      simpleType {
        name: "StringBuilder"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sb"
    nameaftr: "sb"
    classb4: "snaq.db.RotDecoder"
    classAftr: "snaq.db.RotDecoder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.RotDecoder"
  classesB4: "snaq.db.RotDecoder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.SQLUpdate"
  classesB4: "snaq.db.SQLUpdate"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "snaq.db.SQLUpdate"
    classAftr: "snaq.db.SQLUpdate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.SQLUpdate"
  classesB4: "snaq.db.SQLUpdate"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "snaq.db.SQLUpdate"
  classesB4: "snaq.db.SQLUpdate"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "snaq.db.SQLUpdate"
  classesB4: "snaq.db.SQLUpdate"
  typeChange {
    dtB4 {
      simpleType {
        name: "StringBuffer"
      }
    }
    dtAftr {
      simpleType {
        name: "StringBuilder"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sb"
    nameaftr: "sb"
    classb4: "snaq.db.SQLUpdate"
    classAftr: "snaq.db.SQLUpdate"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.db.SQLUpdate"
  classesB4: "snaq.db.SQLUpdate"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "snaq.db.SQLUpdate"
  classesB4: "snaq.db.SQLUpdate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.Select1Validator"
  classesB4: "snaq.db.Select1Validator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.SimpleQueryValidator"
  classesB4: "snaq.db.SimpleQueryValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.db.StatementListener"
  classesB4: "snaq.db.StatementListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.EventDispatcher"
  classesB4: "snaq.util.EventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.EventNotifier"
  classesB4: "snaq.util.EventNotifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "EventDispatcher"
          }
        }
        params {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
        params {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "EventDispatcher"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ObjectPoolListener"
              }
            }
            params {
              simpleType {
                name: "T"
              }
            }
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ObjectPoolEvent"
              }
            }
            params {
              simpleType {
                name: "T"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "eventDispatcher"
    nameaftr: "eventDispatcher"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ObjectPoolListener"
              }
            }
            params {
              simpleType {
                name: "T"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "listeners"
    nameaftr: "listeners"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolListener"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "x"
    nameaftr: "x"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolListener"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "x"
    nameaftr: "x"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "poolEvent"
    nameaftr: "poolEvent"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "poolEvent"
    nameaftr: "poolEvent"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "log"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      simpleType {
        name: "Strategy"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "accessMethod"
    nameaftr: "selection"
    classb4: "snaq.util.ObjectPool"
    classAftr: "snaq.util.ObjectPool"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool"
  classesB4: "snaq.util.ObjectPool"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Cleaner"
  classesB4: "snaq.util.ObjectPool.Cleaner"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.ObjectPool.Cleaner"
    classAftr: "snaq.util.ObjectPool.Cleaner"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Cleaner"
  classesB4: "snaq.util.ObjectPool.Cleaner"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.ObjectPool.Cleaner"
    classAftr: "snaq.util.ObjectPool.Cleaner"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Cleaner"
  classesB4: "snaq.util.ObjectPool.Cleaner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.InitThread"
  classesB4: "snaq.util.ObjectPool.InitThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Releaser"
  classesB4: "snaq.util.ObjectPool.Releaser"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "snaq.util.ObjectPool.Releaser"
    classAftr: "snaq.util.ObjectPool.Releaser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Releaser"
  classesB4: "snaq.util.ObjectPool.Releaser"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.ObjectPool.Releaser"
    classAftr: "snaq.util.ObjectPool.Releaser"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Releaser"
  classesB4: "snaq.util.ObjectPool.Releaser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Notifier"
  classesB4: "snaq.util.ObjectPool.Notifier"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolListener"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolListener"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "opl"
    nameaftr: "opl"
    classb4: "snaq.util.ObjectPool.Notifier"
    classAftr: "snaq.util.ObjectPool.Notifier"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Notifier"
  classesB4: "snaq.util.ObjectPool.Notifier"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.ObjectPool.Notifier"
    classAftr: "snaq.util.ObjectPool.Notifier"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPool.Notifier"
  classesB4: "snaq.util.ObjectPool.Notifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPoolEvent"
  classesB4: "snaq.util.ObjectPoolEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getPool"
    nameaftr: "getPool"
    classb4: "snaq.util.ObjectPoolEvent"
    classAftr: "snaq.util.ObjectPoolEvent"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPoolEvent"
  classesB4: "snaq.util.ObjectPoolEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.ObjectPoolEvent"
    classAftr: "snaq.util.ObjectPoolEvent"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.ObjectPoolEvent"
  classesB4: "snaq.util.ObjectPoolEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPoolEventAdapter"
  classesB4: "snaq.util.ObjectPoolEventAdapter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.ObjectPoolListener"
  classesB4: "snaq.util.ObjectPoolListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPool"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPool"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pool"
    nameaftr: "pool"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ObjectPoolEvent"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ObjectPoolEvent"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "evt"
    nameaftr: "evt"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Enumeration"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Enumeration"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "e"
    nameaftr: "e"
    classb4: "snaq.util.PoolTracer"
    classAftr: "snaq.util.PoolTracer"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "snaq.util.PoolTracer"
  classesB4: "snaq.util.PoolTracer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.Reusable"
  classesB4: "snaq.util.Reusable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.TimeWrapper"
  classesB4: "snaq.util.TimeWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.logging.DBPoolLegacyFormatter"
  classesB4: "snaq.util.logging.DBPoolLegacyFormatter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.logging.LogUtil"
  classesB4: "snaq.util.logging.LogUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.logging.TerseFormatter"
  classesB4: "snaq.util.logging.TerseFormatter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "snaq.util.JmxUtils"
  classesB4: "snaq.db.jmx.JmxUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          aug {
            reuses {
              simpleType {
                name: "snaq.util.ObjectPoolListener"
                typeOfType: Internal
              }
            }
            added {
              simpleType {
                name: "T"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Aug
          b4 {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "snaq.util.ObjectPoolListener"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "T"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.util.ObjectPoolListener"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "snaq.util.ObjectPoolListener"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "T"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPoolListener"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "snaq.util.ObjectPool"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
      params {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
      added {
        wildCrd {
          supOrext: "super"
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "snaq.util.ObjectPool"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "snaq.util.ObjectPool"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPool"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "WildCard"
      dt {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPool"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Iterator"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.db.CachedStatement"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "snaq.db.CachedStatement"
          typeOfType: Internal
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.db.CachedStatement"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Iterator"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "snaq.db.CachedStatement"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CachedStatement"
          typeOfType: Internal
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "snaq.util.EventDispatcher"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "snaq.util.ObjectPoolEvent"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "snaq.util.EventDispatcher"
          typeOfType: Internal
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolEvent"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          aug {
            reuses {
              simpleType {
                name: "snaq.util.ObjectPoolListener"
                typeOfType: Internal
              }
            }
            added {
              simpleType {
                name: "T"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Aug
          b4 {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "snaq.util.ObjectPoolListener"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "T"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
      syntypchng {
        key: "Param:1 "
        value {
          aug {
            reuses {
              simpleType {
                name: "snaq.util.ObjectPoolEvent"
                typeOfType: Internal
              }
            }
            added {
              simpleType {
                name: "T"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Aug
          b4 {
            simpleType {
              name: "snaq.util.ObjectPoolEvent"
              typeOfType: Internal
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "snaq.util.ObjectPoolEvent"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "T"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "snaq.util.EventDispatcher"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "snaq.util.ObjectPoolListener"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "snaq.util.ObjectPoolEvent"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "snaq.util.EventDispatcher"
            typeOfType: Internal
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "snaq.util.ObjectPoolListener"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "T"
                typeOfType: TypeVariable
              }
            }
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "snaq.util.ObjectPoolEvent"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "T"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPoolEvent"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolEvent"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPoolListener"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPoolEvent"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Hashtable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.db.ConnectionPoolManager"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.db.ConnectionPoolManager"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "java.util.Hashtable"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "java.util.HashMap"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "java.util.Hashtable"
                  to: "java.util.HashMap"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "java.util.Hashtable"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.util.HashMap"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Hashtable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.db.ConnectionPoolManager"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.HashMap"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.db.ConnectionPoolManager"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Hashtable"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Hashtable"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "snaq.util.ObjectPool"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "snaq.db.CacheConnection"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
      added {
        simpleType {
          name: "snaq.db.CacheConnection"
          typeOfType: Internal
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "snaq.util.ObjectPool"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "snaq.util.ObjectPool"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "snaq.db.CacheConnection"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPool"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "snaq.db.CacheConnection"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CacheConnection"
          typeOfType: Internal
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPool"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Iterator"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "java.util.List"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "snaq.db.CachedPreparedStatement"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "snaq.db.CachedPreparedStatement"
          typeOfType: Internal
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "java.util.List"
                typeOfType: Jdk
              }
            }
            params {
              simpleType {
                name: "snaq.db.CachedPreparedStatement"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Iterator"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "java.util.List"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "snaq.db.CachedPreparedStatement"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CachedPreparedStatement"
          typeOfType: Internal
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "snaq.util.ObjectPoolListener"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
      added {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "snaq.util.ObjectPoolListener"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "snaq.util.ObjectPoolListener"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPoolListener"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Iterator"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "java.util.List"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "snaq.db.CachedCallableStatement"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "snaq.db.CachedCallableStatement"
          typeOfType: Internal
        }
      }
      added {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "java.util.List"
                typeOfType: Jdk
              }
            }
            params {
              simpleType {
                name: "snaq.db.CachedCallableStatement"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Iterator"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "java.util.List"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "snaq.db.CachedCallableStatement"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CachedCallableStatement"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Iterator"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.db.CachedPreparedStatement"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "snaq.db.CachedPreparedStatement"
          typeOfType: Internal
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.db.CachedPreparedStatement"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Iterator"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "snaq.db.CachedPreparedStatement"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CachedPreparedStatement"
          typeOfType: Internal
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "int"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "snaq.util.ObjectPool.Strategy"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "snaq.util.ObjectPool.Strategy"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "int"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPool.Strategy"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Iterator"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Iterator"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "snaq.util.ObjectPoolEvent"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "snaq.util.ObjectPoolEvent"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "snaq.util.ObjectPoolEvent"
          typeOfType: Internal
        }
      }
      added {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "snaq.util.ObjectPoolEvent"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "snaq.util.ObjectPoolEvent"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPoolEvent"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolEvent"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPoolEvent"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Collection"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Collection"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "snaq.db.CacheConnection"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          aug {
            reuses {
              simpleType {
                name: "snaq.util.ObjectPoolListener"
                typeOfType: Internal
              }
            }
            added {
              simpleType {
                name: "snaq.db.CacheConnection"
                typeOfType: Internal
              }
            }
          }
          kind: Aug
          b4 {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "snaq.util.ObjectPoolListener"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "snaq.db.CacheConnection"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Collection"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.util.ObjectPoolListener"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Collection"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "snaq.util.ObjectPoolListener"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "snaq.db.CacheConnection"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPoolListener"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPoolListener"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "snaq.db.CacheConnection"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CacheConnection"
          typeOfType: Internal
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPoolListener"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Iterator"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "snaq.db.CachedCallableStatement"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "snaq.db.CachedCallableStatement"
          typeOfType: Internal
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "snaq.db.CachedCallableStatement"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Iterator"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "snaq.db.CachedCallableStatement"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.db.CachedCallableStatement"
          typeOfType: Internal
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Iterator"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Enumeration"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Enumeration"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.util.Enumeration"
          typeOfType: Jdk
        }
      }
      added {
        wildCrd {
          supOrext: "super"
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.util.Enumeration"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Enumeration"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Enumeration"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Enumeration"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "WildCard"
      dt {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Enumeration"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "snaq.util.ObjectPool"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
      added {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "snaq.util.ObjectPool"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "snaq.util.ObjectPool"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "snaq.util.ObjectPool"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "snaq.util.ObjectPool"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "T"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "snaq.util.ObjectPool"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.StringBuffer"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "java.lang.StringBuilder"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.StringBuffer"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.lang.StringBuilder"
              typeOfType: Jdk
            }
          }
          chng {
            from: "java.lang.StringBuffer"
            to: "java.lang.StringBuilder"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.StringBuffer"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "java.lang.StringBuilder"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.StringBuffer"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.StringBuilder"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.StringBuffer"
        typeOfType: Jdk
      }
    }
  }
}
project: "DBPool"
commit: "DBPool"
tooBig: false

refactorings {
  classesAftr: "net.sf.jautl.collections.arrays.TestCombSorter11"
  classesB4: "net.sf.jautl.collections.arrays.TestCombSorter11"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.collections.arrays.TestCombSorter11.SA"
  classesB4: "net.sf.jautl.collections.arrays.TestCombSorter11.SA"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.collections.dictionaries.TestScopedDictionary"
  classesB4: "net.sf.jautl.collections.dictionaries.TestScopedDictionary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.collections.matricies.BitMatrixTest"
  classesB4: "net.sf.jautl.collections.matricies.BitMatrixTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.Adler32Test"
  classesB4: "net.sf.jautl.md.Adler32Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.Adler32Test"
    classAftr: "net.sf.jautl.md.Adler32Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.Adler32Test"
  classesB4: "net.sf.jautl.md.Adler32Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.MD2Test"
  classesB4: "net.sf.jautl.md.MD2Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.MD2Test"
    classAftr: "net.sf.jautl.md.MD2Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.MD2Test"
  classesB4: "net.sf.jautl.md.MD2Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.MD5Test"
  classesB4: "net.sf.jautl.md.MD5Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.MD5Test"
    classAftr: "net.sf.jautl.md.MD5Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.MD5Test"
  classesB4: "net.sf.jautl.md.MD5Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.Murmur2ATest"
  classesB4: "net.sf.jautl.md.Murmur2ATest"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.Murmur2ATest"
    classAftr: "net.sf.jautl.md.Murmur2ATest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.Murmur2ATest"
  classesB4: "net.sf.jautl.md.Murmur2ATest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.Murmur3_32Test"
  classesB4: "net.sf.jautl.md.Murmur3_32Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.Murmur3_32Test"
    classAftr: "net.sf.jautl.md.Murmur3_32Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.Murmur3_32Test"
  classesB4: "net.sf.jautl.md.Murmur3_32Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.RIPEMD128Test"
  classesB4: "net.sf.jautl.md.RIPEMD128Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.RIPEMD128Test"
    classAftr: "net.sf.jautl.md.RIPEMD128Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.RIPEMD128Test"
  classesB4: "net.sf.jautl.md.RIPEMD128Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.RIPEMD160Test"
  classesB4: "net.sf.jautl.md.RIPEMD160Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.RIPEMD160Test"
    classAftr: "net.sf.jautl.md.RIPEMD160Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.RIPEMD160Test"
  classesB4: "net.sf.jautl.md.RIPEMD160Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.SHA2_256Test"
  classesB4: "net.sf.jautl.md.SHA2_256Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.SHA2_256Test"
    classAftr: "net.sf.jautl.md.SHA2_256Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.SHA2_256Test"
  classesB4: "net.sf.jautl.md.SHA2_256Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.SHA2_384Test"
  classesB4: "net.sf.jautl.md.SHA2_384Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.SHA2_384Test"
    classAftr: "net.sf.jautl.md.SHA2_384Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.SHA2_384Test"
  classesB4: "net.sf.jautl.md.SHA2_384Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.SHA2_512Test"
  classesB4: "net.sf.jautl.md.SHA2_512Test"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "Object"
          }
        }
        dim: 2
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Collection"
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "Object"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "testVectors"
    nameaftr: "testVectors"
    classb4: "net.sf.jautl.md.SHA2_512Test"
    classAftr: "net.sf.jautl.md.SHA2_512Test"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.sf.jautl.md.SHA2_512Test"
  classesB4: "net.sf.jautl.md.SHA2_512Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.TesterBase"
  classesB4: "net.sf.jautl.md.TesterBase"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.sf.jautl.md.TesterBase"
  classesB4: "net.sf.jautl.md.TesterBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.md.UintHashUtilitiesTest"
  classesB4: "net.sf.jautl.md.UintHashUtilitiesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.rng.sources.RandomSourceMersenneTwisterTest"
  classesB4: "net.sf.jautl.rng.sources.RandomSourceMersenneTwisterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.rng.sources.RandomSourceRC4Test"
  classesB4: "net.sf.jautl.rng.sources.RandomSourceRC4Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.rng.variates.TestBoolean"
  classesB4: "net.sf.jautl.rng.variates.TestBoolean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.BitRotationsTest"
  classesB4: "net.sf.jautl.utility.BitRotationsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTest"
  classesB4: "net.sf.jautl.utility.mutables.MutableTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestBoolean"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestBoolean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestByte"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestByte"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestCharacter"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestCharacter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestDouble"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestDouble"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestFloat"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestFloat"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestInteger"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestInteger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestLong"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestLong"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestShort"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestShort"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.mutables.MutableTestString"
  classesB4: "net.sf.jautl.utility.mutables.MutableTestString"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.sf.jautl.utility.reflection.TestFieldUtils"
  classesB4: "net.sf.jautl.utility.reflection.TestFieldUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    arryTyp {
      name {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
      dim: 2
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Collection"
          typeOfType: Jdk
        }
      }
      params {
        arryTyp {
          name {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          dim: 1
        }
      }
    }
  }
  syntacticAnalysis {
    enh {
      reuses {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
      added {
        arryTyp {
          name {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          dim: 1
        }
      }
      added {
        simpleType {
          name: "java.util.Collection"
          typeOfType: Jdk
        }
      }
      removed {
        arryTyp {
          name {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          dim: 2
        }
      }
    }
    kind: Enh
    b4 {
      arryTyp {
        name {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
        dim: 2
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Collection"
            typeOfType: Jdk
          }
        }
        params {
          arryTyp {
            name {
              simpleType {
                name: "java.lang.Object"
                typeOfType: Jdk
              }
            }
            dim: 1
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        arryTyp {
          name {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          dim: 2
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Collection"
              typeOfType: Jdk
            }
          }
          params {
            arryTyp {
              name {
                simpleType {
                  name: "java.lang.Object"
                  typeOfType: Jdk
                }
              }
              dim: 1
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        arryTyp {
          name {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          dim: 1
        }
      }
    }
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Collection"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceRemoved {
      typeOfType: "Jdk"
      dt {
        arryTyp {
          name {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          dim: 2
        }
      }
    }
  }
}
project: "jautl"
commit: "jautl"
tooBig: false

refactorings {
  classesAftr: "com.norconex.collector.http.crawler.HttpCrawler"
  classesB4: "com.norconex.collector.http.crawler.HttpCrawler"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.crawler.HttpCrawler"
    classAftr: "com.norconex.collector.http.crawler.HttpCrawler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.crawler.HttpCrawler"
  classesB4: "com.norconex.collector.http.crawler.HttpCrawler"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "com.norconex.collector.http.crawler.HttpCrawler"
  classesB4: "com.norconex.collector.http.crawler.HttpCrawler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpClientInitializer"
  classesB4: "com.norconex.collector.http.handler.IHttpClientInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpDocumentFetcher"
  classesB4: "com.norconex.collector.http.handler.IHttpDocumentFetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpDocumentProcessor"
  classesB4: "com.norconex.collector.http.handler.IHttpDocumentProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpHeadersFetcher"
  classesB4: "com.norconex.collector.http.handler.IHttpHeadersFetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IRobotsTxtProvider"
  classesB4: "com.norconex.collector.http.handler.IRobotsTxtProvider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
    classAftr: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
    classAftr: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultDocumentFetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultHttpClientInitializer"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultHttpClientInitializer"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.impl.DefaultHttpClientInitializer"
    classAftr: "com.norconex.collector.http.handler.impl.DefaultHttpClientInitializer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultHttpClientInitializer"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultHttpClientInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
    classAftr: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
    classAftr: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  classesB4: "com.norconex.collector.http.handler.impl.DefaultRobotsTxtProvider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  classesB4: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
    classAftr: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  classesB4: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHead"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
    classAftr: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  classesB4: "com.norconex.collector.http.handler.impl.SimpleHttpHeadersFetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpClientInitializer"
  classesB4: "com.norconex.collector.http.handler.IHttpClientInitializer"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.IHttpClientInitializer"
    classAftr: "com.norconex.collector.http.handler.IHttpClientInitializer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpDocumentFetcher"
  classesB4: "com.norconex.collector.http.handler.IHttpDocumentFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.IHttpDocumentFetcher"
    classAftr: "com.norconex.collector.http.handler.IHttpDocumentFetcher"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IHttpHeadersFetcher"
  classesB4: "com.norconex.collector.http.handler.IHttpHeadersFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.IHttpHeadersFetcher"
    classAftr: "com.norconex.collector.http.handler.IHttpHeadersFetcher"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.collector.http.handler.IRobotsTxtProvider"
  classesB4: "com.norconex.collector.http.handler.IRobotsTxtProvider"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.norconex.collector.http.handler.IRobotsTxtProvider"
    classAftr: "com.norconex.collector.http.handler.IRobotsTxtProvider"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpHead"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpHead"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpHead"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpHead"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpHead"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
project: "collectors"
commit: "collectors"
tooBig: false

refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "put"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "DeleteMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpDelete"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "DeleteMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpDelete"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "request"
    classb4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
    classAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  classesB4: "com.diegoschivo.samples.apache.cxf.jaxrs.StoreTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PutMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPut"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PutMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPut"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PutMethod"
            to: "org.apache.http.client.methods.HttpPut"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PutMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPut"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PutMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPut"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PutMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.DeleteMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpDelete"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.DeleteMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpDelete"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.DeleteMethod"
            to: "org.apache.http.client.methods.HttpDelete"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.DeleteMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpDelete"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.DeleteMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpDelete"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.DeleteMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
project: "samples"
commit: "samples"
tooBig: false

refactorings {
  classesAftr: "pl.edu.agh.iisg.timeline.editpart.dynamic.DynamicModelRefresherTest"
  classesB4: "pl.edu.agh.iisg.timeline.editpart.dynamic.DynamicModelRefresherTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "pl.edu.agh.iisg.timeline.positioner.DiscretePositionerTest"
  classesB4: "pl.edu.agh.iisg.timeline.positioner.DiscretePositionerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "timeline"
commit: "timeline"
tooBig: false

refactorings {
  classesAftr: "com.omertron.themoviedbapi.TheMovieDbApi"
  classesB4: "com.omertron.themoviedbapi.TheMovieDbApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.AlternativeTitle"
  classesB4: "com.omertron.themoviedbapi.model.AlternativeTitle"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Artwork"
  classesB4: "com.omertron.themoviedbapi.model.Artwork"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.ChangeItem"
  classesB4: "com.omertron.themoviedbapi.model.ChangeItem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.ChangeValue"
  classesB4: "com.omertron.themoviedbapi.model.ChangeValue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Collection"
  classesB4: "com.omertron.themoviedbapi.model.Collection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.CollectionInfo"
  classesB4: "com.omertron.themoviedbapi.model.CollectionInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Company"
  classesB4: "com.omertron.themoviedbapi.model.Company"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Genre"
  classesB4: "com.omertron.themoviedbapi.model.Genre"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Keyword"
  classesB4: "com.omertron.themoviedbapi.model.Keyword"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.KeywordMovie"
  classesB4: "com.omertron.themoviedbapi.model.KeywordMovie"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Language"
  classesB4: "com.omertron.themoviedbapi.model.Language"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.MovieChanges"
  classesB4: "com.omertron.themoviedbapi.model.MovieChanges"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.MovieDb"
  classesB4: "com.omertron.themoviedbapi.model.MovieDb"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.MovieDbList"
  classesB4: "com.omertron.themoviedbapi.model.MovieDbList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.MovieList"
  classesB4: "com.omertron.themoviedbapi.model.MovieList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Person"
  classesB4: "com.omertron.themoviedbapi.model.Person"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.PersonCast"
  classesB4: "com.omertron.themoviedbapi.model.PersonCast"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.PersonCredit"
  classesB4: "com.omertron.themoviedbapi.model.PersonCredit"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.PersonCrew"
  classesB4: "com.omertron.themoviedbapi.model.PersonCrew"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.ProductionCompany"
  classesB4: "com.omertron.themoviedbapi.model.ProductionCompany"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.ProductionCountry"
  classesB4: "com.omertron.themoviedbapi.model.ProductionCountry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.ReleaseInfo"
  classesB4: "com.omertron.themoviedbapi.model.ReleaseInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.StatusCode"
  classesB4: "com.omertron.themoviedbapi.model.StatusCode"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.TmdbConfiguration"
  classesB4: "com.omertron.themoviedbapi.model.TmdbConfiguration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.TokenAuthorisation"
  classesB4: "com.omertron.themoviedbapi.model.TokenAuthorisation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.TokenSession"
  classesB4: "com.omertron.themoviedbapi.model.TokenSession"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Trailer"
  classesB4: "com.omertron.themoviedbapi.model.Trailer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.model.Translation"
  classesB4: "com.omertron.themoviedbapi.model.Translation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.tools.ApiUrl"
  classesB4: "com.omertron.themoviedbapi.tools.ApiUrl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.tools.WebBrowser"
  classesB4: "com.omertron.themoviedbapi.tools.WebBrowser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperAlternativeTitles"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperAlternativeTitles"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperBase"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperBase"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperBase"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperBase"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperBase"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperChanges"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperChanges"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperCollection"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperCollection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperCompany"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperCompany"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperCompanyMovies"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperCompanyMovies"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperConfig"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperGenres"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperGenres"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperImages"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperImages"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperKeywordMovies"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperKeywordMovies"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperKeywords"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperKeywords"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperMovie"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperMovie"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperMovieCasts"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperMovieCasts"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperMovieKeywords"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperMovieKeywords"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperMovieList"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperMovieList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperPerson"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperPerson"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperPersonCredits"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperPersonCredits"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperReleaseInfo"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperReleaseInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperTrailers"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperTrailers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.wrapper.WrapperTranslations"
  classesB4: "com.omertron.themoviedbapi.wrapper.WrapperTranslations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.themoviedbapi.TheMovieDbApiTest"
  classesB4: "com.omertron.themoviedbapi.TheMovieDbApiTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "api-themoviedb"
commit: "api-themoviedb"
tooBig: false

refactorings {
  classesAftr: "org.eclipse.tycho.core.maven.TychoInterpolatorTest"
  classesB4: "org.eclipse.tycho.core.maven.TychoInterpolatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.eclipse.tycho.core.osgitools.BuildPropertiesParserImplTest"
  classesB4: "org.eclipse.tycho.core.osgitools.BuildPropertiesParserImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.eclipse.tycho.core.resolver.DefaultTychoResolverTest"
  classesB4: "org.eclipse.tycho.core.resolver.DefaultTychoResolverTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.eclipse.tycho.surefire.TestMojoToolchainTests"
  classesB4: "org.eclipse.tycho.surefire.TestMojoToolchainTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "tycho"
commit: "tycho"
tooBig: false

refactorings {
  classesAftr: "com.github.jzhongming.mytools.utils.CompressUtil"
  classesB4: "com.github.jzhongming.mytools.utils.CompressUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "com.github.jzhongming.mytools.utils.CompressUtil"
    classAftr: "com.github.jzhongming.mytools.utils.CompressUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.github.jzhongming.mytools.utils.CompressUtil"
  classesB4: "com.github.jzhongming.mytools.utils.CompressUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "mytools"
commit: "mytools"
tooBig: false

refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonElement"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "json"
    nameaftr: "json"
    classb4: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
    classAftr: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonPrimitive"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "p"
    nameaftr: "val"
    classb4: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
    classAftr: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.MetaTemplate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonArray"
      }
    }
    dtAftr {
      simpleType {
        name: "ArrayNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "array"
    nameaftr: "array"
    classb4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
    classAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonArray"
      }
    }
    dtAftr {
      simpleType {
        name: "ArrayNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "array"
    nameaftr: "array"
    classb4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
    classAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonElement"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "serialize"
    nameaftr: "serialize"
    classb4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
    classAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  classesB4: "com.tinkerpop.rexster.protocol.serializer.json.templates.RexProMessageTemplate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "JsonPrimitive"
    }
  }
  aftr {
    simpleType {
      name: "org.codehaus.jackson.JsonNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "JsonPrimitive"
            }
          }
          aftr {
            simpleType {
              name: "org.codehaus.jackson.JsonNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "JsonPrimitive"
            to: "org.codehaus.jackson.JsonNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "JsonPrimitive"
      }
    }
    aftr {
      simpleType {
        name: "org.codehaus.jackson.JsonNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "JsonPrimitive"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.codehaus.jackson.JsonNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "JsonPrimitive"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "JsonArray"
    }
  }
  aftr {
    simpleType {
      name: "org.codehaus.jackson.node.ArrayNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "JsonArray"
            }
          }
          aftr {
            simpleType {
              name: "org.codehaus.jackson.node.ArrayNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "JsonArray"
            to: "org.codehaus.jackson.node.ArrayNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "JsonArray"
      }
    }
    aftr {
      simpleType {
        name: "org.codehaus.jackson.node.ArrayNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "JsonArray"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.codehaus.jackson.node.ArrayNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "JsonArray"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "JsonElement"
    }
  }
  aftr {
    simpleType {
      name: "org.codehaus.jackson.JsonNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "JsonElement"
            }
          }
          aftr {
            simpleType {
              name: "org.codehaus.jackson.JsonNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "JsonElement"
            to: "org.codehaus.jackson.JsonNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "JsonElement"
      }
    }
    aftr {
      simpleType {
        name: "org.codehaus.jackson.JsonNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "JsonElement"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.codehaus.jackson.JsonNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "JsonElement"
      }
    }
  }
}
project: "rexster"
commit: "rexster"
tooBig: false

refactorings {
  classesAftr: "edu.unc.lib.dl.ui.controller.LorisContentController"
  classesB4: "edu.unc.lib.dl.ui.controller.LorisContentController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.FedoraContentService"
  classesB4: "edu.unc.lib.dl.ui.service.FedoraContentService"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.ui.service.FedoraContentService"
    classAftr: "edu.unc.lib.dl.ui.service.FedoraContentService"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.FedoraContentService"
  classesB4: "edu.unc.lib.dl.ui.service.FedoraContentService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  classesB4: "edu.unc.lib.dl.ui.service.LorisContentService"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  classesB4: "edu.unc.lib.dl.ui.service.LorisContentService"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.ui.service.LorisContentService"
    classAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  classesB4: "edu.unc.lib.dl.ui.service.LorisContentService"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  classesB4: "edu.unc.lib.dl.ui.service.LorisContentService"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.ui.service.LorisContentService"
    classAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.LorisContentService"
  classesB4: "edu.unc.lib.dl.ui.service.LorisContentService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  classesB4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "MultiThreadedHttpConnectionManager"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpClientConnectionManager"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpManager"
    nameaftr: "httpManager"
    classb4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
    classAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  classesB4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
    classAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  classesB4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.AnalyticsUserData"
  classesB4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.AnalyticsUserData"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.EventTrackerRunnable"
  classesB4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.EventTrackerRunnable"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.EventTrackerRunnable"
    classAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.EventTrackerRunnable"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.EventTrackerRunnable"
  classesB4: "edu.unc.lib.dl.ui.util.AnalyticsTrackerUtil.EventTrackerRunnable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.FileIOUtil"
  classesB4: "edu.unc.lib.dl.ui.util.FileIOUtil"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.FileIOUtil"
  classesB4: "edu.unc.lib.dl.ui.util.FileIOUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethodBase"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "resp"
    classb4: "edu.unc.lib.dl.ui.util.FileIOUtil"
    classAftr: "edu.unc.lib.dl.ui.util.FileIOUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.util.FileIOUtil"
  classesB4: "edu.unc.lib.dl.ui.util.FileIOUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.ui.service.XMLRetrievalService"
  classesB4: "edu.unc.lib.dl.ui.service.XMLRetrievalService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  classesB4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  classesB4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
    classAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  classesB4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
    classAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  classesB4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  typeChange {
    dtB4 {
      simpleType {
        name: "StringRequestEntity"
      }
    }
    dtAftr {
      simpleType {
        name: "StringEntity"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "requestEntity"
    nameaftr: "requestEntity"
    classb4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
    classAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  classesB4: "edu.unc.lib.dl.admin.controller.AbstractSwordController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AccessControlController"
  classesB4: "edu.unc.lib.dl.admin.controller.AccessControlController"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AccessControlController"
  classesB4: "edu.unc.lib.dl.admin.controller.AccessControlController"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.admin.controller.AccessControlController"
    classAftr: "edu.unc.lib.dl.admin.controller.AccessControlController"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AccessControlController"
  classesB4: "edu.unc.lib.dl.admin.controller.AccessControlController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.AccessControlController.RoleGrant"
  classesB4: "edu.unc.lib.dl.admin.controller.AccessControlController.RoleGrant"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.IngestController"
  classesB4: "edu.unc.lib.dl.admin.controller.IngestController"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.IngestController"
  classesB4: "edu.unc.lib.dl.admin.controller.IngestController"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.admin.controller.IngestController"
    classAftr: "edu.unc.lib.dl.admin.controller.IngestController"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.IngestController"
  classesB4: "edu.unc.lib.dl.admin.controller.IngestController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.MODSController"
  classesB4: "edu.unc.lib.dl.admin.controller.MODSController"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.MODSController"
  classesB4: "edu.unc.lib.dl.admin.controller.MODSController"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.admin.controller.MODSController"
    classAftr: "edu.unc.lib.dl.admin.controller.MODSController"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.admin.controller.MODSController"
  classesB4: "edu.unc.lib.dl.admin.controller.MODSController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.AccessClient"
  classesB4: "edu.unc.lib.dl.fedora.AccessClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "CommonsHttpMessageSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpComponentsMessageSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "messageSender"
    nameaftr: "sender"
    classb4: "edu.unc.lib.dl.fedora.AccessClient"
    classAftr: "edu.unc.lib.dl.fedora.AccessClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.AccessClient"
  classesB4: "edu.unc.lib.dl.fedora.AccessClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.AccessClient"
  classesB4: "edu.unc.lib.dl.fedora.AccessClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.AccessClient"
  classesB4: "edu.unc.lib.dl.fedora.AccessClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  classesB4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
    classAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  classesB4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
    classAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  classesB4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  classesB4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  typeChange {
    dtB4 {
      simpleType {
        name: "MultiThreadedHttpConnectionManager"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpClientConnectionManager"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "multiThreadedHttpConnectionManager"
    nameaftr: "httpConnectionManager"
    classb4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
    classAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  classesB4: "edu.unc.lib.dl.fedora.FedoraAccessControlService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "MultiThreadedHttpConnectionManager"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpClientConnectionManager"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpManager"
    nameaftr: "httpManager"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "StringWriter"
      }
    }
    dtAftr {
      simpleType {
        name: "String"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sw"
    nameaftr: "responseString"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "CommonsHttpMessageSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpComponentsMessageSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "messageSender"
    nameaftr: "sender"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "get"
    nameaftr: "httpResp"
    classb4: "edu.unc.lib.dl.fedora.ManagementClient"
    classAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.fedora.ManagementClient"
  classesB4: "edu.unc.lib.dl.fedora.ManagementClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  classesB4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
    classAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  classesB4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
    classAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  classesB4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "MultiThreadedHttpConnectionManager"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpClientConnectionManager"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "multiThreadedHttpConnectionManager"
    nameaftr: "multiThreadedHttpConnectionManager"
    classb4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
    classAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  classesB4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
    classAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  classesB4: "edu.unc.lib.dl.util.TripleStoreQueryServiceMulgaraImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.ConnectionInterruptedHttpMethodRetryHandler"
  classesB4: "edu.unc.lib.dl.httpclient.ConnectionInterruptedHttpMethodRetryHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAuthenticatedClient"
    nameaftr: "getAuthenticatedClient"
    classb4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
    classAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpClientBuilder"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAuthenticatedClient"
    nameaftr: "getAuthenticatedClientBuilder"
    classb4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
    classAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CredentialsProvider"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "credsProvider"
    classb4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
    classAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.httpclient.HttpClientUtilTest"
  classesB4: "edu.unc.lib.dl.httpclient.HttpClientUtilTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.services.DigitalObjectManagerImpl"
  classesB4: "edu.unc.lib.dl.services.DigitalObjectManagerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  classesB4: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "CommonsHttpConnection"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpComponentsConnection"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "connection"
    nameaftr: "connection"
    classb4: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
    classAftr: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  classesB4: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "postMethod"
    nameaftr: "postMethod"
    classb4: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
    classAftr: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  classesB4: "edu.unc.lib.dl.acl.filter.GroupsToHttpHeaderInterceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "GetMethod"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.CloseableHttpResponse"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "GetMethod"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.CloseableHttpResponse"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "GetMethod"
            to: "org.apache.http.client.methods.CloseableHttpResponse"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "GetMethod"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.CloseableHttpResponse"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "GetMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.CloseableHttpResponse"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "GetMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.conn.HttpClientConnectionManager"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.conn.HttpClientConnectionManager"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
            to: "org.apache.http.conn.HttpClientConnectionManager"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.conn.HttpClientConnectionManager"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.http.conn.HttpClientConnectionManager"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "Log"
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "Log"
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "Log"
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "Log"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "Log"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "CommonsHttpMessageSender"
    }
  }
  aftr {
    simpleType {
      name: "org.springframework.ws.transport.http.HttpComponentsMessageSender"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "CommonsHttpMessageSender"
            }
          }
          aftr {
            simpleType {
              name: "org.springframework.ws.transport.http.HttpComponentsMessageSender"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "CommonsHttpMessageSender"
            to: "org.springframework.ws.transport.http.HttpComponentsMessageSender"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "CommonsHttpMessageSender"
      }
    }
    aftr {
      simpleType {
        name: "org.springframework.ws.transport.http.HttpComponentsMessageSender"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "CommonsHttpMessageSender"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.springframework.ws.transport.http.HttpComponentsMessageSender"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "CommonsHttpMessageSender"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpClient"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.CredentialsProvider"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpClient"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.CredentialsProvider"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpClient"
            to: "org.apache.http.client.CredentialsProvider"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpClient"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.CredentialsProvider"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpClient"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.CredentialsProvider"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpClient"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "StringWriter"
    }
  }
  aftr {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "StringWriter"
            }
          }
          aftr {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          chng {
            from: "StringWriter"
            to: "java.lang.String"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "StringWriter"
      }
    }
    aftr {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "StringWriter"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "StringWriter"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpClient"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.HttpClientBuilder"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpClient"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.HttpClientBuilder"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "HttpClient"
            to: "org.apache.http.impl.client.HttpClientBuilder"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpClient"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.HttpClientBuilder"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpClient"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.HttpClientBuilder"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpClient"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.CloseableHttpClient"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.CloseableHttpClient"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.CloseableHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.CloseableHttpClient"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.CloseableHttpClient"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethodBase"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.CloseableHttpResponse"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethodBase"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.CloseableHttpResponse"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethodBase"
            to: "org.apache.http.client.methods.CloseableHttpResponse"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethodBase"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.CloseableHttpResponse"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethodBase"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.CloseableHttpResponse"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethodBase"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "CommonsHttpConnection"
    }
  }
  aftr {
    simpleType {
      name: "org.springframework.ws.transport.http.HttpComponentsConnection"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "CommonsHttpConnection"
            }
          }
          aftr {
            simpleType {
              name: "org.springframework.ws.transport.http.HttpComponentsConnection"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "CommonsHttpConnection"
            to: "org.springframework.ws.transport.http.HttpComponentsConnection"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "CommonsHttpConnection"
      }
    }
    aftr {
      simpleType {
        name: "org.springframework.ws.transport.http.HttpComponentsConnection"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "CommonsHttpConnection"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.springframework.ws.transport.http.HttpComponentsConnection"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "CommonsHttpConnection"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "StringRequestEntity"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.entity.StringEntity"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "StringRequestEntity"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.entity.StringEntity"
              typeOfType: Jdk
            }
          }
          chng {
            from: "StringRequestEntity"
            to: "org.apache.http.entity.StringEntity"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "StringRequestEntity"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.entity.StringEntity"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "StringRequestEntity"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.entity.StringEntity"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "StringRequestEntity"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "PutMethod"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPut"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "PutMethod"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPut"
              typeOfType: Jdk
            }
          }
          chng {
            from: "PutMethod"
            to: "org.apache.http.client.methods.HttpPut"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "PutMethod"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPut"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PutMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPut"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "PutMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "Carolina-Digital-Repository"
commit: "Carolina-Digital-Repository"
tooBig: false

refactorings {
  classesAftr: "org.jboss.logging.processor.generated.AbstractLoggerTest"
  classesB4: "org.jboss.logging.processor.generated.AbstractLoggerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.ExpressionMessagesTest"
  classesB4: "org.jboss.logging.processor.generated.ExpressionMessagesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.GeneratedSourceAnalysisTest"
  classesB4: "org.jboss.logging.processor.generated.GeneratedSourceAnalysisTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.LevelIdCheckTest"
  classesB4: "org.jboss.logging.processor.generated.LevelIdCheckTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.LogOnceTest"
  classesB4: "org.jboss.logging.processor.generated.LogOnceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.LoggerVerificationTest"
  classesB4: "org.jboss.logging.processor.generated.LoggerVerificationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.MessagesTest"
  classesB4: "org.jboss.logging.processor.generated.MessagesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.ThrowableSignatureTest"
  classesB4: "org.jboss.logging.processor.generated.ThrowableSignatureTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.generated.TransformTest"
  classesB4: "org.jboss.logging.processor.generated.TransformTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.report.ReportGenerationTest"
  classesB4: "org.jboss.logging.processor.report.ReportGenerationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.util.VersionComparatorTest"
  classesB4: "org.jboss.logging.processor.util.VersionComparatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.validation.MessageFormatValidatorTest"
  classesB4: "org.jboss.logging.processor.validation.MessageFormatValidatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.logging.processor.validation.StringFormatValidatorTest"
  classesB4: "org.jboss.logging.processor.validation.StringFormatValidatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "jboss-logging-tools"
commit: "jboss-logging-tools"
tooBig: false

refactorings {
  classesAftr: "com.orientechnologies.orient.object.CustomDatatypeTest"
  classesB4: "com.orientechnologies.orient.object.CustomDatatypeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.CustomDatatypeTest.WrappedString"
  classesB4: "com.orientechnologies.orient.object.CustomDatatypeTest.WrappedString"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.CustomDatatypeTest.Entity"
  classesB4: "com.orientechnologies.orient.object.CustomDatatypeTest.Entity"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.OObjectLazyListTest"
  classesB4: "com.orientechnologies.orient.object.db.OObjectLazyListTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.OObjectLazyListTest.EntityObjectWithList"
  classesB4: "com.orientechnologies.orient.object.db.OObjectLazyListTest.EntityObjectWithList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.OObjectLazyListTest.EntityObject"
  classesB4: "com.orientechnologies.orient.object.db.OObjectLazyListTest.EntityObject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.OObjectLazyMapTest"
  classesB4: "com.orientechnologies.orient.object.db.OObjectLazyMapTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.OObjectLazyMapTest.EntityWithMap"
  classesB4: "com.orientechnologies.orient.object.db.OObjectLazyMapTest.EntityWithMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.OPersistentEmbeddedMapTest"
  classesB4: "com.orientechnologies.orient.object.db.OPersistentEmbeddedMapTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.db.ObjectExportImportTest"
  classesB4: "com.orientechnologies.orient.object.db.ObjectExportImportTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OObjectEntitySerializerTest"
  classesB4: "com.orientechnologies.orient.object.enhancement.OObjectEntitySerializerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OObjectProxyMethodHandlerTest"
  classesB4: "com.orientechnologies.orient.object.enhancement.OObjectProxyMethodHandlerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OObjectProxyMethodHandlerTest.EntityWithDifferentFieldTypes"
  classesB4: "com.orientechnologies.orient.object.enhancement.OObjectProxyMethodHandlerTest.EntityWithDifferentFieldTypes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OObjectProxyMethodHandlerTest.EntityWithEmbeddedFields"
  classesB4: "com.orientechnologies.orient.object.enhancement.OObjectProxyMethodHandlerTest.EntityWithEmbeddedFields"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest"
  classesB4: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityStringVersion"
  classesB4: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityStringVersion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityObjectVersion"
  classesB4: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityObjectVersion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityExactVersionType"
  classesB4: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityExactVersionType"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityLongVersion"
  classesB4: "com.orientechnologies.orient.object.enhancement.OVersionSerializationTest.EntityLongVersion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enhancement.TestObjectWithDeletedLink"
  classesB4: "com.orientechnologies.orient.object.enhancement.TestObjectWithDeletedLink"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enumerations.OObjectEnumLazyListTest"
  classesB4: "com.orientechnologies.orient.object.enumerations.OObjectEnumLazyListTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.enumerations.OObjectEnumLazyListTest.EntityWithEnumList"
  classesB4: "com.orientechnologies.orient.object.enumerations.OObjectEnumLazyListTest.EntityWithEnumList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.jpa.parsing.PersistenceXMLParsingTest"
  classesB4: "com.orientechnologies.orient.object.jpa.parsing.PersistenceXMLParsingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.orientechnologies.orient.object.jpa.parsing.PersistenceXMLParsingTest.Rule"
  classesB4: "com.orientechnologies.orient.object.jpa.parsing.PersistenceXMLParsingTest.Rule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "orientdb"
commit: "orientdb"
tooBig: false

refactorings {
  classesAftr: "org.danbrough.mega.ApiRequest"
  classesB4: "org.danbrough.mega.ApiRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "requestData"
    nameaftr: "requestData"
    classb4: "org.danbrough.mega.ApiRequest"
    classAftr: "org.danbrough.mega.ApiRequest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.ApiRequest"
  classesB4: "org.danbrough.mega.ApiRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getRequestData"
    nameaftr: "getRequestData"
    classb4: "org.danbrough.mega.ApiRequest"
    classAftr: "org.danbrough.mega.ApiRequest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.ApiRequest"
  classesB4: "org.danbrough.mega.ApiRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.Callback"
  classesB4: "org.danbrough.mega.Callback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.CheckQuotaRequest"
  classesB4: "org.danbrough.mega.CheckQuotaRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "job"
    nameaftr: "job"
    classb4: "org.danbrough.mega.CheckQuotaRequest"
    classAftr: "org.danbrough.mega.CheckQuotaRequest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.CheckQuotaRequest"
  classesB4: "org.danbrough.mega.CheckQuotaRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.Crypto"
  classesB4: "org.danbrough.mega.Crypto"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.GetFilesRequest"
  classesB4: "org.danbrough.mega.GetFilesRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "o"
    nameaftr: "o"
    classb4: "org.danbrough.mega.GetFilesRequest"
    classAftr: "org.danbrough.mega.GetFilesRequest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.GetFilesRequest"
  classesB4: "org.danbrough.mega.GetFilesRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.GetUserRequest"
  classesB4: "org.danbrough.mega.GetUserRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.LoginRequest"
  classesB4: "org.danbrough.mega.LoginRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.danbrough.mega.LoginRequest"
    classAftr: "org.danbrough.mega.LoginRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.LoginRequest"
  classesB4: "org.danbrough.mega.LoginRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.MegaAPI"
  classesB4: "org.danbrough.mega.MegaAPI"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "ok"
    nameaftr: "ok"
    classb4: "org.danbrough.mega.MegaAPI"
    classAftr: "org.danbrough.mega.MegaAPI"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.MegaAPI"
  classesB4: "org.danbrough.mega.MegaAPI"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "s"
    nameaftr: "s"
    classb4: "org.danbrough.mega.MegaAPI"
    classAftr: "org.danbrough.mega.MegaAPI"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.MegaAPI"
  classesB4: "org.danbrough.mega.MegaAPI"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "o"
    nameaftr: "o"
    classb4: "org.danbrough.mega.MegaAPI"
    classAftr: "org.danbrough.mega.MegaAPI"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.MegaAPI"
  classesB4: "org.danbrough.mega.MegaAPI"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.MegaFile"
  classesB4: "org.danbrough.mega.MegaFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.Transport"
  classesB4: "org.danbrough.mega.Transport"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.danbrough.mega.UserContext"
  classesB4: "org.danbrough.mega.UserContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "toJSON"
    nameaftr: "toJSON"
    classb4: "org.danbrough.mega.UserContext"
    classAftr: "org.danbrough.mega.UserContext"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.danbrough.mega.UserContext"
  classesB4: "org.danbrough.mega.UserContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.JSONArray"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonArray"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.JSONArray"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonArray"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.JSONArray"
            to: "com.google.gson.JsonArray"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.JSONArray"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonArray"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.JSONArray"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonArray"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.JSONArray"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.JSONObject"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.JSONObject"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonObject"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.JSONObject"
            to: "com.google.gson.JsonObject"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.JSONObject"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.JSONObject"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.JSONObject"
        typeOfType: DontKnow
      }
    }
  }
}
project: "java_mega_api"
commit: "java_mega_api"
tooBig: false

refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.data.MyService"
  classesB4: "com.googlecode.gwt.test.csv.data.MyService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.internal.DirectoryTestReaderTest"
  classesB4: "com.googlecode.gwt.test.csv.internal.DirectoryTestReaderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest"
  classesB4: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest.A"
  classesB4: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest.A"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest.SimiliWidget"
  classesB4: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest.SimiliWidget"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest.SimiliWidgetContainer"
  classesB4: "com.googlecode.gwt.test.csv.runner.CsvRunnerTest.SimiliWidgetContainer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.csv.runner.XPathTest"
  classesB4: "com.googlecode.gwt.test.csv.runner.XPathTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.gwtbootstrap.PatcherTest"
  classesB4: "com.googlecode.gwt.test.gwtbootstrap.PatcherTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gxt.test.WindowTest"
  classesB4: "com.googlecode.gxt.test.WindowTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.html.ObjectFactory"
  classesB4: "com.googlecode.html.ObjectFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.html.ObjectFactory.ConfigurationError"
  classesB4: "com.googlecode.html.ObjectFactory.ConfigurationError"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.AnchorTest"
  classesB4: "com.googlecode.gwt.test.AnchorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.ArrayUtilTest"
  classesB4: "com.googlecode.gwt.test.ArrayUtilTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.BrowserTest"
  classesB4: "com.googlecode.gwt.test.BrowserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.ButtonTest"
  classesB4: "com.googlecode.gwt.test.ButtonTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CellListTest"
  classesB4: "com.googlecode.gwt.test.CellListTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CellTableTest"
  classesB4: "com.googlecode.gwt.test.CellTableTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CellTableTest.Contact"
  classesB4: "com.googlecode.gwt.test.CellTableTest.Contact"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CheckBoxTest"
  classesB4: "com.googlecode.gwt.test.CheckBoxTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.ComplexPanelTest"
  classesB4: "com.googlecode.gwt.test.ComplexPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CompositeTest"
  classesB4: "com.googlecode.gwt.test.CompositeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CompositeTest.MyComposite"
  classesB4: "com.googlecode.gwt.test.CompositeTest.MyComposite"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CompositeWithMockitoTest"
  classesB4: "com.googlecode.gwt.test.CompositeWithMockitoTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CompositeWithMockitoTest.MyComposite"
  classesB4: "com.googlecode.gwt.test.CompositeWithMockitoTest.MyComposite"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CookiesTest"
  classesB4: "com.googlecode.gwt.test.CookiesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest"
  classesB4: "com.googlecode.gwt.test.CustomEventTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest.ItemAddedEvent"
  classesB4: "com.googlecode.gwt.test.CustomEventTest.ItemAddedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest.ItemAddedHandler"
  classesB4: "com.googlecode.gwt.test.CustomEventTest.ItemAddedHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest.ItemRemovedEvent"
  classesB4: "com.googlecode.gwt.test.CustomEventTest.ItemRemovedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest.ItemRemovedHandler"
  classesB4: "com.googlecode.gwt.test.CustomEventTest.ItemRemovedHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest.ListItem"
  classesB4: "com.googlecode.gwt.test.CustomEventTest.ListItem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.CustomEventTest.ListModel"
  classesB4: "com.googlecode.gwt.test.CustomEventTest.ListModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DataGridTest"
  classesB4: "com.googlecode.gwt.test.DataGridTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DataGridTest.Contact"
  classesB4: "com.googlecode.gwt.test.DataGridTest.Contact"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DebugIdDisabledTest"
  classesB4: "com.googlecode.gwt.test.DebugIdDisabledTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DebugIdEnabledTest"
  classesB4: "com.googlecode.gwt.test.DebugIdEnabledTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DictionaryTest"
  classesB4: "com.googlecode.gwt.test.DictionaryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DisclosurePanelTest"
  classesB4: "com.googlecode.gwt.test.DisclosurePanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DocumentTest"
  classesB4: "com.googlecode.gwt.test.DocumentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.DurationTest"
  classesB4: "com.googlecode.gwt.test.DurationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.FlexTableTest"
  classesB4: "com.googlecode.gwt.test.FlexTableTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.FocusImplTest"
  classesB4: "com.googlecode.gwt.test.FocusImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.FocusPanelTest"
  classesB4: "com.googlecode.gwt.test.FocusPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.FormPanelTest"
  classesB4: "com.googlecode.gwt.test.FormPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.FrameTest"
  classesB4: "com.googlecode.gwt.test.FrameTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.GridTest"
  classesB4: "com.googlecode.gwt.test.GridTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.GwtLogTest"
  classesB4: "com.googlecode.gwt.test.GwtLogTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.GwtRpcWithEasyMockTest"
  classesB4: "com.googlecode.gwt.test.GwtRpcWithEasyMockTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.GwtRpcWithEasyMockTest.MyGwtClass"
  classesB4: "com.googlecode.gwt.test.GwtRpcWithEasyMockTest.MyGwtClass"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.GwtRpcWithMockitoTest"
  classesB4: "com.googlecode.gwt.test.GwtRpcWithMockitoTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.GwtRpcWithMockitoTest.MyGwtClass"
  classesB4: "com.googlecode.gwt.test.GwtRpcWithMockitoTest.MyGwtClass"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.HTMLPanelTest"
  classesB4: "com.googlecode.gwt.test.HTMLPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.HTMLTest"
  classesB4: "com.googlecode.gwt.test.HTMLTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.HistoryTest"
  classesB4: "com.googlecode.gwt.test.HistoryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.HistoryTest.MockHistoryListener"
  classesB4: "com.googlecode.gwt.test.HistoryTest.MockHistoryListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.HtmlBuilderTest"
  classesB4: "com.googlecode.gwt.test.HtmlBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.HyperlinkTest"
  classesB4: "com.googlecode.gwt.test.HyperlinkTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.ImageTest"
  classesB4: "com.googlecode.gwt.test.ImageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.LabelTest"
  classesB4: "com.googlecode.gwt.test.LabelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.LayoutPanelTest"
  classesB4: "com.googlecode.gwt.test.LayoutPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.ListBoxTest"
  classesB4: "com.googlecode.gwt.test.ListBoxTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.MainGwtTest"
  classesB4: "com.googlecode.gwt.test.MainGwtTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.MenuBarImagesTest"
  classesB4: "com.googlecode.gwt.test.MenuBarImagesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.MenuBarTest"
  classesB4: "com.googlecode.gwt.test.MenuBarTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.MockitoGwtTest"
  classesB4: "com.googlecode.gwt.test.MockitoGwtTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.MockitoGwtTest.MyBean"
  classesB4: "com.googlecode.gwt.test.MockitoGwtTest.MyBean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.NavigatorTest"
  classesB4: "com.googlecode.gwt.test.NavigatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.PasswordTextBoxTest"
  classesB4: "com.googlecode.gwt.test.PasswordTextBoxTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.PopupPanelTest"
  classesB4: "com.googlecode.gwt.test.PopupPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.PushButtonTest"
  classesB4: "com.googlecode.gwt.test.PushButtonTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.RadioButtonTest"
  classesB4: "com.googlecode.gwt.test.RadioButtonTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.RootPanelTest"
  classesB4: "com.googlecode.gwt.test.RootPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.SchedulerTest"
  classesB4: "com.googlecode.gwt.test.SchedulerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.SimplePagerTest"
  classesB4: "com.googlecode.gwt.test.SimplePagerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.SimplePanelTest"
  classesB4: "com.googlecode.gwt.test.SimplePanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.StackPanelTest"
  classesB4: "com.googlecode.gwt.test.StackPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.StorageTest"
  classesB4: "com.googlecode.gwt.test.StorageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.StyleInjectorTest"
  classesB4: "com.googlecode.gwt.test.StyleInjectorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.TabPanelTest"
  classesB4: "com.googlecode.gwt.test.TabPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.TextAreaTest"
  classesB4: "com.googlecode.gwt.test.TextAreaTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.TextBoxTest"
  classesB4: "com.googlecode.gwt.test.TextBoxTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.TimerTest"
  classesB4: "com.googlecode.gwt.test.TimerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.ToggleButtonTest"
  classesB4: "com.googlecode.gwt.test.ToggleButtonTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.TreeTest"
  classesB4: "com.googlecode.gwt.test.TreeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.URLTest"
  classesB4: "com.googlecode.gwt.test.URLTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.WidgetUtilsTest"
  classesB4: "com.googlecode.gwt.test.WidgetUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.WindowLocationDefaultTest"
  classesB4: "com.googlecode.gwt.test.WindowLocationDefaultTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.WindowLocationTest"
  classesB4: "com.googlecode.gwt.test.WindowLocationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.WindowTest"
  classesB4: "com.googlecode.gwt.test.WindowTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.assertions.GwtInstanceTest"
  classesB4: "com.googlecode.gwt.test.assertions.GwtInstanceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.assertions.WidgetAssertTest"
  classesB4: "com.googlecode.gwt.test.assertions.WidgetAssertTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.autobean.AutoBeanCodexTest"
  classesB4: "com.googlecode.gwt.test.autobean.AutoBeanCodexTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.autobean.AutoBeanFactoryTest"
  classesB4: "com.googlecode.gwt.test.autobean.AutoBeanFactoryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.autobean.AutoBeanFactoryTest.PersonImpl"
  classesB4: "com.googlecode.gwt.test.autobean.AutoBeanFactoryTest.PersonImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.deferred.CustomDeferredBindingTest"
  classesB4: "com.googlecode.gwt.test.deferred.CustomDeferredBindingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.AnchorElementTest"
  classesB4: "com.googlecode.gwt.test.dom.AnchorElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.AreaElementTest"
  classesB4: "com.googlecode.gwt.test.dom.AreaElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.BRElementTest"
  classesB4: "com.googlecode.gwt.test.dom.BRElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.BaseElementTest"
  classesB4: "com.googlecode.gwt.test.dom.BaseElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.BodyElementTest"
  classesB4: "com.googlecode.gwt.test.dom.BodyElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.DOMTest"
  classesB4: "com.googlecode.gwt.test.dom.DOMTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.DocumentTest"
  classesB4: "com.googlecode.gwt.test.dom.DocumentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.ElementTest"
  classesB4: "com.googlecode.gwt.test.dom.ElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.JsArrayTest"
  classesB4: "com.googlecode.gwt.test.dom.JsArrayTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.MockingOverlayInnerTypeTest"
  classesB4: "com.googlecode.gwt.test.dom.MockingOverlayInnerTypeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.NodeTest"
  classesB4: "com.googlecode.gwt.test.dom.NodeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.StyleTest"
  classesB4: "com.googlecode.gwt.test.dom.StyleTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.TableElementTest"
  classesB4: "com.googlecode.gwt.test.dom.TableElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.TableRowElementTest"
  classesB4: "com.googlecode.gwt.test.dom.TableRowElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.dom.TextTest"
  classesB4: "com.googlecode.gwt.test.dom.TextTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.editors.AddressEditorTest"
  classesB4: "com.googlecode.gwt.test.editors.AddressEditorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.editors.PersonEditorTest"
  classesB4: "com.googlecode.gwt.test.editors.PersonEditorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.gin.GInjectorCreateHandlerTest"
  classesB4: "com.googlecode.gwt.test.gin.GInjectorCreateHandlerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.guava.GuavaCollectionsTest"
  classesB4: "com.googlecode.gwt.test.guava.GuavaCollectionsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.i18n.MyChildChildConstantsTest"
  classesB4: "com.googlecode.gwt.test.i18n.MyChildChildConstantsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.i18n.MyChildConstantsTest"
  classesB4: "com.googlecode.gwt.test.i18n.MyChildConstantsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.i18n.MyConstantsTest"
  classesB4: "com.googlecode.gwt.test.i18n.MyConstantsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.i18n.MyConstantsWithLookupTest"
  classesB4: "com.googlecode.gwt.test.i18n.MyConstantsWithLookupTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.i18n.MyMessagesTest"
  classesB4: "com.googlecode.gwt.test.i18n.MyMessagesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.i18n.NumberFormatTest"
  classesB4: "com.googlecode.gwt.test.i18n.NumberFormatTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.internal.AutomaticPatcherTest"
  classesB4: "com.googlecode.gwt.test.internal.AutomaticPatcherTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.internal.utils.GwtHtmlParserTest"
  classesB4: "com.googlecode.gwt.test.internal.utils.GwtHtmlParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.internal.utils.GwtTestStringUtilsTest"
  classesB4: "com.googlecode.gwt.test.internal.utils.GwtTestStringUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.JsArrayBooleanTest"
  classesB4: "com.googlecode.gwt.test.jso.JsArrayBooleanTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.JsArrayIntegerTest"
  classesB4: "com.googlecode.gwt.test.jso.JsArrayIntegerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.JsArrayMixedTest"
  classesB4: "com.googlecode.gwt.test.jso.JsArrayMixedTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.JsArrayNumberTest"
  classesB4: "com.googlecode.gwt.test.jso.JsArrayNumberTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.JsArrayStringTest"
  classesB4: "com.googlecode.gwt.test.jso.JsArrayStringTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.JsArrayTest"
  classesB4: "com.googlecode.gwt.test.jso.JsArrayTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jso.SimpleJSTest"
  classesB4: "com.googlecode.gwt.test.jso.SimpleJSTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.json.JSONArrayTest"
  classesB4: "com.googlecode.gwt.test.json.JSONArrayTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.json.JSONObjectTest"
  classesB4: "com.googlecode.gwt.test.json.JSONObjectTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.json.JsonUtilsTest"
  classesB4: "com.googlecode.gwt.test.json.JsonUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jukito.JukitoGwtTestRunnerTest"
  classesB4: "com.googlecode.gwt.test.jukito.JukitoGwtTestRunnerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.jukito.JukitoGwtTestRunnerTest.Module"
  classesB4: "com.googlecode.gwt.test.jukito.JukitoGwtTestRunnerTest.Module"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.junit.JUnitParamsGwtTest"
  classesB4: "com.googlecode.gwt.test.junit.JUnitParamsGwtTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.resources.ClientBundleTest"
  classesB4: "com.googlecode.gwt.test.resources.ClientBundleTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.resources.override.MyOverridedClientBundleTest"
  classesB4: "com.googlecode.gwt.test.resources.override.MyOverridedClientBundleTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.rpc.RemoteServiceTest"
  classesB4: "com.googlecode.gwt.test.rpc.RemoteServiceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.spring.SimpleGwtSpringTest"
  classesB4: "com.googlecode.gwt.test.spring.SimpleGwtSpringTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.template.SafeHtmlTest"
  classesB4: "com.googlecode.gwt.test.template.SafeHtmlTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderUiTextTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderUiTextTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithCellPanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithCellPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithCellWidgetTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithCellWidgetTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithDisclosurePanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithDisclosurePanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithDockLayoutPanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithDockLayoutPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithDomTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithDomTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithGridTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithGridTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithImportsTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithImportsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithLayoutPanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithLayoutPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithListBoxTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithListBoxTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithMenuBarTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithMenuBarTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithProvidedWidgetsTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithProvidedWidgetsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithSplitLayoutPanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithSplitLayoutPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithStackLayoutPanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithStackLayoutPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithTabLayoutPanelTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithTabLayoutPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithUiChildTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithUiChildTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithUiConstructorTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithUiConstructorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithWidgetsChildTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithWidgetsChildTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.UiBinderWithWidgetsTest"
  classesB4: "com.googlecode.gwt.test.uibinder.UiBinderWithWidgetsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.uibinder.specialization.UiBinderWithUiBinderSpecializationsTest"
  classesB4: "com.googlecode.gwt.test.uibinder.specialization.UiBinderWithUiBinderSpecializationsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.utils.GwtDomUtilsTest"
  classesB4: "com.googlecode.gwt.test.utils.GwtDomUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.utils.GwtReflectionUtilsTest"
  classesB4: "com.googlecode.gwt.test.utils.GwtReflectionUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.utils.GwtReflectionUtilsTest.TestBean"
  classesB4: "com.googlecode.gwt.test.utils.GwtReflectionUtilsTest.TestBean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.xml.XMLDocumentTest"
  classesB4: "com.googlecode.gwt.test.xml.XMLDocumentTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.xml.XMLElementTest"
  classesB4: "com.googlecode.gwt.test.xml.XMLElementTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.googlecode.gwt.test.xml.XMLParserTest"
  classesB4: "com.googlecode.gwt.test.xml.XMLParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "gwt-test-utils"
commit: "gwt-test-utils"
tooBig: false

refactorings {
  classesAftr: "net.fortytwo.linkeddata.LinkedDataCache"
  classesB4: "net.fortytwo.linkeddata.LinkedDataCache"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.LinkedDataCache.DefaultCacheExpirationPolicy"
  classesB4: "net.fortytwo.linkeddata.LinkedDataCache.DefaultCacheExpirationPolicy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.LinkedDataCache.DataStore"
  classesB4: "net.fortytwo.linkeddata.LinkedDataCache.DataStore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
    classAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
    classAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.HttpRepresentationInputStream"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.HttpRepresentationInputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.ErrorResponseException"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.ErrorResponseException"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.ErrorResponseException"
    classAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.ErrorResponseException"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.ErrorResponseException"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.ErrorResponseException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.InvalidResponseException"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.InvalidResponseException"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.InvalidResponseException"
    classAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.InvalidResponseException"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.InvalidResponseException"
  classesB4: "net.fortytwo.linkeddata.dereferencers.HTTPRepresentation.InvalidResponseException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.Ripple"
  classesB4: "net.fortytwo.ripple.Ripple"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.RippleException"
  classesB4: "net.fortytwo.ripple.RippleException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.URIMap"
  classesB4: "net.fortytwo.ripple.URIMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.cli.Interpreter"
  classesB4: "net.fortytwo.ripple.cli.Interpreter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.cli.RippleCommandLine"
  classesB4: "net.fortytwo.ripple.cli.RippleCommandLine"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.cli.RippleCommandLine.UpdateCompletorsCmd"
  classesB4: "net.fortytwo.ripple.cli.RippleCommandLine.UpdateCompletorsCmd"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.control.Scheduler"
  classesB4: "net.fortytwo.ripple.control.Scheduler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.control.Scheduler.TaskItem"
  classesB4: "net.fortytwo.ripple.control.Scheduler.TaskItem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.control.Scheduler.WorkerThread"
  classesB4: "net.fortytwo.ripple.control.Scheduler.WorkerThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.control.Scheduler.WorkerRunnable"
  classesB4: "net.fortytwo.ripple.control.Scheduler.WorkerRunnable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.control.Task"
  classesB4: "net.fortytwo.ripple.control.Task"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.data.ToDouble"
  classesB4: "net.fortytwo.ripple.libs.data.ToDouble"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.data.ToInteger"
  classesB4: "net.fortytwo.ripple.libs.data.ToInteger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.graph.Inlinks"
  classesB4: "net.fortytwo.ripple.libs.graph.Inlinks"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.graph.Links"
  classesB4: "net.fortytwo.ripple.libs.graph.Links"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.graph.Members"
  classesB4: "net.fortytwo.ripple.libs.graph.Members"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.graph.Sparql"
  classesB4: "net.fortytwo.ripple.libs.graph.Sparql"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.stream.ranking.RankingEvaluatorHelper"
  classesB4: "net.fortytwo.ripple.libs.stream.ranking.RankingEvaluatorHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.stream.ranking.RankingEvaluatorHelper.SpecialSink"
  classesB4: "net.fortytwo.ripple.libs.stream.ranking.RankingEvaluatorHelper.SpecialSink"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.system.Get"
  classesB4: "net.fortytwo.ripple.libs.system.Get"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.ripple.libs.system.Get"
    classAftr: "net.fortytwo.ripple.libs.system.Get"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.system.Get"
  classesB4: "net.fortytwo.ripple.libs.system.Get"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.model.impl.sesame.SailConnectionListenerAdapter"
  classesB4: "net.fortytwo.ripple.model.impl.sesame.SailConnectionListenerAdapter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.model.impl.sesame.SesameModel"
  classesB4: "net.fortytwo.ripple.model.impl.sesame.SesameModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.model.impl.sesame.SesameModelConnection"
  classesB4: "net.fortytwo.ripple.model.impl.sesame.SesameModelConnection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.model.impl.sesame.SesameModelConnection.QueryTask"
  classesB4: "net.fortytwo.ripple.model.impl.sesame.SesameModelConnection.QueryTask"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.cli.DatatypeSyntaxTest"
  classesB4: "net.fortytwo.ripple.cli.DatatypeSyntaxTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.math.ExpTest"
  classesB4: "net.fortytwo.ripple.libs.math.ExpTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.math.LogTest"
  classesB4: "net.fortytwo.ripple.libs.math.LogTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.string.SplitTest"
  classesB4: "net.fortytwo.ripple.libs.string.SplitTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.model.impl.sesame.SesameTest"
  classesB4: "net.fortytwo.ripple.model.impl.sesame.SesameTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createGetMethod"
    nameaftr: "createGetMethod"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createPostMethod"
    nameaftr: "createPostMethod"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createRdfGetMethod"
    nameaftr: "createRdfGetMethod"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createSparqlUpdateMethod"
    nameaftr: "createSparqlUpdateMethod"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.flow.rdf.HTTPUtils"
    classAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.flow.rdf.HTTPUtils"
  classesB4: "net.fortytwo.flow.rdf.HTTPUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.media.Play"
  classesB4: "net.fortytwo.ripple.libs.media.Play"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.ripple.libs.media.Play"
    classAftr: "net.fortytwo.ripple.libs.media.Play"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.media.Play"
  classesB4: "net.fortytwo.ripple.libs.media.Play"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.media.Show"
  classesB4: "net.fortytwo.ripple.libs.media.Show"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.media.Show.ImagePanel"
  classesB4: "net.fortytwo.ripple.libs.media.Show.ImagePanel"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "net.fortytwo.ripple.libs.media.Show.ImagePanel"
    classAftr: "net.fortytwo.ripple.libs.media.Show.ImagePanel"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.libs.media.Show.ImagePanel"
  classesB4: "net.fortytwo.ripple.libs.media.Show.ImagePanel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.fortytwo.ripple.scriptengine.RippleScriptEngine"
  classesB4: "net.fortytwo.ripple.scriptengine.RippleScriptEngine"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.HttpRequest"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.HttpRequest"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.HttpRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.HttpRequest"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.HttpRequest"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpUriRequest"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpUriRequest"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpUriRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpUriRequest"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpUriRequest"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "ripple"
commit: "ripple"
tooBig: false

refactorings {
  classesAftr: "com.jajja.jorm.Database"
  classesB4: "com.jajja.jorm.Database"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.jajja.jorm.Database"
    classAftr: "com.jajja.jorm.Database"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.jajja.jorm.Database"
  classesB4: "com.jajja.jorm.Database"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Database.Context"
  classesB4: "com.jajja.jorm.Database.Context"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Database.Configuration"
  classesB4: "com.jajja.jorm.Database.Configuration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record"
  classesB4: "com.jajja.jorm.Record"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Class"
              }
            }
            params {
              wildCrd {
                bound {
                  simpleType {
                    name: "Record"
                  }
                }
                supOrext: "super"
              }
            }
          }
        }
        params {
          simpleType {
            name: "Log"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Class"
              }
            }
            params {
              wildCrd {
                bound {
                  simpleType {
                    name: "Record"
                  }
                }
                supOrext: "super"
              }
            }
          }
        }
        params {
          simpleType {
            name: "Logger"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logs"
    nameaftr: "logs"
    classb4: "com.jajja.jorm.Record"
    classAftr: "com.jajja.jorm.Record"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record"
  classesB4: "com.jajja.jorm.Record"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.jajja.jorm.Record"
    classAftr: "com.jajja.jorm.Record"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record"
  classesB4: "com.jajja.jorm.Record"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.jajja.jorm.Record"
    classAftr: "com.jajja.jorm.Record"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record"
  classesB4: "com.jajja.jorm.Record"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.jajja.jorm.Record"
    classAftr: "com.jajja.jorm.Record"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record"
  classesB4: "com.jajja.jorm.Record"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record.Field"
  classesB4: "com.jajja.jorm.Record.Field"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Record.BatchInfo"
  classesB4: "com.jajja.jorm.Record.BatchInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Transaction"
  classesB4: "com.jajja.jorm.Transaction"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.jajja.jorm.Transaction"
    classAftr: "com.jajja.jorm.Transaction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.jajja.jorm.Transaction"
  classesB4: "com.jajja.jorm.Transaction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.jajja.jorm.Transaction.AnonymousRecord"
  classesB4: "com.jajja.jorm.Transaction.AnonymousRecord"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "psql.Moria"
  classesB4: "psql.Moria"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "java.lang.Class"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "com.jajja.jorm.Record"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
        }
      }
      params {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "java.lang.Class"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "com.jajja.jorm.Record"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
        }
      }
      params {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "org.apache.commons.logging.Log"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "org.slf4j.Logger"
                    typeOfType: DontKnow
                  }
                }
                chng {
                  from: "org.apache.commons.logging.Log"
                  to: "org.slf4j.Logger"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "java.lang.Class"
                typeOfType: Jdk
              }
            }
            params {
              wildCrd {
                bound {
                  simpleType {
                    name: "com.jajja.jorm.Record"
                    typeOfType: Internal
                  }
                }
                supOrext: "super"
              }
            }
          }
        }
        params {
          simpleType {
            name: "org.apache.commons.logging.Log"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "java.lang.Class"
                typeOfType: Jdk
              }
            }
            params {
              wildCrd {
                bound {
                  simpleType {
                    name: "com.jajja.jorm.Record"
                    typeOfType: Internal
                  }
                }
                supOrext: "super"
              }
            }
          }
        }
        params {
          simpleType {
            name: "org.slf4j.Logger"
            typeOfType: DontKnow
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "jorm"
commit: "jorm"
tooBig: false

refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaIText.Conversion"
  classesB4: "org.docx4j.convert.out.pdf.viaIText.Conversion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaIText.Conversion.EndPage"
  classesB4: "org.docx4j.convert.out.pdf.viaIText.Conversion.EndPage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.JcrNodeMapper.AlfrescoJcrNodeMapper"
  classesB4: "org.docx4j.JcrNodeMapper.AlfrescoJcrNodeMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.LoadFromJCR"
  classesB4: "org.docx4j.openpackaging.io.LoadFromJCR"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.SaveToJCR"
  classesB4: "org.docx4j.openpackaging.io.SaveToJCR"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.extras.vfs.LoadFromVFSZipFile"
  classesB4: "org.docx4j.extras.vfs.LoadFromVFSZipFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.extras.vfs.SaveToVFSZipFile"
  classesB4: "org.docx4j.extras.vfs.SaveToVFSZipFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.extras.vfs.VFSDoc"
  classesB4: "org.docx4j.extras.vfs.VFSDoc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.glox4j.openpackaging.packages.GloxPackage"
  classesB4: "org.glox4j.openpackaging.packages.GloxPackage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.glox4j.samples.AddGloxToDocx"
  classesB4: "org.glox4j.samples.AddGloxToDocx"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.glox4j.samples.ExtractGloxFromExemplar"
  classesB4: "org.glox4j.samples.ExtractGloxFromExemplar"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.glox4j.samples.ParseGlox"
  classesB4: "org.glox4j.samples.ParseGlox"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.Docx4jProperties"
  classesB4: "org.docx4j.Docx4jProperties"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.TextUtils"
  classesB4: "org.docx4j.TextUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.TextUtils.TextExtractor"
  classesB4: "org.docx4j.TextUtils.TextExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.TraversalUtil"
  classesB4: "org.docx4j.TraversalUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.TraversalUtil.Callback"
  classesB4: "org.docx4j.TraversalUtil.Callback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.TraversalUtil.CallbackImpl"
  classesB4: "org.docx4j.TraversalUtil.CallbackImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.UnitsOfMeasurement"
  classesB4: "org.docx4j.UnitsOfMeasurement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.XmlUtils"
  classesB4: "org.docx4j.XmlUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.XmlUtils.LoggingErrorListener"
  classesB4: "org.docx4j.XmlUtils.LoggingErrorListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.in.Doc"
  classesB4: "org.docx4j.convert.in.Doc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.in.FlatOpcXmlImporter"
  classesB4: "org.docx4j.convert.in.FlatOpcXmlImporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.in.word2003xml.Word2003XmlConverter"
  classesB4: "org.docx4j.convert.in.word2003xml.Word2003XmlConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.in.xhtml.XHTMLImporter"
  classesB4: "org.docx4j.convert.in.xhtml.XHTMLImporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.in.xhtml.XHTMLImporter.TableProperties"
  classesB4: "org.docx4j.convert.in.xhtml.XHTMLImporter.TableProperties"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.AbstractModelRegistry"
  classesB4: "org.docx4j.convert.out.AbstractModelRegistry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.Converter"
  classesB4: "org.docx4j.convert.out.Converter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.XSLFO.PageNumberHelper"
  classesB4: "org.docx4j.convert.out.XSLFO.PageNumberHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.XSLFO.XSLFOExporterNonXSLT"
  classesB4: "org.docx4j.convert.out.XSLFO.XSLFOExporterNonXSLT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.XSLFO.XSLFOExporterNonXSLT.XSLFOGenerator"
  classesB4: "org.docx4j.convert.out.XSLFO.XSLFOExporterNonXSLT.XSLFOGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.BookmarkMover"
  classesB4: "org.docx4j.convert.out.common.preprocess.BookmarkMover"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.BookmarkMover.BookmarkMoverVisitor"
  classesB4: "org.docx4j.convert.out.common.preprocess.BookmarkMover.BookmarkMoverVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.Containerization"
  classesB4: "org.docx4j.convert.out.common.preprocess.Containerization"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.ConversionSectionWrapperFactory"
  classesB4: "org.docx4j.convert.out.common.preprocess.ConversionSectionWrapperFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.ConversionSectionWrapperFactory.SdtBlockFinder"
  classesB4: "org.docx4j.convert.out.common.preprocess.ConversionSectionWrapperFactory.SdtBlockFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.FieldsCombiner"
  classesB4: "org.docx4j.convert.out.common.preprocess.FieldsCombiner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.FieldsCombiner.CombineVisitor"
  classesB4: "org.docx4j.convert.out.common.preprocess.FieldsCombiner.CombineVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.PageBreak"
  classesB4: "org.docx4j.convert.out.common.preprocess.PageBreak"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.preprocess.PartialDeepCopy"
  classesB4: "org.docx4j.convert.out.common.preprocess.PartialDeepCopy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.FldSimpleWriterHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.FldSimpleWriterHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.FldSimpleNodeWriterHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.FldSimpleNodeWriterHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.FldSimpleStringWriterHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.FldSimpleStringWriterHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.DateHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.DateHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.TimeHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.TimeHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.PrintdateHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.PrintdateHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.DocPropertyHandler"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractFldSimpleWriter.DocPropertyHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractMessageWriter"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractMessageWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractTableWriter"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractTableWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.AbstractTableWriter.TableModelTransformState"
  classesB4: "org.docx4j.convert.out.common.writer.AbstractTableWriter.TableModelTransformState"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.common.writer.HyperlinkUtil"
  classesB4: "org.docx4j.convert.out.common.writer.HyperlinkUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.flatOpcXml.FlatOpcXmlCreator"
  classesB4: "org.docx4j.convert.out.flatOpcXml.FlatOpcXmlCreator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.AbstractHtmlExporter"
  classesB4: "org.docx4j.convert.out.html.AbstractHtmlExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.AbstractHtmlExporter.HtmlSettings"
  classesB4: "org.docx4j.convert.out.html.AbstractHtmlExporter.HtmlSettings"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.BookmarkStartWriter"
  classesB4: "org.docx4j.convert.out.html.BookmarkStartWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.HtmlCssHelper"
  classesB4: "org.docx4j.convert.out.html.HtmlCssHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.HtmlExporterNG2"
  classesB4: "org.docx4j.convert.out.html.HtmlExporterNG2"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.HtmlExporterNG2.OutHtmlURIResolver"
  classesB4: "org.docx4j.convert.out.html.HtmlExporterNG2.OutHtmlURIResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.HtmlExporterNonXSLT"
  classesB4: "org.docx4j.convert.out.html.HtmlExporterNonXSLT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.HtmlExporterNonXSLT.HTMLGenerator"
  classesB4: "org.docx4j.convert.out.html.HtmlExporterNonXSLT.HTMLGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.SdtTagHandler"
  classesB4: "org.docx4j.convert.out.html.SdtTagHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.SdtWriter"
  classesB4: "org.docx4j.convert.out.html.SdtWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.SdtWriter.IdentityHandler"
  classesB4: "org.docx4j.convert.out.html.SdtWriter.IdentityHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.SdtWriter.NullHandler"
  classesB4: "org.docx4j.convert.out.html.SdtWriter.NullHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.SymbolWriter"
  classesB4: "org.docx4j.convert.out.html.SymbolWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.TableWriter"
  classesB4: "org.docx4j.convert.out.html.TableWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.TagClass"
  classesB4: "org.docx4j.convert.out.html.TagClass"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.html.TagSingleBox"
  classesB4: "org.docx4j.convert.out.html.TagSingleBox"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.PdfConversion"
  classesB4: "org.docx4j.convert.out.pdf.PdfConversion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.BookmarkStartWriter"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.BookmarkStartWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.Conversion"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.Conversion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.FopFactoryUtil"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.FopFactoryUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.FopResultUtils"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.FopResultUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.InField"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.InField"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.LayoutMasterSetBuilder"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.LayoutMasterSetBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.PDFConversionImageHandler"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.PDFConversionImageHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.SymbolWriter"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.SymbolWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.convert.out.pdf.viaXSLFO.TableWriter"
  classesB4: "org.docx4j.convert.out.pdf.viaXSLFO.TableWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.diff.Differencer"
  classesB4: "org.docx4j.diff.Differencer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.BestMatchingMapper"
  classesB4: "org.docx4j.fonts.BestMatchingMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.IdentityPlusMapper"
  classesB4: "org.docx4j.fonts.IdentityPlusMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.Mapper"
  classesB4: "org.docx4j.fonts.Mapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.PhysicalFont"
  classesB4: "org.docx4j.fonts.PhysicalFont"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.PhysicalFonts"
  classesB4: "org.docx4j.fonts.PhysicalFonts"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.util.FopConfigUtil"
  classesB4: "org.docx4j.fonts.fop.util.FopConfigUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.microsoft.MicrosoftFontsRegistry"
  classesB4: "org.docx4j.fonts.microsoft.MicrosoftFontsRegistry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.jaxb.Context"
  classesB4: "org.docx4j.jaxb.Context"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.jaxb.JaxbValidationEventHandler"
  classesB4: "org.docx4j.jaxb.JaxbValidationEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.jaxb.NamespacePrefixMapperUtils"
  classesB4: "org.docx4j.jaxb.NamespacePrefixMapperUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.PropertyResolver"
  classesB4: "org.docx4j.model.PropertyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.BindingHandler"
  classesB4: "org.docx4j.model.datastorage.BindingHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.BindingHyperlinkResolver"
  classesB4: "org.docx4j.model.datastorage.BindingHyperlinkResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.BindingTraverserNonXSLT"
  classesB4: "org.docx4j.model.datastorage.BindingTraverserNonXSLT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.BindingTraverserNonXSLT.ExtentFinder"
  classesB4: "org.docx4j.model.datastorage.BindingTraverserNonXSLT.ExtentFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.BindingTraverserNonXSLT.BindingTraversor"
  classesB4: "org.docx4j.model.datastorage.BindingTraverserNonXSLT.BindingTraversor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.BindingTraverserXSLT"
  classesB4: "org.docx4j.model.datastorage.BindingTraverserXSLT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.CustomXmlDataStorageImpl"
  classesB4: "org.docx4j.model.datastorage.CustomXmlDataStorageImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEHandler"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEHandler.ShallowTraversor"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEHandler.ShallowTraversor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEHandler.DeepTraversor"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEHandler.DeepTraversor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEIntegrity"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEIntegrity"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEReverter"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEReverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEReverter.TopLevelSdtTemplateFinder"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEReverter.TopLevelSdtTemplateFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.OpenDoPEReverter.TopLevelSdtInstanceFinder"
  classesB4: "org.docx4j.model.datastorage.OpenDoPEReverter.TopLevelSdtInstanceFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.migration.FromMergeFields"
  classesB4: "org.docx4j.model.datastorage.migration.FromMergeFields"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.migration.FromVariableReplacement"
  classesB4: "org.docx4j.model.datastorage.migration.FromVariableReplacement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.migration.FromVariableReplacement.PFinder"
  classesB4: "org.docx4j.model.datastorage.migration.FromVariableReplacement.PFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.migration.VariablePrepare"
  classesB4: "org.docx4j.model.datastorage.migration.VariablePrepare"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.datastorage.migration.VariablePrepare.TraversalUtilParagraphVisitor"
  classesB4: "org.docx4j.model.datastorage.migration.VariablePrepare.TraversalUtilParagraphVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.DateFormatInferencer"
  classesB4: "org.docx4j.model.fields.DateFormatInferencer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FieldRef"
  classesB4: "org.docx4j.model.fields.FieldRef"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FieldUpdater"
  classesB4: "org.docx4j.model.fields.FieldUpdater"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FieldsPreprocessor"
  classesB4: "org.docx4j.model.fields.FieldsPreprocessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FldSimpleModel"
  classesB4: "org.docx4j.model.fields.FldSimpleModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FormattingSwitchHelper"
  classesB4: "org.docx4j.model.fields.FormattingSwitchHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FormattingSwitchHelper.FieldResultIsNotADateOrTimeException"
  classesB4: "org.docx4j.model.fields.FormattingSwitchHelper.FieldResultIsNotADateOrTimeException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.FormattingSwitchHelper.FieldResultIsNotANumberException"
  classesB4: "org.docx4j.model.fields.FormattingSwitchHelper.FieldResultIsNotANumberException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.HyperlinkModel"
  classesB4: "org.docx4j.model.fields.HyperlinkModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.docproperty.DocPropertyResolver"
  classesB4: "org.docx4j.model.fields.docproperty.DocPropertyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.fields.merge.MailMerger"
  classesB4: "org.docx4j.model.fields.merge.MailMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.images.AbstractConversionImageHandler"
  classesB4: "org.docx4j.model.images.AbstractConversionImageHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.images.AbstractWordXmlPicture"
  classesB4: "org.docx4j.model.images.AbstractWordXmlPicture"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.images.WordXmlPictureE10"
  classesB4: "org.docx4j.model.images.WordXmlPictureE10"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.images.WordXmlPictureE20"
  classesB4: "org.docx4j.model.images.WordXmlPictureE20"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.AbstractListNumberingDefinition"
  classesB4: "org.docx4j.model.listnumbering.AbstractListNumberingDefinition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.Emulator"
  classesB4: "org.docx4j.model.listnumbering.Emulator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.Emulator.ResultTriple"
  classesB4: "org.docx4j.model.listnumbering.Emulator.ResultTriple"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.ListLevel"
  classesB4: "org.docx4j.model.listnumbering.ListLevel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.ListLevel.Counter"
  classesB4: "org.docx4j.model.listnumbering.ListLevel.Counter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.ListNumberingDefinition"
  classesB4: "org.docx4j.model.listnumbering.ListNumberingDefinition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.NumberFormatDecimalZero"
  classesB4: "org.docx4j.model.listnumbering.NumberFormatDecimalZero"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.listnumbering.NumberFormatLowerLetter"
  classesB4: "org.docx4j.model.listnumbering.NumberFormatLowerLetter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.AdHocProperty"
  classesB4: "org.docx4j.model.properties.AdHocProperty"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.Property"
  classesB4: "org.docx4j.model.properties.Property"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.PropertyFactory"
  classesB4: "org.docx4j.model.properties.PropertyFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.Indent"
  classesB4: "org.docx4j.model.properties.paragraph.Indent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.Justification"
  classesB4: "org.docx4j.model.properties.paragraph.Justification"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.KeepNext"
  classesB4: "org.docx4j.model.properties.paragraph.KeepNext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.LineSpacing"
  classesB4: "org.docx4j.model.properties.paragraph.LineSpacing"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.NumberingProperty"
  classesB4: "org.docx4j.model.properties.paragraph.NumberingProperty"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.PBorderBottom"
  classesB4: "org.docx4j.model.properties.paragraph.PBorderBottom"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.PBorderLeft"
  classesB4: "org.docx4j.model.properties.paragraph.PBorderLeft"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.PBorderRight"
  classesB4: "org.docx4j.model.properties.paragraph.PBorderRight"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.PBorderTop"
  classesB4: "org.docx4j.model.properties.paragraph.PBorderTop"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.PShading"
  classesB4: "org.docx4j.model.properties.paragraph.PShading"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.PageBreakBefore"
  classesB4: "org.docx4j.model.properties.paragraph.PageBreakBefore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.SpaceAfter"
  classesB4: "org.docx4j.model.properties.paragraph.SpaceAfter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.SpaceBefore"
  classesB4: "org.docx4j.model.properties.paragraph.SpaceBefore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.paragraph.TextAlignmentVertical"
  classesB4: "org.docx4j.model.properties.paragraph.TextAlignmentVertical"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.Bold"
  classesB4: "org.docx4j.model.properties.run.Bold"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.Font"
  classesB4: "org.docx4j.model.properties.run.Font"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.FontColor"
  classesB4: "org.docx4j.model.properties.run.FontColor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.FontSize"
  classesB4: "org.docx4j.model.properties.run.FontSize"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.HighlightColor"
  classesB4: "org.docx4j.model.properties.run.HighlightColor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.Italics"
  classesB4: "org.docx4j.model.properties.run.Italics"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.RBorder"
  classesB4: "org.docx4j.model.properties.run.RBorder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.RShading"
  classesB4: "org.docx4j.model.properties.run.RShading"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.Strike"
  classesB4: "org.docx4j.model.properties.run.Strike"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.TextDirection"
  classesB4: "org.docx4j.model.properties.run.TextDirection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.Underline"
  classesB4: "org.docx4j.model.properties.run.Underline"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.properties.run.VerticalAlignment"
  classesB4: "org.docx4j.model.properties.run.VerticalAlignment"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.sdt.QueryString"
  classesB4: "org.docx4j.model.sdt.QueryString"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.structure.DocumentModel"
  classesB4: "org.docx4j.model.structure.DocumentModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.structure.HeaderFooterPolicy"
  classesB4: "org.docx4j.model.structure.HeaderFooterPolicy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.structure.PageDimensions"
  classesB4: "org.docx4j.model.structure.PageDimensions"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.structure.SectionWrapper"
  classesB4: "org.docx4j.model.structure.SectionWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.styles.Node"
  classesB4: "org.docx4j.model.styles.Node"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.styles.StyleTree"
  classesB4: "org.docx4j.model.styles.StyleTree"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.styles.StyleTree.AugmentedStyle"
  classesB4: "org.docx4j.model.styles.StyleTree.AugmentedStyle"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.styles.Tree"
  classesB4: "org.docx4j.model.styles.Tree"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.table.Cell"
  classesB4: "org.docx4j.model.table.Cell"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.table.TableModel"
  classesB4: "org.docx4j.model.table.TableModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.table.TableModel.TrFinder"
  classesB4: "org.docx4j.model.table.TableModel.TrFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.table.TableModel.TcFinder"
  classesB4: "org.docx4j.model.table.TableModel.TcFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.model.table.TableModel.IntRef"
  classesB4: "org.docx4j.model.table.TableModel.IntRef"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.Base"
  classesB4: "org.docx4j.openpackaging.Base"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.URIHelper"
  classesB4: "org.docx4j.openpackaging.URIHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.contenttype.ContentTypeManager"
  classesB4: "org.docx4j.openpackaging.contenttype.ContentTypeManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.ExternalResourceUtils"
  classesB4: "org.docx4j.openpackaging.io.ExternalResourceUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.Load"
  classesB4: "org.docx4j.openpackaging.io.Load"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.LoadFromZipNG"
  classesB4: "org.docx4j.openpackaging.io.LoadFromZipNG"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.LoadFromZipNG.ByteArray"
  classesB4: "org.docx4j.openpackaging.io.LoadFromZipNG.ByteArray"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io.SaveToZipFile"
  classesB4: "org.docx4j.openpackaging.io.SaveToZipFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io3.Load3"
  classesB4: "org.docx4j.openpackaging.io3.Load3"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io3.Save"
  classesB4: "org.docx4j.openpackaging.io3.Save"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io3.stores.UnzippedPartStore"
  classesB4: "org.docx4j.openpackaging.io3.stores.UnzippedPartStore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io3.stores.ZipPartStore"
  classesB4: "org.docx4j.openpackaging.io3.stores.ZipPartStore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.io3.stores.ZipPartStore.ByteArray"
  classesB4: "org.docx4j.openpackaging.io3.stores.ZipPartStore.ByteArray"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.packages.OpcPackage"
  classesB4: "org.docx4j.openpackaging.packages.OpcPackage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.packages.WordprocessingMLPackage"
  classesB4: "org.docx4j.openpackaging.packages.WordprocessingMLPackage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.packages.WordprocessingMLPackage.FilterSettings"
  classesB4: "org.docx4j.openpackaging.packages.WordprocessingMLPackage.FilterSettings"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.CustomXmlDataStoragePart"
  classesB4: "org.docx4j.openpackaging.parts.CustomXmlDataStoragePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DocPropsCorePart"
  classesB4: "org.docx4j.openpackaging.parts.DocPropsCorePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DocPropsCoverPagePart"
  classesB4: "org.docx4j.openpackaging.parts.DocPropsCoverPagePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DocPropsCustomPart"
  classesB4: "org.docx4j.openpackaging.parts.DocPropsCustomPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DocPropsExtendedPart"
  classesB4: "org.docx4j.openpackaging.parts.DocPropsExtendedPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramColorsPart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramColorsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramDataPart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramDataPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramDataUnflatten"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramDataUnflatten"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramDrawingPart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramDrawingPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramLayoutHeaderPart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramLayoutHeaderPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramLayoutPart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramLayoutPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.DiagramStylePart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.DiagramStylePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.DrawingML.JaxbDmlPart"
  classesB4: "org.docx4j.openpackaging.parts.DrawingML.JaxbDmlPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.ExternalTarget"
  classesB4: "org.docx4j.openpackaging.parts.ExternalTarget"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.JaxbXmlPart"
  classesB4: "org.docx4j.openpackaging.parts.JaxbXmlPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.JaxbXmlPartAltChunkHost"
  classesB4: "org.docx4j.openpackaging.parts.JaxbXmlPartAltChunkHost"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.JaxbXmlPartXPathAware"
  classesB4: "org.docx4j.openpackaging.parts.JaxbXmlPartXPathAware"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.Part"
  classesB4: "org.docx4j.openpackaging.parts.Part"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.PartName"
  classesB4: "org.docx4j.openpackaging.parts.PartName"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.Parts"
  classesB4: "org.docx4j.openpackaging.parts.Parts"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.ThemePart"
  classesB4: "org.docx4j.openpackaging.parts.ThemePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.VMLPart"
  classesB4: "org.docx4j.openpackaging.parts.VMLPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.BibliographyPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.BibliographyPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.BinaryPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.BinaryPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage.CxCy"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.BinaryPartAbstractImage.CxCy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.StreamGobbler"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.StreamGobbler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.DocumentSettingsPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.DocumentSettingsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.EmbeddedPackagePart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.EmbeddedPackagePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.FontTablePart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.FontTablePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.FooterPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.FooterPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.GlossaryDocumentPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.GlossaryDocumentPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.HeaderPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.HeaderPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart.FontAndStyleFinder"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.MainDocumentPart.FontAndStyleFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.NumberingDefinitionsPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.NumberingDefinitionsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.ObfuscatedFontPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.ObfuscatedFontPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.OleObjectBinaryPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.OleObjectBinaryPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.StyleDefinitionsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.WordprocessingML.VbaProjectBinaryPart"
  classesB4: "org.docx4j.openpackaging.parts.WordprocessingML.VbaProjectBinaryPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.XmlPart"
  classesB4: "org.docx4j.openpackaging.parts.XmlPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.opendope.ComponentsPart"
  classesB4: "org.docx4j.openpackaging.parts.opendope.ComponentsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.opendope.ConditionsPart"
  classesB4: "org.docx4j.openpackaging.parts.opendope.ConditionsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.opendope.JaxbCustomXmlDataStoragePart"
  classesB4: "org.docx4j.openpackaging.parts.opendope.JaxbCustomXmlDataStoragePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.opendope.QuestionsPart"
  classesB4: "org.docx4j.openpackaging.parts.opendope.QuestionsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.opendope.StandardisedAnswersPart"
  classesB4: "org.docx4j.openpackaging.parts.opendope.StandardisedAnswersPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.opendope.XPathsPart"
  classesB4: "org.docx4j.openpackaging.parts.opendope.XPathsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.AlteredParts"
  classesB4: "org.docx4j.openpackaging.parts.relationships.AlteredParts"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.AlteredParts.Alterations"
  classesB4: "org.docx4j.openpackaging.parts.relationships.AlteredParts.Alterations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.AlteredParts.Alteration"
  classesB4: "org.docx4j.openpackaging.parts.relationships.AlteredParts.Alteration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.Patcher"
  classesB4: "org.docx4j.openpackaging.parts.relationships.Patcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.RelationshipsPart"
  classesB4: "org.docx4j.openpackaging.parts.relationships.RelationshipsPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.BookmarksDeleter"
  classesB4: "org.docx4j.samples.BookmarksDeleter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.BookmarksDeleter.RangeTraverser"
  classesB4: "org.docx4j.samples.BookmarksDeleter.RangeTraverser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.ContentControlsInfoParts"
  classesB4: "org.docx4j.samples.ContentControlsInfoParts"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.ContentControlsInfoStructure"
  classesB4: "org.docx4j.samples.ContentControlsInfoStructure"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.ContentControlsInfoStructure.TraversalUtilContentControlVisitor"
  classesB4: "org.docx4j.samples.ContentControlsInfoStructure.TraversalUtilContentControlVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.ContentControlsInfoStructure.IndentingVisitorCallback"
  classesB4: "org.docx4j.samples.ContentControlsInfoStructure.IndentingVisitorCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.FieldsDiagnostics"
  classesB4: "org.docx4j.samples.FieldsDiagnostics"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.PartsList"
  classesB4: "org.docx4j.samples.PartsList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.samples.PartsStrip"
  classesB4: "org.docx4j.samples.PartsStrip"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.utils.BufferUtil"
  classesB4: "org.docx4j.utils.BufferUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.utils.ResourceUtils"
  classesB4: "org.docx4j.utils.ResourceUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.utils.XPathAwareCloner"
  classesB4: "org.docx4j.utils.XPathAwareCloner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.utils.XSLTUtils"
  classesB4: "org.docx4j.utils.XSLTUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.P"
  classesB4: "org.docx4j.wml.P"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.P.Hyperlink"
  classesB4: "org.docx4j.wml.P.Hyperlink"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtBlock"
  classesB4: "org.docx4j.wml.SdtBlock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtContentBlock"
  classesB4: "org.docx4j.wml.SdtContentBlock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr"
  classesB4: "org.docx4j.wml.SdtPr"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.Alias"
  classesB4: "org.docx4j.wml.SdtPr.Alias"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.Bibliography"
  classesB4: "org.docx4j.wml.SdtPr.Bibliography"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.Citation"
  classesB4: "org.docx4j.wml.SdtPr.Citation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.Equation"
  classesB4: "org.docx4j.wml.SdtPr.Equation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.Group"
  classesB4: "org.docx4j.wml.SdtPr.Group"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.Picture"
  classesB4: "org.docx4j.wml.SdtPr.Picture"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.wml.SdtPr.RichText"
  classesB4: "org.docx4j.wml.SdtPr.RichText"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.opendope.conditions.Xpathref"
  classesB4: "org.opendope.conditions.Xpathref"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.packages.PresentationMLPackage"
  classesB4: "org.docx4j.openpackaging.packages.PresentationMLPackage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.PresentationML.JaxbPmlPart"
  classesB4: "org.docx4j.openpackaging.parts.PresentationML.JaxbPmlPart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.PresentationML.SlidePart"
  classesB4: "org.docx4j.openpackaging.parts.PresentationML.SlidePart"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.convert.in.xhtml.XHTMLImporter"
  classesB4: "org.pptx4j.convert.in.xhtml.XHTMLImporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.convert.out.svginhtml.PictureExporter"
  classesB4: "org.pptx4j.convert.out.svginhtml.PictureExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.convert.out.svginhtml.SvgExporter"
  classesB4: "org.pptx4j.convert.out.svginhtml.SvgExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.convert.out.svginhtml.SvgExporter.SvgSettings"
  classesB4: "org.pptx4j.convert.out.svginhtml.SvgExporter.SvgSettings"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.jaxb.Context"
  classesB4: "org.pptx4j.jaxb.Context"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.model.ResolvedLayout"
  classesB4: "org.pptx4j.model.ResolvedLayout"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.model.ShapeWrapper"
  classesB4: "org.pptx4j.model.ShapeWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.model.TextStyles"
  classesB4: "org.pptx4j.model.TextStyles"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.samples.AutoShapes"
  classesB4: "org.pptx4j.samples.AutoShapes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.samples.CreateHelloWorld"
  classesB4: "org.pptx4j.samples.CreateHelloWorld"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.samples.InsertPicture"
  classesB4: "org.pptx4j.samples.InsertPicture"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.samples.RenderAsSvgInHtml"
  classesB4: "org.pptx4j.samples.RenderAsSvgInHtml"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.samples.RoundTripTest"
  classesB4: "org.pptx4j.samples.RoundTripTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pptx4j.samples.Table"
  classesB4: "org.pptx4j.samples.Table"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.AddPartTests"
  classesB4: "org.docx4j.openpackaging.parts.relationships.AddPartTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.AlteredPartsTest"
  classesB4: "org.docx4j.openpackaging.parts.relationships.AlteredPartsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.parts.relationships.PatcherTest"
  classesB4: "org.docx4j.openpackaging.parts.relationships.PatcherTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.openpackaging.packages.SpreadsheetMLPackage"
  classesB4: "org.docx4j.openpackaging.packages.SpreadsheetMLPackage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.xlsx4j.jaxb.Context"
  classesB4: "org.xlsx4j.jaxb.Context"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.xlsx4j.samples.PartsList"
  classesB4: "org.xlsx4j.samples.PartsList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "docx4j"
commit: "docx4j"
tooBig: false

refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.Font"
  classesB4: "org.docx4j.fonts.fop.fonts.Font"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.Font"
    classAftr: "org.docx4j.fonts.fop.fonts.Font"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.Font"
  classesB4: "org.docx4j.fonts.fop.fonts.Font"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontCache"
  classesB4: "org.docx4j.fonts.fop.fonts.FontCache"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.FontCache"
    classAftr: "org.docx4j.fonts.fop.fonts.FontCache"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontCache"
  classesB4: "org.docx4j.fonts.fop.fonts.FontCache"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontCache.CachedFontFile"
  classesB4: "org.docx4j.fonts.fop.fonts.FontCache.CachedFontFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontInfo"
  classesB4: "org.docx4j.fonts.fop.fonts.FontInfo"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.FontInfo"
    classAftr: "org.docx4j.fonts.fop.fonts.FontInfo"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontInfo"
  classesB4: "org.docx4j.fonts.fop.fonts.FontInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontLoader"
  classesB4: "org.docx4j.fonts.fop.fonts.FontLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.FontLoader"
    classAftr: "org.docx4j.fonts.fop.fonts.FontLoader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontLoader"
  classesB4: "org.docx4j.fonts.fop.fonts.FontLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator"
  classesB4: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator"
    classAftr: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator"
  classesB4: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator.OrFontTripletMatcher"
  classesB4: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator.OrFontTripletMatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator.FontFamilyRegExFontTripletMatcher"
  classesB4: "org.docx4j.fonts.fop.fonts.FontManagerConfigurator.FontFamilyRegExFontTripletMatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontSetup"
  classesB4: "org.docx4j.fonts.fop.fonts.FontSetup"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.FontSetup"
    classAftr: "org.docx4j.fonts.fop.fonts.FontSetup"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.FontSetup"
  classesB4: "org.docx4j.fonts.fop.fonts.FontSetup"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.LazyFont"
  classesB4: "org.docx4j.fonts.fop.fonts.LazyFont"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.LazyFont"
    classAftr: "org.docx4j.fonts.fop.fonts.LazyFont"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.LazyFont"
  classesB4: "org.docx4j.fonts.fop.fonts.LazyFont"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.SingleByteFont"
  classesB4: "org.docx4j.fonts.fop.fonts.SingleByteFont"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.SingleByteFont"
    classAftr: "org.docx4j.fonts.fop.fonts.SingleByteFont"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.SingleByteFont"
  classesB4: "org.docx4j.fonts.fop.fonts.SingleByteFont"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.SingleByteFont.UnencodedCharacter"
  classesB4: "org.docx4j.fonts.fop.fonts.SingleByteFont.UnencodedCharacter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.Typeface"
  classesB4: "org.docx4j.fonts.fop.fonts.Typeface"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.Typeface"
    classAftr: "org.docx4j.fonts.fop.fonts.Typeface"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.Typeface"
  classesB4: "org.docx4j.fonts.fop.fonts.Typeface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.apps.AbstractFontReader"
  classesB4: "org.docx4j.fonts.fop.fonts.apps.AbstractFontReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.apps.AbstractFontReader"
    classAftr: "org.docx4j.fonts.fop.fonts.apps.AbstractFontReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.apps.AbstractFontReader"
  classesB4: "org.docx4j.fonts.fop.fonts.apps.AbstractFontReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.apps.TTFReader"
  classesB4: "org.docx4j.fonts.fop.fonts.apps.TTFReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.autodetect.FontFileFinder"
  classesB4: "org.docx4j.fonts.fop.fonts.autodetect.FontFileFinder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.autodetect.FontFileFinder"
    classAftr: "org.docx4j.fonts.fop.fonts.autodetect.FontFileFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.autodetect.FontFileFinder"
  classesB4: "org.docx4j.fonts.fop.fonts.autodetect.FontFileFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.autodetect.FontInfoFinder"
  classesB4: "org.docx4j.fonts.fop.fonts.autodetect.FontInfoFinder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.autodetect.FontInfoFinder"
    classAftr: "org.docx4j.fonts.fop.fonts.autodetect.FontInfoFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.autodetect.FontInfoFinder"
  classesB4: "org.docx4j.fonts.fop.fonts.autodetect.FontInfoFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.substitute.FontQualifier"
  classesB4: "org.docx4j.fonts.fop.fonts.substitute.FontQualifier"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.substitute.FontQualifier"
    classAftr: "org.docx4j.fonts.fop.fonts.substitute.FontQualifier"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.substitute.FontQualifier"
  classesB4: "org.docx4j.fonts.fop.fonts.substitute.FontQualifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.substitute.FontSubstitutions"
  classesB4: "org.docx4j.fonts.fop.fonts.substitute.FontSubstitutions"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.substitute.FontSubstitutions"
    classAftr: "org.docx4j.fonts.fop.fonts.substitute.FontSubstitutions"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.substitute.FontSubstitutions"
  classesB4: "org.docx4j.fonts.fop.fonts.substitute.FontSubstitutions"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.substitute.FontWeightRange"
  classesB4: "org.docx4j.fonts.fop.fonts.substitute.FontWeightRange"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.substitute.FontWeightRange"
    classAftr: "org.docx4j.fonts.fop.fonts.substitute.FontWeightRange"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.substitute.FontWeightRange"
  classesB4: "org.docx4j.fonts.fop.fonts.substitute.FontWeightRange"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.truetype.TTFFile"
  classesB4: "org.docx4j.fonts.fop.fonts.truetype.TTFFile"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.truetype.TTFFile"
    classAftr: "org.docx4j.fonts.fop.fonts.truetype.TTFFile"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.truetype.TTFFile"
  classesB4: "org.docx4j.fonts.fop.fonts.truetype.TTFFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.truetype.TTFFile.UnicodeMapping"
  classesB4: "org.docx4j.fonts.fop.fonts.truetype.TTFFile.UnicodeMapping"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.type1.PFMFile"
  classesB4: "org.docx4j.fonts.fop.fonts.type1.PFMFile"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.fonts.type1.PFMFile"
    classAftr: "org.docx4j.fonts.fop.fonts.type1.PFMFile"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.fonts.type1.PFMFile"
  classesB4: "org.docx4j.fonts.fop.fonts.type1.PFMFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.util.LogUtil"
  classesB4: "org.docx4j.fonts.fop.util.LogUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.util.LogUtil"
    classAftr: "org.docx4j.fonts.fop.util.LogUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.util.LogUtil"
  classesB4: "org.docx4j.fonts.fop.util.LogUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.docx4j.fonts.fop.util.LogUtil"
    classAftr: "org.docx4j.fonts.fop.util.LogUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.docx4j.fonts.fop.util.LogUtil"
  classesB4: "org.docx4j.fonts.fop.util.LogUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "docx4j"
commit: "docx4j"
tooBig: false

refactorings {
  classesAftr: "name.richardson.james.bukkit.utilities.command.invoker.CommandInvokerTest"
  classesB4: "name.richardson.james.bukkit.utilities.command.invoker.CommandInvokerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "BukkitUtilities"
commit: "BukkitUtilities"
tooBig: false

refactorings {
  classesAftr: "com.geewhiz.pacify.defect.PropertyDuplicateDefinedInPropertyFileDefect"
  classesB4: "com.geewhiz.pacify.defect.PropertyDuplicateDefinedInPropertyFileDefect"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.resolver.BasePropertyResolver"
  classesB4: "com.geewhiz.pacify.resolver.BasePropertyResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.commandline.TestCommandlineCall"
  classesB4: "com.geewhiz.pacify.commandline.TestCommandlineCall"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.commandline.TestMultipleResolvers"
  classesB4: "com.geewhiz.pacify.commandline.TestMultipleResolvers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.commandline.TestWritePropertyFile"
  classesB4: "com.geewhiz.pacify.commandline.TestWritePropertyFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestUtil"
  classesB4: "com.geewhiz.pacify.TestUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestCheckPropertyDuplicateDefinedInPMarkerFile"
  classesB4: "com.geewhiz.pacify.TestCheckPropertyDuplicateDefinedInPMarkerFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestCheckPropertyExistsInTargetFile"
  classesB4: "com.geewhiz.pacify.TestCheckPropertyExistsInTargetFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestCheckTargetFileExist"
  classesB4: "com.geewhiz.pacify.TestCheckTargetFileExist"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestXml"
  classesB4: "com.geewhiz.pacify.TestXml"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestCmdResolver"
  classesB4: "com.geewhiz.pacify.TestCmdResolver"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestCheckPropertyDuplicateDefinedInPropertyFile"
  classesB4: "com.geewhiz.pacify.TestCheckPropertyDuplicateDefinedInPropertyFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestCheckPropertyExistsInPropertyFile"
  classesB4: "com.geewhiz.pacify.TestCheckPropertyExistsInPropertyFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestNotReplacedProperty"
  classesB4: "com.geewhiz.pacify.TestNotReplacedProperty"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestRecursivePropertyFileLoader"
  classesB4: "com.geewhiz.pacify.TestRecursivePropertyFileLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.geewhiz.pacify.TestRecursivePropertyReplacement"
  classesB4: "com.geewhiz.pacify.TestRecursivePropertyReplacement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "pflist"
commit: "pflist"
tooBig: false

refactorings {
  classesAftr: "net.masterthought.cucumber.ReportParser"
  classesB4: "net.masterthought.cucumber.ReportParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Element"
  classesB4: "net.masterthought.cucumber.json.Element"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Embedding"
  classesB4: "net.masterthought.cucumber.json.Embedding"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Embedding"
  classesB4: "net.masterthought.cucumber.json.Embedding"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Feature"
  classesB4: "net.masterthought.cucumber.json.Feature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Result"
  classesB4: "net.masterthought.cucumber.json.Result"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Step"
  classesB4: "net.masterthought.cucumber.json.Step"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "JsonElement"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      simpleType {
        name: "Output"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "output"
    nameaftr: "output"
    classb4: "net.masterthought.cucumber.json.Step"
    classAftr: "net.masterthought.cucumber.json.Step"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Step"
  classesB4: "net.masterthought.cucumber.json.Step"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "Output"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getOutput"
    nameaftr: "getOutput"
    classb4: "net.masterthought.cucumber.json.Step"
    classAftr: "net.masterthought.cucumber.json.Step"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.json.Step"
  classesB4: "net.masterthought.cucumber.json.Step"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.generators.integrations.FeatureReportPageIntegrationTest"
  classesB4: "net.masterthought.cucumber.generators.integrations.FeatureReportPageIntegrationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.generators.integrations.TagReportPageIntegrationTest"
  classesB4: "net.masterthought.cucumber.generators.integrations.TagReportPageIntegrationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.generators.integrations.helpers.ElementAssertion"
  classesB4: "net.masterthought.cucumber.generators.integrations.helpers.ElementAssertion"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.generators.integrations.helpers.ElementAssertion"
  classesB4: "net.masterthought.cucumber.generators.integrations.helpers.ElementAssertion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.masterthought.cucumber.generators.integrations.helpers.StepAssertion"
  classesB4: "net.masterthought.cucumber.generators.integrations.helpers.StepAssertion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    arryTyp {
      name {
        simpleType {
          name: "com.google.gson.JsonElement"
          typeOfType: DontKnow
        }
      }
      dim: 1
    }
  }
  aftr {
    simpleType {
      name: "net.masterthought.cucumber.json.Output"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      arryTyp {
        name {
          simpleType {
            name: "com.google.gson.JsonElement"
            typeOfType: DontKnow
          }
        }
        dim: 1
      }
    }
    aftr {
      simpleType {
        name: "net.masterthought.cucumber.json.Output"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        arryTyp {
          name {
            simpleType {
              name: "com.google.gson.JsonElement"
              typeOfType: DontKnow
            }
          }
          dim: 1
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.masterthought.cucumber.json.Output"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      arryTyp {
        name {
          simpleType {
            name: "com.google.gson.JsonElement"
            typeOfType: DontKnow
          }
        }
        dim: 1
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "net.masterthought.cucumber.json.Output"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "net.masterthought.cucumber.json.Output"
              typeOfType: Internal
            }
          }
          chng {
            from: "java.lang.String"
            to: "net.masterthought.cucumber.json.Output"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "net.masterthought.cucumber.json.Output"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.masterthought.cucumber.json.Output"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
project: "cucumber-reporting"
commit: "cucumber-reporting"
tooBig: false

refactorings {
  classesAftr: "com.agungsetiawan.finalproject.config.WebAppConfig"
  classesB4: "com.agungsetiawan.finalproject.config.WebAppConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.AllBookController"
  classesB4: "com.agungsetiawan.finalproject.controller.AllBookController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.BookDetailController"
  classesB4: "com.agungsetiawan.finalproject.controller.BookDetailController"
  typeChange {
    dtB4 {
      simpleType {
        name: "CartService"
      }
    }
    dtAftr {
      simpleType {
        name: "CartServiceInterface"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cart"
    nameaftr: "cart"
    classb4: "com.agungsetiawan.finalproject.controller.BookDetailController"
    classAftr: "com.agungsetiawan.finalproject.controller.BookDetailController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.BookDetailController"
  classesB4: "com.agungsetiawan.finalproject.controller.BookDetailController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.CartController"
  classesB4: "com.agungsetiawan.finalproject.controller.CartController"
  typeChange {
    dtB4 {
      simpleType {
        name: "CartService"
      }
    }
    dtAftr {
      simpleType {
        name: "CartServiceInterface"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cart"
    nameaftr: "cart"
    classb4: "com.agungsetiawan.finalproject.controller.CartController"
    classAftr: "com.agungsetiawan.finalproject.controller.CartController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.CartController"
  classesB4: "com.agungsetiawan.finalproject.controller.CartController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.CategoryController"
  classesB4: "com.agungsetiawan.finalproject.controller.CategoryController"
  typeChange {
    dtB4 {
      simpleType {
        name: "CartService"
      }
    }
    dtAftr {
      simpleType {
        name: "CartServiceInterface"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cart"
    nameaftr: "cart"
    classb4: "com.agungsetiawan.finalproject.controller.CategoryController"
    classAftr: "com.agungsetiawan.finalproject.controller.CategoryController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.CategoryController"
  classesB4: "com.agungsetiawan.finalproject.controller.CategoryController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.controller.CustomerOrderController"
  classesB4: "com.agungsetiawan.finalproject.controller.CustomerOrderController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.domain.Order"
  classesB4: "com.agungsetiawan.finalproject.domain.Order"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.domain.OrderDetail"
  classesB4: "com.agungsetiawan.finalproject.domain.OrderDetail"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.CartService"
  classesB4: "com.agungsetiawan.finalproject.service.CartService"
  typeChange {
    dtB4 {
      prmtv {
        name: "void"
      }
    }
    dtAftr {
      simpleType {
        name: "Book"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "save"
    nameaftr: "save"
    classb4: "com.agungsetiawan.finalproject.service.CartService"
    classAftr: "com.agungsetiawan.finalproject.service.CartService"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.CartService"
  classesB4: "com.agungsetiawan.finalproject.service.CartService"
  typeChange {
    dtB4 {
      prmtv {
        name: "void"
      }
    }
    dtAftr {
      simpleType {
        name: "Book"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "update"
    nameaftr: "update"
    classb4: "com.agungsetiawan.finalproject.service.CartService"
    classAftr: "com.agungsetiawan.finalproject.service.CartService"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.CartService"
  classesB4: "com.agungsetiawan.finalproject.service.CartService"
  typeChange {
    dtB4 {
      prmtv {
        name: "void"
      }
    }
    dtAftr {
      simpleType {
        name: "Book"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "delete"
    nameaftr: "delete"
    classb4: "com.agungsetiawan.finalproject.service.CartService"
    classAftr: "com.agungsetiawan.finalproject.service.CartService"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.CartService"
  classesB4: "com.agungsetiawan.finalproject.service.CartService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.CategoryServiceImpl"
  classesB4: "com.agungsetiawan.finalproject.service.CategoryServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.CustomerServiceImpl"
  classesB4: "com.agungsetiawan.finalproject.service.CustomerServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.OrderServiceImpl"
  classesB4: "com.agungsetiawan.finalproject.service.OrderServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.RoleServiceImpl"
  classesB4: "com.agungsetiawan.finalproject.service.RoleServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  classesB4: "com.agungsetiawan.finalproject.service.BookServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.agungsetiawan.finalproject.service.CartService"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "com.agungsetiawan.finalproject.service.CartServiceInterface"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.agungsetiawan.finalproject.service.CartService"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "com.agungsetiawan.finalproject.service.CartServiceInterface"
              typeOfType: Internal
            }
          }
          chng {
            from: "com.agungsetiawan.finalproject.service.CartService"
            to: "com.agungsetiawan.finalproject.service.CartServiceInterface"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.agungsetiawan.finalproject.service.CartService"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "com.agungsetiawan.finalproject.service.CartServiceInterface"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.agungsetiawan.finalproject.service.CartService"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.agungsetiawan.finalproject.service.CartServiceInterface"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.agungsetiawan.finalproject.service.CartService"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "void"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "com.agungsetiawan.finalproject.domain.Book"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "void"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "com.agungsetiawan.finalproject.domain.Book"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "void"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.agungsetiawan.finalproject.domain.Book"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "void"
        typeOfType: Internal
      }
    }
  }
}
project: "FinalProject"
commit: "FinalProject"
tooBig: false

refactorings {
  classesAftr: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  classesB4: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpclient"
    classb4: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
    classAftr: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  classesB4: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "MultiThreadedHttpConnectionManager"
      }
    }
    dtAftr {
      simpleType {
        name: "PoolingClientConnectionManager"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "connectionManager"
    nameaftr: "connectionManager"
    classb4: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
    classAftr: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  classesB4: "org.jboss.elasticsearch.river.jira.JIRA5RestClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.elasticsearch.river.jira.JIRA5RestClientTest"
  classesB4: "org.jboss.elasticsearch.river.jira.JIRA5RestClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.elasticsearch.river.jira.JIRAProjectIndexer_IntegrationTest"
  classesB4: "org.jboss.elasticsearch.river.jira.JIRAProjectIndexer_IntegrationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.conn.PoolingClientConnectionManager"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.conn.PoolingClientConnectionManager"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
            to: "org.apache.http.impl.conn.PoolingClientConnectionManager"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.conn.PoolingClientConnectionManager"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.conn.PoolingClientConnectionManager"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
project: "elasticsearch-river-jira"
commit: "elasticsearch-river-jira"
tooBig: false

refactorings {
  classesAftr: "brave.webmvc.ExampleController"
  classesB4: "brave.webmvc.ExampleController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "brave-resteasy-example"
commit: "brave-resteasy-example"
tooBig: false

refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "get"
    nameaftr: "get"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "get"
    nameaftr: "get"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "DeleteMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpDelete"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "delete"
    nameaftr: "delete"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "get"
    nameaftr: "get"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "get"
    nameaftr: "get"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "HeadMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHead"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "head"
    nameaftr: "head"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "put"
    nameaftr: "put"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "put"
    nameaftr: "put"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "PutMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPut"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "put"
    nameaftr: "put"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
    classAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  classesB4: "org.dasein.cloud.openstack.nova.os.AbstractMethod"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.NovaLocationServices"
  classesB4: "org.dasein.cloud.openstack.nova.os.NovaLocationServices"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.dasein.cloud.openstack.nova.os.NovaOpenStack"
  classesB4: "org.dasein.cloud.openstack.nova.os.NovaOpenStack"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PutMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPut"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PutMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPut"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PutMethod"
            to: "org.apache.http.client.methods.HttpPut"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PutMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPut"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PutMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPut"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PutMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.DeleteMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpDelete"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.DeleteMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpDelete"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.DeleteMethod"
            to: "org.apache.http.client.methods.HttpDelete"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.DeleteMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpDelete"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.DeleteMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpDelete"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.DeleteMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.HeadMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpHead"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.HeadMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpHead"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.HeadMethod"
            to: "org.apache.http.client.methods.HttpHead"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.HeadMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpHead"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.HeadMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpHead"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.HeadMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.HttpResponse"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.HttpResponse"
              typeOfType: Jdk
            }
          }
          chng {
            from: "java.lang.String"
            to: "org.apache.http.HttpResponse"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.HttpResponse"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.HttpResponse"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "dasein-cloud-openstack"
commit: "dasein-cloud-openstack"
tooBig: false

refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.ConfigDestinationTest"
  classesB4: "org.jenkinsci.tools.configcloner.ConfigDestinationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.UrlParserTest"
  classesB4: "org.jenkinsci.tools.configcloner.UrlParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.handler.CloneJobRunTest"
  classesB4: "org.jenkinsci.tools.configcloner.handler.CloneJobRunTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.handler.CloneJobTest"
  classesB4: "org.jenkinsci.tools.configcloner.handler.CloneJobTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.handler.CloneNodeRunTest"
  classesB4: "org.jenkinsci.tools.configcloner.handler.CloneNodeRunTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.handler.CloneNodeTest"
  classesB4: "org.jenkinsci.tools.configcloner.handler.CloneNodeTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.handler.CloneViewRunTest"
  classesB4: "org.jenkinsci.tools.configcloner.handler.CloneViewRunTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jenkinsci.tools.configcloner.handler.CloneViewTest"
  classesB4: "org.jenkinsci.tools.configcloner.handler.CloneViewTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "jenkins-config-cloner"
commit: "jenkins-config-cloner"
tooBig: false

refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpConnector"
  classesB4: "de.csmp.jeiscp.EiscpConnector"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.EiscpConnector"
    classAftr: "de.csmp.jeiscp.EiscpConnector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpConnector"
  classesB4: "de.csmp.jeiscp.EiscpConnector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpConnectorSocketReaderThread"
  classesB4: "de.csmp.jeiscp.EiscpConnectorSocketReaderThread"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.EiscpConnectorSocketReaderThread"
    classAftr: "de.csmp.jeiscp.EiscpConnectorSocketReaderThread"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpConnectorSocketReaderThread"
  classesB4: "de.csmp.jeiscp.EiscpConnectorSocketReaderThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpDevice"
  classesB4: "de.csmp.jeiscp.EiscpDevice"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.EiscpDevice"
    classAftr: "de.csmp.jeiscp.EiscpDevice"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpDevice"
  classesB4: "de.csmp.jeiscp.EiscpDevice"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpProtocolHelper"
  classesB4: "de.csmp.jeiscp.EiscpProtocolHelper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.EiscpProtocolHelper"
    classAftr: "de.csmp.jeiscp.EiscpProtocolHelper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.EiscpProtocolHelper"
  classesB4: "de.csmp.jeiscp.EiscpProtocolHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.app.AppGuiController"
  classesB4: "de.csmp.jeiscp.app.AppGuiController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.app.AppGuiController"
    classAftr: "de.csmp.jeiscp.app.AppGuiController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.app.AppGuiController"
  classesB4: "de.csmp.jeiscp.app.AppGuiController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.app.AppGuiController.CaptionValue"
  classesB4: "de.csmp.jeiscp.app.AppGuiController.CaptionValue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.app.ThreadedConsoleApp"
  classesB4: "de.csmp.jeiscp.app.ThreadedConsoleApp"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.app.ThreadedConsoleApp"
    classAftr: "de.csmp.jeiscp.app.ThreadedConsoleApp"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.app.ThreadedConsoleApp"
  classesB4: "de.csmp.jeiscp.app.ThreadedConsoleApp"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.app.gui.OnkyoControllerMainFrame"
  classesB4: "de.csmp.jeiscp.app.gui.OnkyoControllerMainFrame"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.eiscp.EiscpCommandsParser"
  classesB4: "de.csmp.jeiscp.eiscp.EiscpCommandsParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.eiscp.EiscpCommandsParser"
    classAftr: "de.csmp.jeiscp.eiscp.EiscpCommandsParser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.eiscp.EiscpCommandsParser"
  classesB4: "de.csmp.jeiscp.eiscp.EiscpCommandsParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.eiscp.EiscpCommandsParserTest"
  classesB4: "de.csmp.jeiscp.eiscp.EiscpCommandsParserTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "de.csmp.jeiscp.eiscp.EiscpCommandsParserTest"
    classAftr: "de.csmp.jeiscp.eiscp.EiscpCommandsParserTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "de.csmp.jeiscp.eiscp.EiscpCommandsParserTest"
  classesB4: "de.csmp.jeiscp.eiscp.EiscpCommandsParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "jEISCP"
commit: "jEISCP"
tooBig: false

refactorings {
  classesAftr: "org.testng.junit.JUnit4TestRunner"
  classesB4: "org.testng.junit.JUnit4TestRunner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.testng.junit.JUnit4TestRunner.RL"
  classesB4: "org.testng.junit.JUnit4TestRunner.RL"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.testng.junit.JUnit4TestRunner.RL"
  classesB4: "org.testng.junit.JUnit4TestRunner.RL"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "test.JUnit4Test"
  classesB4: "test.JUnit4Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "test.junit4.JUnit4Sample2"
  classesB4: "test.junit4.JUnit4Sample2"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "testng"
commit: "testng"
tooBig: false

refactorings {
  classesAftr: "org.wikibrain.core.cmd.Env"
  classesB4: "org.wikibrain.core.cmd.Env"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.matrix.MatrixLocalLinkDao"
  classesB4: "org.wikibrain.core.dao.matrix.MatrixLocalLinkDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.matrix.MatrixLocalLinkDao.Provider"
  classesB4: "org.wikibrain.core.dao.matrix.MatrixLocalLinkDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.AbstractSqlDao"
  classesB4: "org.wikibrain.core.dao.sql.AbstractSqlDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.FastLoader"
  classesB4: "org.wikibrain.core.dao.sql.FastLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.JooqUtils"
  classesB4: "org.wikibrain.core.dao.sql.JooqUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.LocalCategoryGraphBuilder"
  classesB4: "org.wikibrain.core.dao.sql.LocalCategoryGraphBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.LocalPageSqlDao"
  classesB4: "org.wikibrain.core.dao.sql.LocalPageSqlDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.LocalPageSqlDao.Provider"
  classesB4: "org.wikibrain.core.dao.sql.LocalPageSqlDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.MetaInfoSqlDao"
  classesB4: "org.wikibrain.core.dao.sql.MetaInfoSqlDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.MetaInfoSqlDao.Provider"
  classesB4: "org.wikibrain.core.dao.sql.MetaInfoSqlDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.WpDataSource"
  classesB4: "org.wikibrain.core.dao.sql.WpDataSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.dao.sql.WpDataSource.WpDsProvider"
  classesB4: "org.wikibrain.core.dao.sql.WpDataSource.WpDsProvider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.lang.Language"
  classesB4: "org.wikibrain.core.lang.Language"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.lang.LanguageInfo"
  classesB4: "org.wikibrain.core.lang.LanguageInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.lang.LanguageInfo.AltNamespaceStruct"
  classesB4: "org.wikibrain.core.lang.LanguageInfo.AltNamespaceStruct"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.model.RawPage"
  classesB4: "org.wikibrain.core.model.RawPage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.model.Title"
  classesB4: "org.wikibrain.core.model.Title"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.core.nlp.Dictionary"
  classesB4: "org.wikibrain.core.nlp.Dictionary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.download.DumpFileDownloader"
  classesB4: "org.wikibrain.download.DumpFileDownloader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.download.DumpLinkInfo"
  classesB4: "org.wikibrain.download.DumpLinkInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.download.FileDownloader"
  classesB4: "org.wikibrain.download.FileDownloader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.download.FileDownloader.DownloadMonitor"
  classesB4: "org.wikibrain.download.FileDownloader.DownloadMonitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.download.RequestedLinkGetter"
  classesB4: "org.wikibrain.download.RequestedLinkGetter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.integration.TestDB"
  classesB4: "org.wikibrain.integration.TestDB"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.ConceptLoader"
  classesB4: "org.wikibrain.loader.ConceptLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.DumpLoader"
  classesB4: "org.wikibrain.loader.DumpLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.LoadedStats"
  classesB4: "org.wikibrain.loader.LoadedStats"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.LuceneLoader"
  classesB4: "org.wikibrain.loader.LuceneLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.LuceneLoader.Worker"
  classesB4: "org.wikibrain.loader.LuceneLoader.Worker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.PhraseLoader"
  classesB4: "org.wikibrain.loader.PhraseLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.RedirectLoader"
  classesB4: "org.wikibrain.loader.RedirectLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.SqlLinksLoader"
  classesB4: "org.wikibrain.loader.SqlLinksLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.UniversalLinkLoader"
  classesB4: "org.wikibrain.loader.UniversalLinkLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.WikiTextLoader"
  classesB4: "org.wikibrain.loader.WikiTextLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticDao"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticDao.Provider"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.Diagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.Diagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.MemoryDiagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.MemoryDiagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.CompletionTimeDiagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.CompletionTimeDiagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.DiskSpaceDiagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.DiskSpaceDiagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.DownloadDiagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.DownloadDiagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.DatabaseDiagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.DatabaseDiagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.DiagnosticReport.SpatialDatabaseDiagnostic"
  classesB4: "org.wikibrain.loader.pipeline.DiagnosticReport.SpatialDatabaseDiagnostic"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.loader.pipeline.PipelineLoader"
  classesB4: "org.wikibrain.loader.pipeline.PipelineLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.lucene.LuceneSearcher"
  classesB4: "org.wikibrain.lucene.LuceneSearcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.lucene.LuceneSearcher.Provider"
  classesB4: "org.wikibrain.lucene.LuceneSearcher.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.lucene.QueryBuilder"
  classesB4: "org.wikibrain.lucene.QueryBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.lucene.WpIdFilter"
  classesB4: "org.wikibrain.lucene.WpIdFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.MapperIterator"
  classesB4: "org.wikibrain.mapper.MapperIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.algorithms.PureWikidataConceptMapper"
  classesB4: "org.wikibrain.mapper.algorithms.PureWikidataConceptMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.algorithms.PureWikidataConceptMapper.Provider"
  classesB4: "org.wikibrain.mapper.algorithms.PureWikidataConceptMapper.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.algorithms.conceptualign3.Conceptualign3ConnectedComponentHandler"
  classesB4: "org.wikibrain.mapper.algorithms.conceptualign3.Conceptualign3ConnectedComponentHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.algorithms.conceptualign3.ConceptualignConceptMapper"
  classesB4: "org.wikibrain.mapper.algorithms.conceptualign3.ConceptualignConceptMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.algorithms.conceptualign3.ConnectedComponentTraversalListener"
  classesB4: "org.wikibrain.mapper.algorithms.conceptualign3.ConnectedComponentTraversalListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.mapper.algorithms.conceptualign3.ILLSplitter"
  classesB4: "org.wikibrain.mapper.algorithms.conceptualign3.ILLSplitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.DenseMatrix"
  classesB4: "org.wikibrain.matrix.DenseMatrix"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.DenseMatrix.DenseMatrixIterator"
  classesB4: "org.wikibrain.matrix.DenseMatrix.DenseMatrixIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.DenseMatrixRow"
  classesB4: "org.wikibrain.matrix.DenseMatrixRow"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.DenseMatrixWriter"
  classesB4: "org.wikibrain.matrix.DenseMatrixWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.MemoryMappedMatrix"
  classesB4: "org.wikibrain.matrix.MemoryMappedMatrix"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.MemoryMappedMatrix.MappedBufferWrapper"
  classesB4: "org.wikibrain.matrix.MemoryMappedMatrix.MappedBufferWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrix"
  classesB4: "org.wikibrain.matrix.SparseMatrix"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrix.SparseMatrixIterator"
  classesB4: "org.wikibrain.matrix.SparseMatrix.SparseMatrixIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrixRow"
  classesB4: "org.wikibrain.matrix.SparseMatrixRow"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrixSorter"
  classesB4: "org.wikibrain.matrix.SparseMatrixSorter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrixTransposer"
  classesB4: "org.wikibrain.matrix.SparseMatrixTransposer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrixTransposer.RowAccumulator"
  classesB4: "org.wikibrain.matrix.SparseMatrixTransposer.RowAccumulator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.SparseMatrixWriter"
  classesB4: "org.wikibrain.matrix.SparseMatrixWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.knn.BruteForceKNNFinder"
  classesB4: "org.wikibrain.matrix.knn.BruteForceKNNFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.knn.LSHForestKNNFinder"
  classesB4: "org.wikibrain.matrix.knn.LSHForestKNNFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.matrix.knn.RandomProjectionKNNFinder"
  classesB4: "org.wikibrain.matrix.knn.RandomProjectionKNNFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.pageview.PageViewDownloader"
  classesB4: "org.wikibrain.pageview.PageViewDownloader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.pageview.PageViewLoader"
  classesB4: "org.wikibrain.pageview.PageViewLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.pageview.PageViewReader"
  classesB4: "org.wikibrain.pageview.PageViewReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.pageview.PageViewReader.PageViewIterator"
  classesB4: "org.wikibrain.pageview.PageViewReader.PageViewIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.pageview.PageViewSqlDao"
  classesB4: "org.wikibrain.pageview.PageViewSqlDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.pageview.PageViewSqlDao.Provider"
  classesB4: "org.wikibrain.pageview.PageViewSqlDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.DumpSplitter"
  classesB4: "org.wikibrain.parser.DumpSplitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.DumpSplitter.ArticleIterator"
  classesB4: "org.wikibrain.parser.DumpSplitter.ArticleIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.sql.MySqlDumpParser"
  classesB4: "org.wikibrain.parser.sql.MySqlDumpParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.sql.MySqlDumpParser.MyIterator"
  classesB4: "org.wikibrain.parser.sql.MySqlDumpParser.MyIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.InterLanguageLinkVisitor"
  classesB4: "org.wikibrain.parser.wiki.InterLanguageLinkVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.LocalCategoryVisitor"
  classesB4: "org.wikibrain.parser.wiki.LocalCategoryVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.LocalLinkVisitor"
  classesB4: "org.wikibrain.parser.wiki.LocalLinkVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.LocalLinkVisitor.Listener"
  classesB4: "org.wikibrain.parser.wiki.LocalLinkVisitor.Listener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.WikiTextDumpParser"
  classesB4: "org.wikibrain.parser.wiki.WikiTextDumpParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.WikiTextDumpParser.ParserProcedure"
  classesB4: "org.wikibrain.parser.wiki.WikiTextDumpParser.ParserProcedure"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.wiki.WikiTextParser"
  classesB4: "org.wikibrain.parser.wiki.WikiTextParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.xml.DumpPageXmlParser"
  classesB4: "org.wikibrain.parser.xml.DumpPageXmlParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.xml.DumpPageXmlParser.IteratorImpl"
  classesB4: "org.wikibrain.parser.xml.DumpPageXmlParser.IteratorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.parser.xml.PageXmlParser"
  classesB4: "org.wikibrain.parser.xml.PageXmlParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.AnchorTextPhraseAnalyzer"
  classesB4: "org.wikibrain.phrases.AnchorTextPhraseAnalyzer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.AnchorTextPhraseAnalyzer.Iter"
  classesB4: "org.wikibrain.phrases.AnchorTextPhraseAnalyzer.Iter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.AnchorTextPhraseAnalyzer.Provider"
  classesB4: "org.wikibrain.phrases.AnchorTextPhraseAnalyzer.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.BasePhraseAnalyzer"
  classesB4: "org.wikibrain.phrases.BasePhraseAnalyzer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.BasePhraseAnalyzer.Entry"
  classesB4: "org.wikibrain.phrases.BasePhraseAnalyzer.Entry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.LinkProbabilityDao"
  classesB4: "org.wikibrain.phrases.LinkProbabilityDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.LinkProbabilityDao.Provider"
  classesB4: "org.wikibrain.phrases.LinkProbabilityDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.LucenePhraseAnalyzer"
  classesB4: "org.wikibrain.phrases.LucenePhraseAnalyzer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.LucenePhraseAnalyzer.Provider"
  classesB4: "org.wikibrain.phrases.LucenePhraseAnalyzer.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.OldLucenePhraseAnalyzer"
  classesB4: "org.wikibrain.phrases.OldLucenePhraseAnalyzer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.OldLucenePhraseAnalyzer.Provider"
  classesB4: "org.wikibrain.phrases.OldLucenePhraseAnalyzer.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.StanfordPhraseAnalyzer"
  classesB4: "org.wikibrain.phrases.StanfordPhraseAnalyzer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.StanfordPhraseAnalyzer.Iter"
  classesB4: "org.wikibrain.phrases.StanfordPhraseAnalyzer.Iter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.StanfordPhraseAnalyzer.Record"
  classesB4: "org.wikibrain.phrases.StanfordPhraseAnalyzer.Record"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.phrases.StanfordPhraseAnalyzer.Provider"
  classesB4: "org.wikibrain.phrases.StanfordPhraseAnalyzer.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "ags.utils.dataStructures.IntervalHeap"
  classesB4: "ags.utils.dataStructures.IntervalHeap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.WikiBrainShapeFile"
  classesB4: "org.wikibrain.spatial.WikiBrainShapeFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.WikiBrainShapeFile.KeyAndScore"
  classesB4: "org.wikibrain.spatial.WikiBrainShapeFile.KeyAndScore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.cookbook.CalculateAllDistancePairs"
  classesB4: "org.wikibrain.spatial.cookbook.CalculateAllDistancePairs"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.cookbook.SimpleToblersLawEvaluator"
  classesB4: "org.wikibrain.spatial.cookbook.SimpleToblersLawEvaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.cookbook.tflevaluate.BipartiteEvaluatorTest"
  classesB4: "org.wikibrain.spatial.cookbook.tflevaluate.BipartiteEvaluatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.cookbook.tflevaluate.KNNEvaluator"
  classesB4: "org.wikibrain.spatial.cookbook.tflevaluate.KNNEvaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.cookbook.tflevaluate.ToblersLawEvaluator"
  classesB4: "org.wikibrain.spatial.cookbook.tflevaluate.ToblersLawEvaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.cookbook.tflevaluate.TopoEvaluator"
  classesB4: "org.wikibrain.spatial.cookbook.tflevaluate.TopoEvaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.dao.postgis.PostGISDB"
  classesB4: "org.wikibrain.spatial.dao.postgis.PostGISDB"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.dao.postgis.PostGISDB.Provider"
  classesB4: "org.wikibrain.spatial.dao.postgis.PostGISDB.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.dao.postgis.PostGISSpatialDataDao"
  classesB4: "org.wikibrain.spatial.dao.postgis.PostGISSpatialDataDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.dao.postgis.PostGISSpatialDataDao.Provider"
  classesB4: "org.wikibrain.spatial.dao.postgis.PostGISSpatialDataDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.dao.postgis.PostGISVersionChecker"
  classesB4: "org.wikibrain.spatial.dao.postgis.PostGISVersionChecker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.distance.BorderingDistanceMetric"
  classesB4: "org.wikibrain.spatial.distance.BorderingDistanceMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.distance.GeodeticDistanceMetric"
  classesB4: "org.wikibrain.spatial.distance.GeodeticDistanceMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.distance.GraphDistanceMetric"
  classesB4: "org.wikibrain.spatial.distance.GraphDistanceMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.distance.OrdinalDistanceMetric"
  classesB4: "org.wikibrain.spatial.distance.OrdinalDistanceMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.distance.SphericalDistanceMetric"
  classesB4: "org.wikibrain.spatial.distance.SphericalDistanceMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.loader.SpatialDataDownloader"
  classesB4: "org.wikibrain.spatial.loader.SpatialDataDownloader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.loader.SpatialDataLoader"
  classesB4: "org.wikibrain.spatial.loader.SpatialDataLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.loader.SpatialDataLoader.LayerInfo"
  classesB4: "org.wikibrain.spatial.loader.SpatialDataLoader.LayerInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.loader.WikidataLayerLoader"
  classesB4: "org.wikibrain.spatial.loader.WikidataLayerLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.matcher.MappedShapefileLoader"
  classesB4: "org.wikibrain.spatial.matcher.MappedShapefileLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.matcher.ShapeFileMatcher"
  classesB4: "org.wikibrain.spatial.matcher.ShapeFileMatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.matcher.ShapeFileMatcher.MappingInfo"
  classesB4: "org.wikibrain.spatial.matcher.ShapeFileMatcher.MappingInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.matcher.WikidataValueScorer"
  classesB4: "org.wikibrain.spatial.matcher.WikidataValueScorer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.spatial.util.WikiBrainSpatialUtils"
  classesB4: "org.wikibrain.spatial.util.WikiBrainSpatialUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.BaseSRMetric"
  classesB4: "org.wikibrain.sr.BaseSRMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.DirectLinkMetric"
  classesB4: "org.wikibrain.sr.DirectLinkMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.DirectLinkMetric.Provider"
  classesB4: "org.wikibrain.sr.DirectLinkMetric.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.MatrixSummarizer"
  classesB4: "org.wikibrain.sr.MatrixSummarizer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.SRBuilder"
  classesB4: "org.wikibrain.sr.SRBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.dataset.DatasetDao"
  classesB4: "org.wikibrain.sr.dataset.DatasetDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.dataset.DatasetDao.Info"
  classesB4: "org.wikibrain.sr.dataset.DatasetDao.Info"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.dataset.DatasetDao.Provider"
  classesB4: "org.wikibrain.sr.dataset.DatasetDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.ensemble.CorrelationEnsemble"
  classesB4: "org.wikibrain.sr.ensemble.CorrelationEnsemble"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.ensemble.EnsembleMetric"
  classesB4: "org.wikibrain.sr.ensemble.EnsembleMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.ensemble.EnsembleMetric.Provider"
  classesB4: "org.wikibrain.sr.ensemble.EnsembleMetric.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.ensemble.Interpolator"
  classesB4: "org.wikibrain.sr.ensemble.Interpolator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.ensemble.LinearEnsemble"
  classesB4: "org.wikibrain.sr.ensemble.LinearEnsemble"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.esa.SRConceptSpaceGenerator"
  classesB4: "org.wikibrain.sr.esa.SRConceptSpaceGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.evaluation.Evaluator"
  classesB4: "org.wikibrain.sr.evaluation.Evaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.evaluation.MostSimilarEvaluator"
  classesB4: "org.wikibrain.sr.evaluation.MostSimilarEvaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.evaluation.SimilarityEvaluator"
  classesB4: "org.wikibrain.sr.evaluation.SimilarityEvaluator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.milnewitten.MilneWittenMetric"
  classesB4: "org.wikibrain.sr.milnewitten.MilneWittenMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.milnewitten.MilneWittenMetric.Provider"
  classesB4: "org.wikibrain.sr.milnewitten.MilneWittenMetric.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.normalize.LoessNormalizer"
  classesB4: "org.wikibrain.sr.normalize.LoessNormalizer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.normalize.LoessNormalizer.Provider"
  classesB4: "org.wikibrain.sr.normalize.LoessNormalizer.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.normalize.RankAndScoreNormalizer"
  classesB4: "org.wikibrain.sr.normalize.RankAndScoreNormalizer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.normalize.RankAndScoreNormalizer.Provider"
  classesB4: "org.wikibrain.sr.normalize.RankAndScoreNormalizer.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.phrasesim.CosimilarityMatrix"
  classesB4: "org.wikibrain.sr.phrasesim.CosimilarityMatrix"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.phrasesim.EnsemblePhraseCreator"
  classesB4: "org.wikibrain.sr.phrasesim.EnsemblePhraseCreator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.phrasesim.KnownPhraseSim"
  classesB4: "org.wikibrain.sr.phrasesim.KnownPhraseSim"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.phrasesim.KnownPhraseSim.Provider"
  classesB4: "org.wikibrain.sr.phrasesim.KnownPhraseSim.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.synrank.SynRank"
  classesB4: "org.wikibrain.sr.synrank.SynRank"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.synrank.SynRank.Provider"
  classesB4: "org.wikibrain.sr.synrank.SynRank.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.utils.SrNormalizers"
  classesB4: "org.wikibrain.sr.utils.SrNormalizers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.CosineSimilarity"
  classesB4: "org.wikibrain.sr.vector.CosineSimilarity"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.CosineSimilarity.Provider"
  classesB4: "org.wikibrain.sr.vector.CosineSimilarity.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.DenseVectorSRMetric"
  classesB4: "org.wikibrain.sr.vector.DenseVectorSRMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.DenseVectorSRMetric.Provider"
  classesB4: "org.wikibrain.sr.vector.DenseVectorSRMetric.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.ESAGenerator"
  classesB4: "org.wikibrain.sr.vector.ESAGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.ESAGenerator.Provider"
  classesB4: "org.wikibrain.sr.vector.ESAGenerator.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.GoogleSimilarity"
  classesB4: "org.wikibrain.sr.vector.GoogleSimilarity"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.GoogleSimilarity.Provider"
  classesB4: "org.wikibrain.sr.vector.GoogleSimilarity.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.LinkGenerator"
  classesB4: "org.wikibrain.sr.vector.LinkGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.LinkGenerator.Provider"
  classesB4: "org.wikibrain.sr.vector.LinkGenerator.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.MostSimilarConceptsGenerator"
  classesB4: "org.wikibrain.sr.vector.MostSimilarConceptsGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.MostSimilarConceptsGenerator.Provider"
  classesB4: "org.wikibrain.sr.vector.MostSimilarConceptsGenerator.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.SparseVectorSRMetric"
  classesB4: "org.wikibrain.sr.vector.SparseVectorSRMetric"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.vector.SparseVectorSRMetric.Provider"
  classesB4: "org.wikibrain.sr.vector.SparseVectorSRMetric.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.BaseCorpusCreator"
  classesB4: "org.wikibrain.sr.wikify.BaseCorpusCreator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.MilneWittenWikifier"
  classesB4: "org.wikibrain.sr.wikify.MilneWittenWikifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.MilneWittenWikifier.Provider"
  classesB4: "org.wikibrain.sr.wikify.MilneWittenWikifier.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.WebSailWikifier"
  classesB4: "org.wikibrain.sr.wikify.WebSailWikifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.WebSailWikifier.Provider"
  classesB4: "org.wikibrain.sr.wikify.WebSailWikifier.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.WikiTextCorpusCreator"
  classesB4: "org.wikibrain.sr.wikify.WikiTextCorpusCreator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.wikify.WikiTextCorpusCreator.RawPageTextIterator"
  classesB4: "org.wikibrain.sr.wikify.WikiTextCorpusCreator.RawPageTextIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.word2vec.Word2Phrase"
  classesB4: "org.wikibrain.sr.word2vec.Word2Phrase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.word2vec.Word2VecGenerator"
  classesB4: "org.wikibrain.sr.word2vec.Word2VecGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.word2vec.Word2VecGenerator.Provider"
  classesB4: "org.wikibrain.sr.word2vec.Word2VecGenerator.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.word2vec.Word2VecTrainer"
  classesB4: "org.wikibrain.sr.word2vec.Word2VecTrainer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.sr.word2vec.Word2VecTrainer.Node"
  classesB4: "org.wikibrain.sr.word2vec.Word2VecTrainer.Node"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.conf.Configurator"
  classesB4: "org.wikibrain.conf.Configurator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.conf.Configurator.ProviderSet"
  classesB4: "org.wikibrain.conf.Configurator.ProviderSet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.conf.ProviderFilter"
  classesB4: "org.wikibrain.conf.ProviderFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.utils.JvmUtils"
  classesB4: "org.wikibrain.utils.JvmUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.utils.ObjectDb"
  classesB4: "org.wikibrain.utils.ObjectDb"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.utils.ParallelForEach"
  classesB4: "org.wikibrain.utils.ParallelForEach"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.utils.ParallelForEach.ThreadPoolErrors"
  classesB4: "org.wikibrain.utils.ParallelForEach.ThreadPoolErrors"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.utils.ParallelForEach.BoundedExecutor"
  classesB4: "org.wikibrain.utils.ParallelForEach.BoundedExecutor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.WikidataDumpLoader"
  classesB4: "org.wikibrain.wikidata.WikidataDumpLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.WikidataDumpParser"
  classesB4: "org.wikibrain.wikidata.WikidataDumpParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.WikidataDumpParser.IteratorImpl"
  classesB4: "org.wikibrain.wikidata.WikidataDumpParser.IteratorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.WikidataParser"
  classesB4: "org.wikibrain.wikidata.WikidataParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.WikidataSqlDao"
  classesB4: "org.wikibrain.wikidata.WikidataSqlDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.WikidataSqlDao.Provider"
  classesB4: "org.wikibrain.wikidata.WikidataSqlDao.Provider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.wikibrain.wikidata.CreateTestDump"
  classesB4: "org.wikibrain.wikidata.CreateTestDump"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "wikAPIdia"
commit: "wikAPIdia"
tooBig: false

refactorings {
  classesAftr: "com.blaze.JobUtility"
  classesB4: "com.blaze.BzmServiceManager"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "com.blaze.agent.AgentListener"
  classesB4: "com.blaze.agent.AgentListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "BzmServiceManager"
      }
    }
    dtAftr {
      simpleType {
        name: "JobUtility"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bzmServiceManager"
    nameaftr: "bzmServiceManager"
    classb4: "com.blaze.agent.AgentListener"
    classAftr: "com.blaze.agent.AgentListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.blaze.agent.AgentListener"
  classesB4: "com.blaze.agent.AgentListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.agent.BzmBuildProcess"
  classesB4: "com.blaze.agent.BzmBuildProcess"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.agent.BzmBuildProcess"
  classesB4: "com.blaze.agent.BzmBuildProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "BzmServiceManager"
      }
    }
    dtAftr {
      simpleType {
        name: "JobUtility"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bzmServMan"
    nameaftr: "jobUtil"
    classb4: "com.blaze.agent.BzmBuildProcess"
    classAftr: "com.blaze.agent.BzmBuildProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.blaze.agent.BzmBuildProcess"
  classesB4: "com.blaze.agent.BzmBuildProcess"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  typeChange {
    dtB4 {
      prmtv {
        name: "boolean"
      }
    }
    dtAftr {
      simpleType {
        name: "JSONObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "stopTest"
    nameaftr: "stopTest"
    classb4: "com.blaze.api.Api"
    classAftr: "com.blaze.api.Api"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      prmtv {
        name: "void"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "terminateTest"
    nameaftr: "terminateTest"
    classb4: "com.blaze.api.Api"
    classAftr: "com.blaze.api.Api"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  typeChange {
    dtB4 {
      simpleType {
        name: "UrlManagerV3Impl"
      }
    }
    dtAftr {
      simpleType {
        name: "UrlManager"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "urlManager"
    nameaftr: "urlManager"
    classb4: "com.blaze.api.ApiV3Impl"
    classAftr: "com.blaze.api.ApiV3Impl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  typeChange {
    dtB4 {
      prmtv {
        name: "boolean"
      }
    }
    dtAftr {
      simpleType {
        name: "JSONObject"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "stopTest"
    nameaftr: "stopTest"
    classb4: "com.blaze.api.ApiV3Impl"
    classAftr: "com.blaze.api.ApiV3Impl"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      prmtv {
        name: "void"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "terminateTest"
    nameaftr: "terminateTest"
    classb4: "com.blaze.api.ApiV3Impl"
    classAftr: "com.blaze.api.ApiV3Impl"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "HashMap"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "startTest"
    nameaftr: "startTest"
    classb4: "com.blaze.api.ApiV3Impl"
    classAftr: "com.blaze.api.ApiV3Impl"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  typeChange {
    dtB4 {
      simpleType {
        name: "TestType"
      }
    }
    dtAftr {
      prmtv {
        name: "boolean"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "testType"
    nameaftr: "collection"
    classb4: "com.blaze.api.ApiV3Impl"
    classAftr: "com.blaze.api.ApiV3Impl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.ApiV3Impl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.api.urlmanager.UrlManager"
  classesB4: "com.blaze.api.urlmanager.UrlManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.api.urlmanager.UrlManagerV3Impl"
  classesB4: "com.blaze.api.urlmanager.UrlManagerV3Impl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "com.blaze.api.urlmanager.UrlManagerV3Impl"
  classesB4: "com.blaze.api.urlmanager.UrlManagerV3Impl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.runner.Constants"
  classesB4: "com.blaze.runner.Constants"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.runner.JsonConstants"
  classesB4: "com.blaze.runner.JsonConstants"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.utils.Utils"
  classesB4: "com.blaze.utils.Utils"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "com.blaze.utils.Utils"
  classesB4: "com.blaze.utils.Utils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.JobUtility"
  classesB4: "com.blaze.BzmServiceManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "BzmServiceManager"
      }
    }
    dtAftr {
      simpleType {
        name: "JobUtility"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getBzmServiceManager"
    nameaftr: "getJobUtil"
    classb4: "com.blaze.BzmServiceManager"
    classAftr: "com.blaze.JobUtility"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.JobUtility"
  classesB4: "com.blaze.BzmServiceManager"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "com.blaze.JobUtility"
  classesB4: "com.blaze.BzmServiceManager"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.JobUtility"
  classesB4: "com.blaze.BzmServiceManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "BzmServiceManager"
      }
    }
    dtAftr {
      simpleType {
        name: "JobUtility"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bzmServiceManager"
    nameaftr: "jobUtility"
    classb4: "com.blaze.BzmServiceManager"
    classAftr: "com.blaze.JobUtility"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.blaze.JobUtility"
  classesB4: "com.blaze.BzmServiceManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.ApiV3Impl"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.BzmHttpWrapper"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.BzmHttpWrapper"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.BzmHttpWrapper"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.BzmHttpWrapper"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.ApiV3Impl"
  classesB4: "com.blaze.api.BzmHttpWrapper"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "HashMap"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "startTest"
    nameaftr: "startTest"
    classb4: "com.blaze.api.Api"
    classAftr: "com.blaze.api.Api"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.blaze.api.Api"
  classesB4: "com.blaze.api.Api"
  typeChange {
    dtB4 {
      simpleType {
        name: "TestType"
      }
    }
    dtAftr {
      prmtv {
        name: "boolean"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "testType"
    nameaftr: "collection"
    classb4: "com.blaze.api.Api"
    classAftr: "com.blaze.api.Api"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.blaze.api.urlmanager.UrlManager"
  classesB4: "com.blaze.api.urlmanager.UrlManager"
  refactoringType: "RENAME_METHOD"
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "boolean"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "org.json.JSONObject"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "boolean"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "org.json.JSONObject"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "boolean"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "org.json.JSONObject"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "boolean"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.blaze.api.urlmanager.UrlManagerV3Impl"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "com.blaze.api.urlmanager.UrlManager"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.blaze.api.urlmanager.UrlManagerV3Impl"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "com.blaze.api.urlmanager.UrlManager"
              typeOfType: Internal
            }
          }
          chng {
            from: "com.blaze.api.urlmanager.UrlManagerV3Impl"
            to: "com.blaze.api.urlmanager.UrlManager"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.blaze.api.urlmanager.UrlManagerV3Impl"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "com.blaze.api.urlmanager.UrlManager"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.blaze.api.urlmanager.UrlManagerV3Impl"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.blaze.api.urlmanager.UrlManager"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.blaze.api.urlmanager.UrlManagerV3Impl"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.HashMap"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.HashMap"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.JSONObject"
      typeOfType: Internal
    }
  }
  aftr {
    prmtv {
      name: "void"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "org.json.JSONObject"
        typeOfType: Internal
      }
    }
    aftr {
      prmtv {
        name: "void"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "org.json.JSONObject"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "void"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.JSONObject"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.blaze.BzmServiceManager"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "com.blaze.JobUtility"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.blaze.BzmServiceManager"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "com.blaze.JobUtility"
              typeOfType: Internal
            }
          }
          chng {
            from: "com.blaze.BzmServiceManager"
            to: "com.blaze.JobUtility"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.blaze.BzmServiceManager"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "com.blaze.JobUtility"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.blaze.BzmServiceManager"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.blaze.JobUtility"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.blaze.BzmServiceManager"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.blaze.api.TestType"
      typeOfType: Internal
    }
  }
  aftr {
    prmtv {
      name: "boolean"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "com.blaze.api.TestType"
        typeOfType: Internal
      }
    }
    aftr {
      prmtv {
        name: "boolean"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "com.blaze.api.TestType"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "boolean"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.blaze.api.TestType"
        typeOfType: Internal
      }
    }
  }
}
project: "blazemeter-teamcity-plugin"
commit: "blazemeter-teamcity-plugin"
tooBig: false

refactorings {
  classesAftr: "Main"
  classesB4: "Main"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "database.ContentDao"
  classesB4: "database.ContentDao"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "database.ContentDao"
  classesB4: "database.ContentDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "server.JsonConverter"
  classesB4: "server.JsonConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "server.TCPServer"
  classesB4: "server.TCPServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "server.command.Request"
  classesB4: "server.command.Request"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "params"
    nameaftr: "params"
    classb4: "server.command.Request"
    classAftr: "server.command.Request"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "server.command.Request"
  classesB4: "server.command.Request"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getParams"
    nameaftr: "getParams"
    classb4: "server.command.Request"
    classAftr: "server.command.Request"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "server.command.Request"
  classesB4: "server.command.Request"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "params"
    nameaftr: "params"
    classb4: "server.command.Request"
    classAftr: "server.command.Request"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "server.command.Request"
  classesB4: "server.command.Request"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "itunes.JsonConverterTest"
  classesB4: "itunes.JsonConverterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "tcp.TCPPClient"
  classesB4: "tcp.TCPPClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "server.ConnectionHandler"
  classesB4: "server.TCPServer"
  refactoringType: "EXTRACT_CLASS"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "Map"
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "Map"
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "java.lang.Object"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "java.lang.String"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "java.lang.Object"
                  to: "java.lang.String"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Object"
        typeOfType: Jdk
      }
    }
  }
}
project: "airStage"
commit: "airStage"
tooBig: false

refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Config"
  classesB4: "net.anthavio.httl.HttpClient3Config"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlSender.NullSafeStringComparator"
  classesB4: "net.anthavio.httl.HttpSender.NullSafeStringComparator"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettySenderConfig"
  classesB4: "net.anthavio.httl.JettySenderConfig"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Response"
  classesB4: "net.anthavio.httl.HttpClient3Response"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Config"
  classesB4: "net.anthavio.httl.HttpClient4Config"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Response"
  classesB4: "net.anthavio.httl.HttpClient4Response"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlConstants"
  classesB4: "net.anthavio.httl.Constants"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport"
  classesB4: "net.anthavio.httl.NettySender"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders"
  classesB4: "net.anthavio.httl.SenderRequestBuilders"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.GsonMarshaller"
  classesB4: "net.anthavio.httl.inout.GsonRequestMarshaller"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Jackson1Marshaller"
  classesB4: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Jackson2Marshaller"
  classesB4: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.JaxbMarshaller"
  classesB4: "net.anthavio.httl.inout.JaxbRequestMarshaller"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.RequestMarshaller"
  classesB4: "net.anthavio.httl.inout.RequestBodyMarshaller"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Marshallers"
  classesB4: "net.anthavio.httl.inout.RequestBodyMarshallers"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
  classesB4: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.SimpleXmlMarshaller"
  classesB4: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
  classesB4: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport"
  classesB4: "net.anthavio.httl.HttpClient3Sender"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.SenderBuilder"
  classesB4: "net.anthavio.httl.HttpSenderConfig"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlResponse"
  classesB4: "net.anthavio.httl.HttpURLResponse"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.PseudoStream"
  classesB4: "net.anthavio.httl.SenderBodyRequest.FakeStream"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseStatusException"
  classesB4: "net.anthavio.httl.SenderHttpStatusException"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlResponse"
  classesB4: "net.anthavio.httl.SenderResponse"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaParam"
  refactoringType: "MOVE_RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheBase"
  classesB4: "net.anthavio.cache.CacheBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheEntry"
  classesB4: "net.anthavio.cache.CacheEntry"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheEntry"
  classesB4: "net.anthavio.cache.CacheEntry"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheEntry"
  classesB4: "net.anthavio.cache.CacheEntry"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheEntry"
  classesB4: "net.anthavio.cache.CacheEntry"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheEntry"
  classesB4: "net.anthavio.cache.CacheEntry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.ConfiguredCacheLoader"
  classesB4: "net.anthavio.cache.ConfiguredCacheLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.ConfiguredCacheLoader.MissingFailedRecipe"
  classesB4: "net.anthavio.cache.ConfiguredCacheLoader.MissingFailedRecipe"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.ConfiguredCacheLoader.ExpiredFailedRecipe"
  classesB4: "net.anthavio.cache.ConfiguredCacheLoader.ExpiredFailedRecipe"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.ConfiguredCacheLoader.SimpleLoader"
  classesB4: "net.anthavio.cache.ConfiguredCacheLoader.SimpleLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.ExtractionOperations"
  classesB4: "net.anthavio.httl.ExtractionOperations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.SenderOperations"
  classesB4: "net.anthavio.httl.SenderOperations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.BaseRequestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "execute"
    nameaftr: "execute"
    classb4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "V"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "V"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "V"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "V"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "V"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "V"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.CachingRequestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
    classAftr: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  classesB4: "net.anthavio.httl.cache.Builders.ExtractingRequestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachedResponse"
  classesB4: "net.anthavio.httl.cache.CachedResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachedResponse"
    classAftr: "net.anthavio.httl.cache.CachedResponse"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachedResponse"
  classesB4: "net.anthavio.httl.cache.CachedResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getRequest"
    nameaftr: "getRequest"
    classb4: "net.anthavio.httl.cache.CachedResponse"
    classAftr: "net.anthavio.httl.cache.CachedResponse"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachedResponse"
  classesB4: "net.anthavio.httl.cache.CachedResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachedResponse"
    classAftr: "net.anthavio.httl.cache.CachedResponse"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachedResponse"
  classesB4: "net.anthavio.httl.cache.CachedResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachedResponse"
    classAftr: "net.anthavio.httl.cache.CachedResponse"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachedResponse"
  classesB4: "net.anthavio.httl.cache.CachedResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachedResponse"
    classAftr: "net.anthavio.httl.cache.CachedResponse"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachedResponse"
  classesB4: "net.anthavio.httl.cache.CachedResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getSender"
    nameaftr: "getSender"
    classb4: "net.anthavio.httl.cache.CachingExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "bodyResponse"
    nameaftr: "bodyResponse"
    classb4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
    classAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  classesB4: "net.anthavio.httl.cache.CachingExtractor.SimpleHttpSenderExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getExtractor"
    nameaftr: "getExtractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingExtractorRequest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorRequest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getSender"
    nameaftr: "getSender"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "execute"
    nameaftr: "execute"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSender"
    classAftr: "net.anthavio.httl.cache.CachingSender"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender"
  classesB4: "net.anthavio.httl.cache.CachingSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  classesB4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
    classAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  classesB4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
    classAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  classesB4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
    classAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  classesB4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
    classAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  classesB4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
    classAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  classesB4: "net.anthavio.httl.cache.CachingSender.SimpleHttpSenderLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  classesB4: "net.anthavio.httl.cache.CachingSenderRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingSenderRequest"
    classAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  classesB4: "net.anthavio.httl.cache.CachingSenderRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getSenderRequest"
    nameaftr: "getSenderRequest"
    classb4: "net.anthavio.httl.cache.CachingSenderRequest"
    classAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  classesB4: "net.anthavio.httl.cache.CachingSenderRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingSenderRequest"
    classAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  classesB4: "net.anthavio.httl.cache.CachingSenderRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingSenderRequest"
    classAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  classesB4: "net.anthavio.httl.cache.CachingSenderRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "senderRequest"
    nameaftr: "senderRequest"
    classb4: "net.anthavio.httl.cache.CachingSenderRequest"
    classAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderRequest"
  classesB4: "net.anthavio.httl.cache.CachingSenderRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.CodeGeneratingHandler"
  classesB4: "net.anthavio.httl.util.CodeGeneratingHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.util.CodeGeneratingHandler"
    classAftr: "net.anthavio.httl.util.CodeGeneratingHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.CodeGeneratingHandler"
  classesB4: "net.anthavio.httl.util.CodeGeneratingHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.util.CodeGeneratingHandler"
    classAftr: "net.anthavio.httl.util.CodeGeneratingHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.CodeGeneratingHandler"
  classesB4: "net.anthavio.httl.util.CodeGeneratingHandler"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.CodeGeneratingHandler"
  classesB4: "net.anthavio.httl.util.CodeGeneratingHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.Cutils"
  classesB4: "net.anthavio.httl.util.Cutils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpDateUtil"
  classesB4: "net.anthavio.httl.util.HttpDateUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.util.HttpHeaderUtil"
    classAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.util.HttpHeaderUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockResponse"
  classesB4: "net.anthavio.httl.util.MockResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.util.MockResponse"
    classAftr: "net.anthavio.httl.util.MockResponse"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockResponse"
  classesB4: "net.anthavio.httl.util.MockResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheTest"
  classesB4: "net.anthavio.cache.CacheTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.cache.CacheTest.TestSimpleLoader"
  classesB4: "net.anthavio.cache.CacheTest.TestSimpleLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.AuthenticationTest"
  classesB4: "net.anthavio.httl.AuthenticationTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.AuthenticationTest"
    classAftr: "net.anthavio.httl.AuthenticationTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.AuthenticationTest"
  classesB4: "net.anthavio.httl.AuthenticationTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpURLConfig"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUrlConfig"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "config"
    nameaftr: "config"
    classb4: "net.anthavio.httl.AuthenticationTest"
    classAftr: "net.anthavio.httl.AuthenticationTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.AuthenticationTest"
  classesB4: "net.anthavio.httl.AuthenticationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient4Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response1"
    nameaftr: "response1"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response2"
    nameaftr: "response2"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "responsea"
    nameaftr: "responsea"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "responseb"
    nameaftr: "responseb"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "responsec"
    nameaftr: "responsec"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response1"
    nameaftr: "response1"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response2"
    nameaftr: "response2"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response3"
    nameaftr: "response3"
    classb4: "net.anthavio.httl.ConnectionPoolingTest"
    classAftr: "net.anthavio.httl.ConnectionPoolingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ConnectionPoolingTest"
  classesB4: "net.anthavio.httl.ConnectionPoolingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.JokerServer"
  classesB4: "net.anthavio.httl.JokerServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.JokerServer.RequestHandler"
  classesB4: "net.anthavio.httl.JokerServer.RequestHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient3Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient4Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "TestResponse"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "TestResponse"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient4Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.MarshallingExtractingTest"
    classAftr: "net.anthavio.httl.MarshallingExtractingTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MarshallingExtractingTest"
  classesB4: "net.anthavio.httl.MarshallingExtractingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseBodyExtractor"
  classesB4: "net.anthavio.httl.TestResponseBodyExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.TestResponseBodyExtractor"
    classAftr: "net.anthavio.httl.TestResponseBodyExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseBodyExtractor"
  classesB4: "net.anthavio.httl.TestResponseBodyExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.TestResponseBodyExtractor"
    classAftr: "net.anthavio.httl.TestResponseBodyExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseBodyExtractor"
  classesB4: "net.anthavio.httl.TestResponseBodyExtractor"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseBodyExtractor"
  classesB4: "net.anthavio.httl.TestResponseBodyExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getRequest"
    nameaftr: "getRequest"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getResponse"
    nameaftr: "getResponse"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "request"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Exception"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "exception"
    nameaftr: "response"
    classb4: "net.anthavio.httl.TestResponseHandler"
    classAftr: "net.anthavio.httl.TestResponseHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "net.anthavio.httl.TestResponseHandler"
  classesB4: "net.anthavio.httl.TestResponseHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.MockTest"
  classesB4: "net.anthavio.httl.MockTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "byte"
              }
            }
            dim: 1
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "byte"
              }
            }
            dim: 1
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.MockTest"
    classAftr: "net.anthavio.httl.MockTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MockTest"
  classesB4: "net.anthavio.httl.MockTest"
  refactoringType: "SPLIT_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MockTest"
  classesB4: "net.anthavio.httl.MockTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.MockTest"
    classAftr: "net.anthavio.httl.MockTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MockTest"
  classesB4: "net.anthavio.httl.MockTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract2"
    nameaftr: "extract2"
    classb4: "net.anthavio.httl.MockTest"
    classAftr: "net.anthavio.httl.MockTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.MockTest"
  classesB4: "net.anthavio.httl.MockTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SimpleXmlRequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "SimpleXmlMarshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Jackson2RequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "Jackson2Marshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Jackson1RequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "Jackson1Marshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GsonRequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "GsonMarshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JaxbRequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "JaxbMarshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.OptionalLibTest"
    classAftr: "net.anthavio.httl.OptionalLibTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.OptionalLibTest"
  classesB4: "net.anthavio.httl.OptionalLibTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.RequestTest"
  classesB4: "net.anthavio.httl.RequestTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpURLSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "newSimple"
    nameaftr: "newSimple"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient3Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "newHttp3"
    nameaftr: "newHttp3"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient4Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "newHttp4"
    nameaftr: "newHttp4"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JettySender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "newJetty"
    nameaftr: "newJetty"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpURLConfig"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUrlConfig"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "config"
    nameaftr: "config"
    classb4: "net.anthavio.httl.TimeoutsTest"
    classAftr: "net.anthavio.httl.TimeoutsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.TimeoutsTest"
  classesB4: "net.anthavio.httl.TimeoutsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.UtilTest"
  classesB4: "net.anthavio.httl.UtilTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.UtilTest"
    classAftr: "net.anthavio.httl.UtilTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.UtilTest"
  classesB4: "net.anthavio.httl.UtilTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest"
  classesB4: "net.anthavio.httl.api.AdlTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "RequestBodyMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "RequestMarshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.api.AdlTest"
    classAftr: "net.anthavio.httl.api.AdlTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest"
  classesB4: "net.anthavio.httl.api.AdlTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "RequestInterceptor"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequestInterceptor"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "requestInterceptor"
    nameaftr: "requestInterceptor"
    classb4: "net.anthavio.httl.api.AdlTest"
    classAftr: "net.anthavio.httl.api.AdlTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest"
  classesB4: "net.anthavio.httl.api.AdlTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "ResponseInterceptor"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponseInterceptor"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "responseInterceptor"
    nameaftr: "responseInterceptor"
    classb4: "net.anthavio.httl.api.AdlTest"
    classAftr: "net.anthavio.httl.api.AdlTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest"
  classesB4: "net.anthavio.httl.api.AdlTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "ResponseHandler"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponseHandler"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "reponseHandler"
    nameaftr: "reponseHandler"
    classb4: "net.anthavio.httl.api.AdlTest"
    classAftr: "net.anthavio.httl.api.AdlTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest"
  classesB4: "net.anthavio.httl.api.AdlTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "ResponseExtractor"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.api.AdlTest"
    classAftr: "net.anthavio.httl.api.AdlTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest"
  classesB4: "net.anthavio.httl.api.AdlTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.AdlTest.GitHubApi"
  classesB4: "net.anthavio.httl.api.AdlTest.GitHubApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockSender"
      }
    }
    dtAftr {
      simpleType {
        name: "MockTransport"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "transport"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "returnResponse"
    nameaftr: "returnResponse"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Jackson2RequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "Jackson2Marshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "jrm"
    nameaftr: "jrm"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "beanIn"
    nameaftr: "beanIn"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "returnResponsePostBean"
    nameaftr: "returnResponsePostBean"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "returnBeanPostBean"
    nameaftr: "returnBeanPostBean"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "returnBeanPostString"
    nameaftr: "returnBeanPostString"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockSender"
      }
    }
    dtAftr {
      simpleType {
        name: "MockTransport"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "transport"
    classb4: "net.anthavio.httl.api.BasicApiTest"
    classAftr: "net.anthavio.httl.api.BasicApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest"
  classesB4: "net.anthavio.httl.api.BasicApiTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  classesB4: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "returnResponse"
    nameaftr: "returnResponse"
    classb4: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
    classAftr: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  classesB4: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "returnBeanPostString"
    nameaftr: "returnBeanPostString"
    classb4: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
    classAftr: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  classesB4: "net.anthavio.httl.api.BasicApiTest.SimpleApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "Parameters"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "parameters"
    nameaftr: "parameters"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockSender"
      }
    }
    dtAftr {
      simpleType {
        name: "MockTransport"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "transport"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "Parameters"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "parameters"
    nameaftr: "parameters"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Jackson2RequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "Jackson2Marshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "jrm"
    nameaftr: "jrm"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "input"
    nameaftr: "input"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "asXml"
    nameaftr: "asXml"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "asJson"
    nameaftr: "asJson"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockSender"
      }
    }
    dtAftr {
      simpleType {
        name: "MockTransport"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "transport"
    classb4: "net.anthavio.httl.api.ComplexApiTest"
    classAftr: "net.anthavio.httl.api.ComplexApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest"
  classesB4: "net.anthavio.httl.api.ComplexApiTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest.SomeApi"
  classesB4: "net.anthavio.httl.api.ComplexApiTest.SomeApi"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "options"
    nameaftr: "options"
    classb4: "net.anthavio.httl.api.ComplexApiTest.SomeApi"
    classAftr: "net.anthavio.httl.api.ComplexApiTest.SomeApi"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest.SomeApi"
  classesB4: "net.anthavio.httl.api.ComplexApiTest.SomeApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockRequestInterceptor"
      }
    }
    dtAftr {
      simpleType {
        name: "MockBuilderInterceptor"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "reqinc"
    nameaftr: "bldinc"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockResponseInterceptor"
      }
    }
    dtAftr {
      simpleType {
        name: "MockExecutionInterceptor"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "resinc"
    nameaftr: "exeinc"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockSender"
      }
    }
    dtAftr {
      simpleType {
        name: "MockTransport"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "transport"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "bean"
    nameaftr: "bean"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockSender"
      }
    }
    dtAftr {
      simpleType {
        name: "MockTransport"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "transport"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "bean"
    nameaftr: "bean"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "bean"
    nameaftr: "bean"
    classb4: "net.anthavio.httl.api.SpecialApiTest"
    classAftr: "net.anthavio.httl.api.SpecialApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest"
  classesB4: "net.anthavio.httl.api.SpecialApiTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.SpecialApi"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.SpecialApi"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "customSetter"
    nameaftr: "customSetter"
    classb4: "net.anthavio.httl.api.SpecialApiTest.SpecialApi"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.SpecialApi"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.SpecialApi"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.SpecialApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastRequest"
    nameaftr: "lastRequest"
    classb4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getLastRequest"
    nameaftr: "getLastRequest"
    classb4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastResponse"
    nameaftr: "lastResponse"
    classb4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getLastResponse"
    nameaftr: "getLastResponse"
    classb4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.PageableSetter"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.PageableSetter"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "HttlRequestBuilder"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.api.SpecialApiTest.PageableSetter"
    classAftr: "net.anthavio.httl.api.SpecialApiTest.PageableSetter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.SpecialApiTest.PageableSetter"
  classesB4: "net.anthavio.httl.api.SpecialApiTest.PageableSetter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Future"
          }
        }
        params {
          simpleType {
            name: "SenderResponse"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Future"
          }
        }
        params {
          simpleType {
            name: "HttlResponse"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "future"
    nameaftr: "future"
    classb4: "net.anthavio.httl.async.AsyncTest"
    classAftr: "net.anthavio.httl.async.AsyncTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Future"
          }
        }
        params {
          simpleType {
            name: "SenderResponse"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Future"
          }
        }
        params {
          simpleType {
            name: "HttlResponse"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "future2"
    nameaftr: "future2"
    classb4: "net.anthavio.httl.async.AsyncTest"
    classAftr: "net.anthavio.httl.async.AsyncTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response2"
    nameaftr: "response2"
    classb4: "net.anthavio.httl.async.AsyncTest"
    classAftr: "net.anthavio.httl.async.AsyncTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Future"
          }
        }
        params {
          simpleType {
            name: "SenderResponse"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Future"
          }
        }
        params {
          simpleType {
            name: "HttlResponse"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "future3"
    nameaftr: "future3"
    classb4: "net.anthavio.httl.async.AsyncTest"
    classAftr: "net.anthavio.httl.async.AsyncTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response3"
    nameaftr: "response3"
    classb4: "net.anthavio.httl.async.AsyncTest"
    classAftr: "net.anthavio.httl.async.AsyncTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response5"
    nameaftr: "response5"
    classb4: "net.anthavio.httl.async.AsyncTest"
    classAftr: "net.anthavio.httl.async.AsyncTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.async.AsyncTest"
  classesB4: "net.anthavio.httl.async.AsyncTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorTest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorTest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorTest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.cache.CachingExtractorTest"
    classAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingExtractorTest"
  classesB4: "net.anthavio.httl.cache.CachingExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response1"
    nameaftr: "response1"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response2"
    nameaftr: "response2"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response3"
    nameaftr: "response3"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response4"
    nameaftr: "response4"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract1"
    nameaftr: "extract1"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract2"
    nameaftr: "extract2"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract3"
    nameaftr: "extract3"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract4"
    nameaftr: "extract4"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract1"
    nameaftr: "extract1"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract2"
    nameaftr: "extract2"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response2"
    nameaftr: "response2"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "SenderBodyRequestBuilder"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request2"
    nameaftr: "request2"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response2"
    nameaftr: "response2"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response3"
    nameaftr: "response3"
    classb4: "net.anthavio.httl.cache.CachingSenderTest"
    classAftr: "net.anthavio.httl.cache.CachingSenderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.cache.CachingSenderTest"
  classesB4: "net.anthavio.httl.cache.CachingSenderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extracted1"
    nameaftr: "extracted1"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient4Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient4Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "http4sender"
    nameaftr: "http4sender"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient3Sender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "http3sender"
    nameaftr: "http3sender"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "HttpbinOut"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "HttpbinOut"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Jackson2RequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "Jackson2Marshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "jsonMarshaller"
    nameaftr: "jsonMarshaller"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "JaxbRequestMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "JaxbMarshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "requestMarshaller"
    nameaftr: "requestMarshaller"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getusers"
    nameaftr: "getusers"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.example.ExamplesTest"
    classAftr: "net.anthavio.httl.example.ExamplesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.ExamplesTest"
  classesB4: "net.anthavio.httl.example.ExamplesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.HttpbinIn"
  classesB4: "net.anthavio.httl.example.HttpbinIn"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.example.HttpbinOut"
  classesB4: "net.anthavio.httl.example.HttpbinOut"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.jaxrs.JaxRsTest"
  classesB4: "net.anthavio.httl.jaxrs.JaxRsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Config"
  classesB4: "net.anthavio.httl.HttpClient3Config"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlSender.NullSafeStringComparator"
  classesB4: "net.anthavio.httl.HttpSender.NullSafeStringComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettySenderConfig"
  classesB4: "net.anthavio.httl.JettySenderConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Response"
  classesB4: "net.anthavio.httl.HttpClient3Response"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.HttpClient3Response"
    classAftr: "net.anthavio.httl.impl.HttpClient3Response"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Response"
  classesB4: "net.anthavio.httl.HttpClient3Response"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Config"
  classesB4: "net.anthavio.httl.HttpClient4Config"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Response"
  classesB4: "net.anthavio.httl.HttpClient4Response"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.HttpClient4Response"
    classAftr: "net.anthavio.httl.impl.HttpClient4Response"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Response"
  classesB4: "net.anthavio.httl.HttpClient4Response"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettySenderConfig.SimpleRealm"
  classesB4: "net.anthavio.httl.JettySenderConfig.SimpleRealm"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport.HttpClientPipelineFactory"
  classesB4: "net.anthavio.httl.NettySender.HttpClientPipelineFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport.HttpResponseHandler"
  classesB4: "net.anthavio.httl.NettySender.HttpResponseHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderNobodyRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderNobodyRequestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
    classAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  classesB4: "net.anthavio.httl.SenderRequestBuilders.SenderRequestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport.ObjectEntity"
  classesB4: "net.anthavio.httl.HttpClient3Sender.ObjectEntity"
  typeChange {
    dtB4 {
      simpleType {
        name: "RequestBodyMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "RequestMarshaller"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.HttpClient3Sender.ObjectEntity"
    classAftr: "net.anthavio.httl.impl.HttpClient3Transport.ObjectEntity"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport.ObjectEntity"
  classesB4: "net.anthavio.httl.HttpClient3Sender.ObjectEntity"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport.ObjectHttpEntity"
  classesB4: "net.anthavio.httl.HttpClient4Sender.ObjectHttpEntity"
  typeChange {
    dtB4 {
      simpleType {
        name: "RequestBodyMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "RequestMarshaller"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.HttpClient4Sender.ObjectHttpEntity"
    classAftr: "net.anthavio.httl.impl.HttpClient4Transport.ObjectHttpEntity"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport.ObjectHttpEntity"
  classesB4: "net.anthavio.httl.HttpClient4Sender.ObjectHttpEntity"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport.JettyContentExchange"
  classesB4: "net.anthavio.httl.JettySender.JettyContentExchange"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlConstants"
  classesB4: "net.anthavio.httl.Constants"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport"
  classesB4: "net.anthavio.httl.NettySender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "doExecute"
    nameaftr: "call"
    classb4: "net.anthavio.httl.NettySender"
    classAftr: "net.anthavio.httl.impl.NettyTransport"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport"
  classesB4: "net.anthavio.httl.NettySender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.NettySender"
    classAftr: "net.anthavio.httl.impl.NettyTransport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport"
  classesB4: "net.anthavio.httl.NettySender"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.NettyTransport"
  classesB4: "net.anthavio.httl.NettySender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders"
  classesB4: "net.anthavio.httl.SenderRequestBuilders"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.GsonMarshaller"
  classesB4: "net.anthavio.httl.inout.GsonRequestMarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Jackson1Marshaller"
  classesB4: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Jackson2Marshaller"
  classesB4: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.JaxbMarshaller"
  classesB4: "net.anthavio.httl.inout.JaxbRequestMarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.RequestMarshaller"
  classesB4: "net.anthavio.httl.inout.RequestBodyMarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Marshallers"
  classesB4: "net.anthavio.httl.inout.RequestBodyMarshallers"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "RequestBodyMarshaller"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "RequestMarshaller"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "marshallers"
    nameaftr: "marshallers"
    classb4: "net.anthavio.httl.inout.RequestBodyMarshallers"
    classAftr: "net.anthavio.httl.inout.Marshallers"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Marshallers"
  classesB4: "net.anthavio.httl.inout.RequestBodyMarshallers"
  typeChange {
    dtB4 {
      simpleType {
        name: "RequestBodyMarshaller"
      }
    }
    dtAftr {
      simpleType {
        name: "RequestMarshaller"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "marshaller"
    nameaftr: "marshaller"
    classb4: "net.anthavio.httl.inout.RequestBodyMarshallers"
    classAftr: "net.anthavio.httl.inout.Marshallers"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.Marshallers"
  classesB4: "net.anthavio.httl.inout.RequestBodyMarshallers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
  classesB4: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
    classAftr: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
  classesB4: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.inout.SimpleXmlMarshaller"
  classesB4: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
  classesB4: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
  typeChange {
    dtB4 {
      simpleType {
        name: "SomeBean"
      }
    }
    dtAftr {
      simpleType {
        name: "SomeBodyBean"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "other"
    nameaftr: "other"
    classb4: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
    classAftr: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
  classesB4: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport"
  classesB4: "net.anthavio.httl.HttpClient3Sender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.HttpClient3Sender"
    classAftr: "net.anthavio.httl.impl.HttpClient3Transport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport"
  classesB4: "net.anthavio.httl.HttpClient3Sender"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport"
  classesB4: "net.anthavio.httl.HttpClient3Sender"
  refactoringType: "SPLIT_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient3Transport"
  classesB4: "net.anthavio.httl.HttpClient3Sender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.HttpClient4Sender"
    classAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  refactoringType: "SPLIT_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpClient4Transport"
  classesB4: "net.anthavio.httl.HttpClient4Sender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.SenderBuilder"
  classesB4: "net.anthavio.httl.HttpSenderConfig"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.SenderBuilder"
  classesB4: "net.anthavio.httl.HttpSenderConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlResponse"
  classesB4: "net.anthavio.httl.HttpURLResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.HttpURLResponse"
    classAftr: "net.anthavio.httl.impl.HttpUrlResponse"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlResponse"
  classesB4: "net.anthavio.httl.HttpURLResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSenderConfig"
      }
    }
    dtAftr {
      simpleType {
        name: "SenderBuilder"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "config"
    nameaftr: "config"
    classb4: "net.anthavio.httl.HttpURLSender"
    classAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "doExecute"
    nameaftr: "call"
    classb4: "net.anthavio.httl.HttpURLSender"
    classAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.HttpURLSender"
    classAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.HttpURLSender"
    classAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "FakeStream"
      }
    }
    dtAftr {
      simpleType {
        name: "PseudoStream"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "fake"
    nameaftr: "fake"
    classb4: "net.anthavio.httl.HttpURLSender"
    classAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.HttpUrlTransport"
  classesB4: "net.anthavio.httl.HttpURLSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "doExecute"
    nameaftr: "call"
    classb4: "net.anthavio.httl.JettySender"
    classAftr: "net.anthavio.httl.impl.JettyTransport"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.JettySender"
    classAftr: "net.anthavio.httl.impl.JettyTransport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.JettySender"
    classAftr: "net.anthavio.httl.impl.JettyTransport"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  typeChange {
    dtB4 {
      simpleType {
        name: "FakeStream"
      }
    }
    dtAftr {
      simpleType {
        name: "PseudoStream"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "fake"
    nameaftr: "fake"
    classb4: "net.anthavio.httl.JettySender"
    classAftr: "net.anthavio.httl.impl.JettyTransport"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.impl.JettyTransport"
  classesB4: "net.anthavio.httl.JettySender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.PseudoStream"
  classesB4: "net.anthavio.httl.SenderBodyRequest.FakeStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseStatusException"
  classesB4: "net.anthavio.httl.SenderHttpStatusException"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "response"
    nameaftr: "response"
    classb4: "net.anthavio.httl.SenderHttpStatusException"
    classAftr: "net.anthavio.httl.ResponseStatusException"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseStatusException"
  classesB4: "net.anthavio.httl.SenderHttpStatusException"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ResponseStatusException"
  classesB4: "net.anthavio.httl.SenderHttpStatusException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlResponse"
  classesB4: "net.anthavio.httl.SenderResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.SenderResponse"
    classAftr: "net.anthavio.httl.HttlResponse"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlResponse"
  classesB4: "net.anthavio.httl.SenderResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpSender"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlSender"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sender"
    nameaftr: "sender"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "Parameters"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "params"
    nameaftr: "params"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Method"
          }
        }
        params {
          simpleType {
            name: "MetaMethod"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Method"
          }
        }
        params {
          simpleType {
            name: "ApiMethodMeta"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "processMethods"
    nameaftr: "doApiMethods"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "MetaHeader"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "ApiHeaderMeta"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "processHeaders"
    nameaftr: "doApiHeaders"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaParam"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiVarMeta"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "parseParameter"
    nameaftr: "doParameter"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Method"
          }
        }
        params {
          simpleType {
            name: "MetaMethod"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Method"
          }
        }
        params {
          simpleType {
            name: "ApiMethodMeta"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "result"
    nameaftr: "metaMap"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiMethodMeta"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "mmeta"
    nameaftr: "methodMeta"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Operation"
      }
    }
    dtAftr {
      simpleType {
        name: "RestCall"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "operation"
    nameaftr: "operation"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "MetaParam"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "ApiVarMeta"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "params"
    nameaftr: "params"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "MetaParam"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "ApiVarMeta"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "paramMap"
    nameaftr: "paramMap"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaParam"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiVarMeta"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "param"
    nameaftr: "param"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "MetaHeader"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "ApiHeaderMeta"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "headerMap"
    nameaftr: "headerMap"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaParam"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiVarMeta"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "param"
    nameaftr: "param"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaParam"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiVarMeta"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "body"
    nameaftr: "body"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "MetaHeader"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "ApiHeaderMeta"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "headerList"
    nameaftr: "headerList"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Headers"
      }
    }
    dtAftr {
      simpleType {
        name: "RestHeaders"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "cheaders"
    nameaftr: "cheaders"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaHeader"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiHeaderMeta"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "metaHeader"
    nameaftr: "metaHeader"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Headers"
      }
    }
    dtAftr {
      simpleType {
        name: "RestHeaders"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "mheaders"
    nameaftr: "mheaders"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "MetaHeader"
      }
    }
    dtAftr {
      simpleType {
        name: "ApiHeaderMeta"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "metaHeader"
    nameaftr: "metaHeader"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.ApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "INLINE_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Param"
      }
    }
    dtAftr {
      simpleType {
        name: "RestVar"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "param"
    nameaftr: "var"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "ParamSetter"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "VarSetter"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "setter"
    nameaftr: "setter"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Body"
      }
    }
    dtAftr {
      simpleType {
        name: "RestBody"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "body"
    nameaftr: "body"
    classb4: "net.anthavio.httl.api.ApiBuilder"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder"
  classesB4: "net.anthavio.httl.api.ApiBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "MetaParam"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "ApiVarMeta"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "parameters"
    nameaftr: "parameters"
    classb4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "MetaHeader"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "ApiHeaderMeta"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "MetaParam"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "ApiVarMeta"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "parameters"
    nameaftr: "parameters"
    classb4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "MetaHeader"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "ApiHeaderMeta"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaParam"
  typeChange {
    dtB4 {
      simpleType {
        name: "ParamSetter"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "VarSetter"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "setter"
    nameaftr: "setter"
    classb4: "net.anthavio.httl.api.ApiBuilder.MetaParam"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaParam"
  typeChange {
    dtB4 {
      simpleType {
        name: "ParamTarget"
      }
    }
    dtAftr {
      simpleType {
        name: "VarTarget"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "target"
    nameaftr: "target"
    classb4: "net.anthavio.httl.api.ApiBuilder.MetaParam"
    classAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
  classesB4: "net.anthavio.httl.api.ApiBuilder.MetaParam"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastRequest"
    nameaftr: "lastRequest"
    classb4: "net.anthavio.httl.util.MockSender"
    classAftr: "net.anthavio.httl.util.MockTransport"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastResponse"
    nameaftr: "lastResponse"
    classb4: "net.anthavio.httl.util.MockSender"
    classAftr: "net.anthavio.httl.util.MockTransport"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "staticResponse"
    nameaftr: "staticResponse"
    classb4: "net.anthavio.httl.util.MockSender"
    classAftr: "net.anthavio.httl.util.MockTransport"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "doExecute"
    nameaftr: "call"
    classb4: "net.anthavio.httl.util.MockSender"
    classAftr: "net.anthavio.httl.util.MockTransport"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.util.MockSender"
    classAftr: "net.anthavio.httl.util.MockTransport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "Multival"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHeaders"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "headers"
    nameaftr: "headers"
    classb4: "net.anthavio.httl.util.MockSender"
    classAftr: "net.anthavio.httl.util.MockTransport"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.MockTransport"
  classesB4: "net.anthavio.httl.util.MockSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlException"
  classesB4: "net.anthavio.httl.ResponseStatusException"
  refactoringType: "EXTRACT_SUPERCLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.HttlRequestBuilders.HttlRequestBuilder"
  classesB4: "net.anthavio.httl.HttlRequestBuilders.SenderRequestBuilder"
  refactoringType: "EXTRACT_SUPERCLASS"
}
refactorings {
  classesAftr: "net.anthavio.httl.JokerServer.RequestHandler"
  classesB4: "net.anthavio.httl.JettyResponse"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "net.anthavio.httl.JokerServer.RequestHandler"
  classesB4: "net.anthavio.httl.SenderException"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "net.anthavio.httl.util.HttpHeaderUtil"
  classesB4: "net.anthavio.httl.HttpSender"
  refactoringType: "MOVE_OPERATION"
}
refactorings {
  classesAftr: "net.anthavio.httl.ExtractionOperations"
  classesB4: "net.anthavio.httl.ExtractionOperations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.ExtractionOperations"
    classAftr: "net.anthavio.httl.ExtractionOperations"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ExtractionOperations"
  classesB4: "net.anthavio.httl.ExtractionOperations"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.ExtractionOperations"
    classAftr: "net.anthavio.httl.ExtractionOperations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ExtractionOperations"
  classesB4: "net.anthavio.httl.ExtractionOperations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ResponseBodyExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ResponseExtractor"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "extractor"
    nameaftr: "extractor"
    classb4: "net.anthavio.httl.ExtractionOperations"
    classAftr: "net.anthavio.httl.ExtractionOperations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ExtractionOperations"
  classesB4: "net.anthavio.httl.ExtractionOperations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ExtractedBodyResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ExtractedResponse"
          }
        }
        params {
          simpleType {
            name: "T"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extract"
    nameaftr: "extract"
    classb4: "net.anthavio.httl.ExtractionOperations"
    classAftr: "net.anthavio.httl.ExtractionOperations"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.ExtractionOperations"
  classesB4: "net.anthavio.httl.ExtractionOperations"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.ExtractionOperations"
    classAftr: "net.anthavio.httl.ExtractionOperations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.SenderOperations"
  classesB4: "net.anthavio.httl.SenderOperations"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderResponse"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "execute"
    nameaftr: "execute"
    classb4: "net.anthavio.httl.SenderOperations"
    classAftr: "net.anthavio.httl.SenderOperations"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "net.anthavio.httl.SenderOperations"
  classesB4: "net.anthavio.httl.SenderOperations"
  typeChange {
    dtB4 {
      simpleType {
        name: "SenderRequest"
      }
    }
    dtAftr {
      simpleType {
        name: "HttlRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "request"
    nameaftr: "request"
    classb4: "net.anthavio.httl.SenderOperations"
    classAftr: "net.anthavio.httl.SenderOperations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
                  to: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
            to: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.ResponseInterceptor"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlResponseInterceptor"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.ResponseInterceptor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlResponseInterceptor"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.ResponseInterceptor"
            to: "net.anthavio.httl.HttlResponseInterceptor"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.ResponseInterceptor"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlResponseInterceptor"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseInterceptor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlResponseInterceptor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.ResponseInterceptor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.ResponseExtractor"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.ResponseExtractor"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "V"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "V"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                  to: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "V"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "V"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.TestResponse"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.TestResponse"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                  to: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.TestResponse"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.TestResponse"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.GetRequest"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlRequest"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.GetRequest"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlRequest"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.GetRequest"
            to: "net.anthavio.httl.HttlRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.GetRequest"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlRequest"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.GetRequest"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlRequest"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.GetRequest"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "Headers"
    }
  }
  aftr {
    simpleType {
      name: "RestHeaders"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "Headers"
            }
          }
          aftr {
            simpleType {
              name: "RestHeaders"
            }
          }
          chng {
            from: "Headers"
            to: "RestHeaders"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "Headers"
      }
    }
    aftr {
      simpleType {
        name: "RestHeaders"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "Headers"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "RestHeaders"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "Headers"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    arryTyp {
      name {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
          typeOfType: Internal
        }
      }
      dim: 1
    }
  }
  aftr {
    arryTyp {
      name {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
          typeOfType: Internal
        }
      }
      dim: 1
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.api.ApiBuilder.MetaParam"
                  to: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      arryTyp {
        name {
          simpleType {
            name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
            typeOfType: Internal
          }
        }
        dim: 1
      }
    }
    aftr {
      arryTyp {
        name {
          simpleType {
            name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
            typeOfType: Internal
          }
        }
        dim: 1
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.inout.SimpleXmlMarshaller"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.SimpleXmlMarshaller"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
            to: "net.anthavio.httl.inout.SimpleXmlMarshaller"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.inout.SimpleXmlMarshaller"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.SimpleXmlMarshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.SimpleXmlRequestMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "V"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "V"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor"
                  to: "net.anthavio.httl.ResponseExtractor"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "V"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "V"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    arryTyp {
      name {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
      dim: 1
    }
  }
  aftr {
    arryTyp {
      name {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
      dim: 1
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
                  to: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      arryTyp {
        name {
          simpleType {
            name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
            typeOfType: Internal
          }
        }
        dim: 1
      }
    }
    aftr {
      arryTyp {
        name {
          simpleType {
            name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
            typeOfType: Internal
          }
        }
        dim: 1
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
                  to: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiHeaderMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaHeader"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
            to: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.SenderRequest"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlRequest"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.SenderRequest"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlRequest"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.SenderRequest"
            to: "net.anthavio.httl.HttlRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.SenderRequest"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlRequest"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderRequest"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlRequest"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.SenderRequest"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.inout.Jackson2Marshaller"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.Jackson2Marshaller"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
            to: "net.anthavio.httl.inout.Jackson2Marshaller"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.inout.Jackson2Marshaller"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.Jackson2Marshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.Jackson2RequestMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpClient4Sender"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpClient4Sender"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpClient4Sender"
            to: "net.anthavio.httl.HttlSender"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpClient4Sender"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpClient4Sender"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpClient4Sender"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.PostRequest"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlRequest"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.PostRequest"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlRequest"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.PostRequest"
            to: "net.anthavio.httl.HttlRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.PostRequest"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlRequest"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.PostRequest"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlRequest"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.PostRequest"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.reflect.Method"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.reflect.Method"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
                  to: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.reflect.Method"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.reflect.Method"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiMethodMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaMethod"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.SenderRequest"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.HttlRequestBuilders.HttlRequestBuilder"
          typeOfType: Internal
        }
      }
      params {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "net.anthavio.httl.SenderRequest"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.HttlRequestBuilders.HttlRequestBuilder"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderRequest"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "net.anthavio.httl.HttlRequestBuilders.HttlRequestBuilder"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.SenderRequest"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpSender.Multival"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender.HttpHeaders"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpSender.Multival"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender.HttpHeaders"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpSender.Multival"
            to: "net.anthavio.httl.HttlSender.HttpHeaders"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpSender.Multival"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender.HttpHeaders"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpSender.Multival"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender.HttpHeaders"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpSender.Multival"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpClient3Sender"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpClient3Sender"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpClient3Sender"
            to: "net.anthavio.httl.HttlSender"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpClient3Sender"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpClient3Sender"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpClient3Sender"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ParamSetter"
      typeOfType: Internal
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.api.VarSetter"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ParamSetter"
        typeOfType: Internal
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.api.VarSetter"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ParamSetter"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "net.anthavio.httl.api.VarSetter"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ParamSetter"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
      params {
        arryTyp {
          name {
            prmtv {
              name: "byte"
              typeOfType: Internal
            }
          }
          dim: 1
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
      params {
        arryTyp {
          name {
            prmtv {
              name: "byte"
              typeOfType: Internal
            }
          }
          dim: 1
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                  to: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "byte"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "byte"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor"
                  to: "net.anthavio.httl.ResponseExtractor"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.SenderBodyRequest.FakeStream"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.PseudoStream"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.SenderBodyRequest.FakeStream"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.PseudoStream"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.SenderBodyRequest.FakeStream"
            to: "net.anthavio.httl.PseudoStream"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.SenderBodyRequest.FakeStream"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.PseudoStream"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderBodyRequest.FakeStream"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.PseudoStream"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.SenderBodyRequest.FakeStream"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.SenderResponse"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlRequest"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.SenderResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlRequest"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.SenderResponse"
            to: "net.anthavio.httl.HttlRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.SenderResponse"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlRequest"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlRequest"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.SenderResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.ApiBuilder.MetaParam"
            to: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.RequestInterceptor"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlRequestInterceptor"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.RequestInterceptor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlRequestInterceptor"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.RequestInterceptor"
            to: "net.anthavio.httl.HttlRequestInterceptor"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.RequestInterceptor"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlRequestInterceptor"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.RequestInterceptor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlRequestInterceptor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.RequestInterceptor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlResponse"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlResponse"
              typeOfType: Internal
            }
          }
          chng {
            from: "java.lang.String"
            to: "net.anthavio.httl.HttlResponse"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlResponse"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpURLSender"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpURLSender"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpURLSender"
            to: "net.anthavio.httl.HttlSender"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpURLSender"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpURLSender"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpURLSender"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.Exception"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlResponse"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.Exception"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlResponse"
              typeOfType: Internal
            }
          }
          chng {
            from: "java.lang.Exception"
            to: "net.anthavio.httl.HttlResponse"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.Exception"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlResponse"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Exception"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Exception"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpSender"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpSender"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpSender"
            to: "net.anthavio.httl.HttlSender"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpSender"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpSender"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpSender"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "Operation"
    }
  }
  aftr {
    simpleType {
      name: "RestCall"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "Operation"
            }
          }
          aftr {
            simpleType {
              name: "RestCall"
            }
          }
          chng {
            from: "Operation"
            to: "RestCall"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "Operation"
      }
    }
    aftr {
      simpleType {
        name: "RestCall"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "Operation"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "RestCall"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "Operation"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.PostRequest"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlRequestBuilders.SenderBodyRequestBuilder"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.PostRequest"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlRequestBuilders.SenderBodyRequestBuilder"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.PostRequest"
            to: "net.anthavio.httl.HttlRequestBuilders.SenderBodyRequestBuilder"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.PostRequest"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlRequestBuilders.SenderBodyRequestBuilder"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.PostRequest"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlRequestBuilders.SenderBodyRequestBuilder"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.PostRequest"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "Body"
    }
  }
  aftr {
    simpleType {
      name: "RestBody"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "Body"
            }
          }
          aftr {
            simpleType {
              name: "RestBody"
            }
          }
          chng {
            from: "Body"
            to: "RestBody"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "Body"
      }
    }
    aftr {
      simpleType {
        name: "RestBody"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "Body"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "RestBody"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "Body"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpURLConfig"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.impl.HttpUrlConfig"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpURLConfig"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.impl.HttpUrlConfig"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpURLConfig"
            to: "net.anthavio.httl.impl.HttpUrlConfig"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpURLConfig"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.impl.HttpUrlConfig"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpURLConfig"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.impl.HttpUrlConfig"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpURLConfig"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpSenderConfig"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.SenderBuilder"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpSenderConfig"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.SenderBuilder"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpSenderConfig"
            to: "net.anthavio.httl.SenderBuilder"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpSenderConfig"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.SenderBuilder"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpSenderConfig"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderBuilder"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpSenderConfig"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor"
                  to: "net.anthavio.httl.ResponseExtractor"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.JettySender"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.JettySender"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.JettySender"
            to: "net.anthavio.httl.HttlSender"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.JettySender"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.JettySender"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.JettySender"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "RestVar"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "RestVar"
            }
          }
          chng {
            from: "net.anthavio.httl.api.ApiBuilder.MetaParam"
            to: "RestVar"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "RestVar"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "RestVar"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "T"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                  to: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "T"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.RequestBodyMarshaller"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.inout.RequestMarshaller"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.RequestBodyMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.RequestMarshaller"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.RequestBodyMarshaller"
            to: "net.anthavio.httl.inout.RequestMarshaller"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.RequestBodyMarshaller"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.inout.RequestMarshaller"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.RequestBodyMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.RequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.RequestBodyMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.api.ApiBuilder.MetaParam"
                  to: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.ApiVarMeta"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.MetaParam"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.SpecialApiTest.MockBuilderInterceptor"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.SpecialApiTest.MockBuilderInterceptor"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
            to: "net.anthavio.httl.api.SpecialApiTest.MockBuilderInterceptor"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.SpecialApiTest.MockBuilderInterceptor"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.SpecialApiTest.MockBuilderInterceptor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.SpecialApiTest.MockRequestInterceptor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.SenderResponse"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlResponse"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.SenderResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlResponse"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.SenderResponse"
            to: "net.anthavio.httl.HttlResponse"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.SenderResponse"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlResponse"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.SenderResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.ResponseHandler"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlResponseHandler"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseHandler"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlResponseHandler"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.ResponseHandler"
            to: "net.anthavio.httl.HttlResponseHandler"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseHandler"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlResponseHandler"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseHandler"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlResponseHandler"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseHandler"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.SpecialApiTest.MockExecutionInterceptor"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.SpecialApiTest.MockExecutionInterceptor"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
            to: "net.anthavio.httl.api.SpecialApiTest.MockExecutionInterceptor"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.SpecialApiTest.MockExecutionInterceptor"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.SpecialApiTest.MockExecutionInterceptor"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.SpecialApiTest.MockResponseInterceptor"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.example.HttpbinOut"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.example.HttpbinOut"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                  to: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.example.HttpbinOut"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.example.HttpbinOut"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.JaxbRequestMarshaller"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.inout.JaxbMarshaller"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.JaxbRequestMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.JaxbMarshaller"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.JaxbRequestMarshaller"
            to: "net.anthavio.httl.inout.JaxbMarshaller"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.JaxbRequestMarshaller"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.inout.JaxbMarshaller"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.JaxbRequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.JaxbMarshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.JaxbRequestMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.inout.RequestBodyMarshaller"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.inout.GsonRequestMarshaller"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.RequestBodyMarshaller"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.inout.GsonRequestMarshaller"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.RequestBodyMarshaller"
                  to: "net.anthavio.httl.inout.GsonRequestMarshaller"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.RequestBodyMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.GsonRequestMarshaller"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.inout.RequestBodyMarshaller"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.inout.GsonRequestMarshaller"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.RequestBodyMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.GsonRequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.RequestBodyMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.GsonRequestMarshaller"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.inout.GsonMarshaller"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.GsonRequestMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.GsonMarshaller"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.GsonRequestMarshaller"
            to: "net.anthavio.httl.inout.GsonMarshaller"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.GsonRequestMarshaller"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.inout.GsonMarshaller"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.GsonRequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.GsonMarshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.GsonRequestMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
            to: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ComplexApiTest.SomeBodyBean"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ComplexApiTest.SomeBean"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.inout.Jackson1Marshaller"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.inout.Jackson1Marshaller"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
            to: "net.anthavio.httl.inout.Jackson1Marshaller"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.inout.Jackson1Marshaller"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.Jackson1Marshaller"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.Jackson1RequestMarshaller"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.util.MockSender"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.util.MockTransport"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.util.MockSender"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.util.MockTransport"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.util.MockSender"
            to: "net.anthavio.httl.util.MockTransport"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.util.MockSender"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.util.MockTransport"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.util.MockSender"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.util.MockTransport"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.util.MockSender"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
                  to: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.ResponseExtractor.ExtractedResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.inout.ResponseBodyExtractor.ExtractedBodyResponse"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.api.ApiBuilder.ParamTarget"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.api.HttlApiBuilder.VarTarget"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.api.ApiBuilder.ParamTarget"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.api.HttlApiBuilder.VarTarget"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.api.ApiBuilder.ParamTarget"
            to: "net.anthavio.httl.api.HttlApiBuilder.VarTarget"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.ParamTarget"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.api.HttlApiBuilder.VarTarget"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.ApiBuilder.ParamTarget"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.api.HttlApiBuilder.VarTarget"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.api.ApiBuilder.ParamTarget"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "net.anthavio.httl.HttpSender.Multival"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "net.anthavio.httl.HttlSender.Parameters"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "net.anthavio.httl.HttpSender.Multival"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlSender.Parameters"
              typeOfType: Internal
            }
          }
          chng {
            from: "net.anthavio.httl.HttpSender.Multival"
            to: "net.anthavio.httl.HttlSender.Parameters"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "net.anthavio.httl.HttpSender.Multival"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "net.anthavio.httl.HttlSender.Parameters"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttpSender.Multival"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlSender.Parameters"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.HttpSender.Multival"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.concurrent.Future"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.SenderResponse"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.concurrent.Future"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "net.anthavio.httl.HttlResponse"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "net.anthavio.httl.SenderResponse"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "net.anthavio.httl.HttlResponse"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "net.anthavio.httl.SenderResponse"
                  to: "net.anthavio.httl.HttlResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "net.anthavio.httl.SenderResponse"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "net.anthavio.httl.HttlResponse"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.concurrent.Future"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.SenderResponse"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.concurrent.Future"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "net.anthavio.httl.HttlResponse"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.SenderResponse"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "net.anthavio.httl.HttlResponse"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "net.anthavio.httl.SenderResponse"
        typeOfType: Internal
      }
    }
  }
}
project: "hatatitla"
commit: "hatatitla"
tooBig: false

refactorings {
  classesAftr: "com.rockagen.commons.http.HttpConn"
  classesB4: "com.rockagen.commons.http.HttpConn"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.rockagen.commons.http.HttpConn"
    classAftr: "com.rockagen.commons.http.HttpConn"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.rockagen.commons.http.HttpConn"
  classesB4: "com.rockagen.commons.http.HttpConn"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.ClassUtil"
  classesB4: "com.rockagen.commons.util.ClassUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.rockagen.commons.util.ClassUtil"
    classAftr: "com.rockagen.commons.util.ClassUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.ClassUtil"
  classesB4: "com.rockagen.commons.util.ClassUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.CommUtil"
  classesB4: "com.rockagen.commons.util.CommUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.JsonUtil"
  classesB4: "com.rockagen.commons.util.JsonUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.rockagen.commons.util.JsonUtil"
    classAftr: "com.rockagen.commons.util.JsonUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.JsonUtil"
  classesB4: "com.rockagen.commons.util.JsonUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.JsonUtil.MyJsonParser"
  classesB4: "com.rockagen.commons.util.JsonUtil.MyJsonParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.ReflexUtil"
  classesB4: "com.rockagen.commons.util.ReflexUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.rockagen.commons.util.ReflexUtil"
    classAftr: "com.rockagen.commons.util.ReflexUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.ReflexUtil"
  classesB4: "com.rockagen.commons.util.ReflexUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.XmlUtil"
  classesB4: "com.rockagen.commons.util.XmlUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "com.rockagen.commons.util.XmlUtil"
    classAftr: "com.rockagen.commons.util.XmlUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.XmlUtil"
  classesB4: "com.rockagen.commons.util.XmlUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.XmlUtil.XAlias"
  classesB4: "com.rockagen.commons.util.XmlUtil.XAlias"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.XmlUtil.XAliasField"
  classesB4: "com.rockagen.commons.util.XmlUtil.XAliasField"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.XmlUtil.XAliasAttribute"
  classesB4: "com.rockagen.commons.util.XmlUtil.XAliasAttribute"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.http.HttpConnTest"
  classesB4: "com.rockagen.commons.http.HttpConnTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.CommUtilTest"
  classesB4: "com.rockagen.commons.util.CommUtilTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.rockagen.commons.util.JsonUtilTest"
  classesB4: "com.rockagen.commons.util.JsonUtilTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "commons-lib"
commit: "commons-lib"
tooBig: false

refactorings {
  classesAftr: "me.ampayne2.ultimategames.arenas.Arena"
  classesB4: "me.ampayne2.ultimategames.arenas.Arena"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "me.ampayne2.ultimategames.webapi.handlers.GeneralInformationHandler"
  classesB4: "me.ampayne2.ultimategames.webapi.handlers.GeneralInformationHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "UltimateGames"
commit: "UltimateGames"
tooBig: false

refactorings {
  classesAftr: "org.bitpipeline.lib.owm.OwmClient"
  classesB4: "org.bitpipeline.lib.owm.OwmClient"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "org.bitpipeline.lib.owm.OwmClient"
  classesB4: "org.bitpipeline.lib.owm.OwmClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpget"
    nameaftr: "httpget"
    classb4: "org.bitpipeline.lib.owm.OwmClient"
    classAftr: "org.bitpipeline.lib.owm.OwmClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.bitpipeline.lib.owm.OwmClient"
  classesB4: "org.bitpipeline.lib.owm.OwmClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.bitpipeline.lib.owm.OwmClientTest"
  classesB4: "org.bitpipeline.lib.owm.OwmClientTest"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.bitpipeline.lib.owm.OwmClientTest"
  classesB4: "org.bitpipeline.lib.owm.OwmClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "owmClient"
commit: "owmClient"
tooBig: false

refactorings {
  classesAftr: "org.pentaho.platform.util.client.BiPlatformRepositoryClient"
  classesB4: "org.pentaho.platform.util.client.BiPlatformRepositoryClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "callMethod"
    nameaftr: "callMethod"
    classb4: "org.pentaho.platform.util.client.BiPlatformRepositoryClient"
    classAftr: "org.pentaho.platform.util.client.BiPlatformRepositoryClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.BiPlatformRepositoryClient"
  classesB4: "org.pentaho.platform.util.client.BiPlatformRepositoryClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtil"
  classesB4: "org.pentaho.platform.util.client.ClientUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "callMethod"
    nameaftr: "callMethod"
    classb4: "org.pentaho.platform.util.client.ClientUtil"
    classAftr: "org.pentaho.platform.util.client.ClientUtil"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtil"
  classesB4: "org.pentaho.platform.util.client.ClientUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.web.HttpUtil"
  classesB4: "org.pentaho.platform.util.web.HttpUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "call"
    nameaftr: "call"
    classb4: "org.pentaho.platform.util.web.HttpUtil"
    classAftr: "org.pentaho.platform.util.web.HttpUtil"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.web.HttpUtil"
  classesB4: "org.pentaho.platform.util.web.HttpUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.platform.util.client.ClientUtilsTest"
    classAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.platform.util.client.ClientUtilsTest"
    classAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.platform.util.client.ClientUtilsTest"
    classAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.platform.util.client.ClientUtilsTest"
    classAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.util.client.ClientUtilsTest"
  classesB4: "org.pentaho.platform.util.client.ClientUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.test.platform.web.HttpUtilIT"
  classesB4: "org.pentaho.test.platform.web.HttpUtilIT"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClientParams"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpParams"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "params"
    nameaftr: "params"
    classb4: "org.pentaho.test.platform.web.HttpUtilIT"
    classAftr: "org.pentaho.test.platform.web.HttpUtilIT"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.test.platform.web.HttpUtilIT"
  classesB4: "org.pentaho.test.platform.web.HttpUtilIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.http.api.resources.ActionResource"
  classesB4: "org.pentaho.platform.web.http.api.resources.ActionResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.http.api.resources.ActionResource.CallableAction"
  classesB4: "org.pentaho.platform.web.http.api.resources.ActionResource.CallableAction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.servlet.ProxyServlet"
  classesB4: "org.pentaho.platform.web.servlet.ProxyServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.platform.web.servlet.ProxyServlet"
    classAftr: "org.pentaho.platform.web.servlet.ProxyServlet"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.servlet.ProxyServlet"
  classesB4: "org.pentaho.platform.web.servlet.ProxyServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.platform.web.servlet.ProxyServlet"
    classAftr: "org.pentaho.platform.web.servlet.ProxyServlet"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.servlet.ProxyServlet"
  classesB4: "org.pentaho.platform.web.servlet.ProxyServlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.http.api.resources.ActionResourceTest"
  classesB4: "org.pentaho.platform.web.http.api.resources.ActionResourceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.platform.web.http.api.resources.MyDefaultActionInvoker"
  classesB4: "org.pentaho.platform.web.http.api.resources.MyDefaultActionInvoker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpRequestBase"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpRequestBase"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpRequestBase"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpRequestBase"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpRequestBase"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.params.HttpClientParams"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.params.HttpParams"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.params.HttpClientParams"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.params.HttpParams"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.params.HttpClientParams"
            to: "org.apache.http.params.HttpParams"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.params.HttpClientParams"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.params.HttpParams"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.params.HttpClientParams"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.params.HttpParams"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.params.HttpClientParams"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpUriRequest"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpUriRequest"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpUriRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpUriRequest"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpUriRequest"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "pentaho-platform"
commit: "pentaho-platform"
tooBig: false

refactorings {
  classesAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  classesB4: "org.mule.common.metadata.JSONMetaDataHelper"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonElement"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getFirstChild"
    nameaftr: "getFirstChild"
    classb4: "org.mule.common.metadata.JSONMetaDataHelper"
    classAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  classesB4: "org.mule.common.metadata.JSONMetaDataHelper"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonArray"
      }
    }
    dtAftr {
      simpleType {
        name: "ArrayNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "array"
    nameaftr: "array"
    classb4: "org.mule.common.metadata.JSONMetaDataHelper"
    classAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  classesB4: "org.mule.common.metadata.JSONMetaDataHelper"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  classesB4: "org.mule.common.metadata.JSONMetaDataHelper"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonPrimitive"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "primitive"
    nameaftr: "node"
    classb4: "org.mule.common.metadata.JSONMetaDataHelper"
    classAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONMetaDataHelper"
  classesB4: "org.mule.common.metadata.JSONMetaDataHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonObject"
      }
    }
    dtAftr {
      simpleType {
        name: "ObjectNode"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "jsonObject"
    nameaftr: "jsonObject"
    classb4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
    classAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonObject"
      }
    }
    dtAftr {
      simpleType {
        name: "ObjectNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "jsonObject"
    nameaftr: "jsonObject"
    classb4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
    classAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonElement"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "element"
    nameaftr: "element"
    classb4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
    classAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonElement"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "child"
    nameaftr: "child"
    classb4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
    classAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetaDataFieldFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetadataModelFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetadataModelFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "JsonElement"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonNode"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "child"
    nameaftr: "child"
    classb4: "org.mule.common.metadata.JSONSampleMetadataModelFactory"
    classAftr: "org.mule.common.metadata.JSONSampleMetadataModelFactory"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.mule.common.metadata.JSONSampleMetadataModelFactory"
  classesB4: "org.mule.common.metadata.JSONSampleMetadataModelFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.mule.common.metadata.builder.DefaultMetaDataBuilder"
  classesB4: "org.mule.common.metadata.builder.DefaultMetaDataBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.mule.common.metadata.builder.DefaultJSONMetaDataBuilder"
  classesB4: "org.mule.common.metadata.builder.DefaultJSONMetaDataBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.google.gson.JsonElement"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.fasterxml.jackson.databind.JsonNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.google.gson.JsonElement"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.fasterxml.jackson.databind.JsonNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "com.google.gson.JsonElement"
            to: "com.fasterxml.jackson.databind.JsonNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.google.gson.JsonElement"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.fasterxml.jackson.databind.JsonNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonElement"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.fasterxml.jackson.databind.JsonNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.google.gson.JsonElement"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.fasterxml.jackson.databind.node.ObjectNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.google.gson.JsonObject"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.fasterxml.jackson.databind.node.ObjectNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "com.google.gson.JsonObject"
            to: "com.fasterxml.jackson.databind.node.ObjectNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.fasterxml.jackson.databind.node.ObjectNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.fasterxml.jackson.databind.node.ObjectNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.google.gson.JsonArray"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.fasterxml.jackson.databind.node.ArrayNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.google.gson.JsonArray"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.fasterxml.jackson.databind.node.ArrayNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "com.google.gson.JsonArray"
            to: "com.fasterxml.jackson.databind.node.ArrayNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.google.gson.JsonArray"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.fasterxml.jackson.databind.node.ArrayNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonArray"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.fasterxml.jackson.databind.node.ArrayNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.google.gson.JsonArray"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.google.gson.JsonPrimitive"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.fasterxml.jackson.databind.JsonNode"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.google.gson.JsonPrimitive"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.fasterxml.jackson.databind.JsonNode"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "com.google.gson.JsonPrimitive"
            to: "com.fasterxml.jackson.databind.JsonNode"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.google.gson.JsonPrimitive"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.fasterxml.jackson.databind.JsonNode"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonPrimitive"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.fasterxml.jackson.databind.JsonNode"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.google.gson.JsonPrimitive"
        typeOfType: DontKnow
      }
    }
  }
}
project: "mule-common"
commit: "mule-common"
tooBig: false

refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.RottenTomatoesApi"
  classesB4: "com.omertron.rottentomatoesapi.RottenTomatoesApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.model.RTCast"
  classesB4: "com.omertron.rottentomatoesapi.model.RTCast"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.model.RTClip"
  classesB4: "com.omertron.rottentomatoesapi.model.RTClip"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.model.RTMovie"
  classesB4: "com.omertron.rottentomatoesapi.model.RTMovie"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.model.RTPerson"
  classesB4: "com.omertron.rottentomatoesapi.model.RTPerson"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.model.Review"
  classesB4: "com.omertron.rottentomatoesapi.model.Review"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.tools.ApiBuilder"
  classesB4: "com.omertron.rottentomatoesapi.tools.ApiBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.wrapper.WrapperLists"
  classesB4: "com.omertron.rottentomatoesapi.wrapper.WrapperLists"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.omertron.rottentomatoesapi.RottenTomatoesApiTest"
  classesB4: "com.omertron.rottentomatoesapi.RottenTomatoesApiTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "api-rottentomatoes"
commit: "api-rottentomatoes"
tooBig: false

refactorings {
  classesAftr: "org.hdiv.config.annotation.RuleRegistration"
  classesB4: "org.hdiv.config.annotation.RuleRegistration"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.config.annotation.RuleRegistration"
    classAftr: "org.hdiv.config.annotation.RuleRegistration"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.config.annotation.RuleRegistration"
  classesB4: "org.hdiv.config.annotation.RuleRegistration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.config.HDIVConfig"
  classesB4: "org.hdiv.config.HDIVConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.config.HDIVConfig"
    classAftr: "org.hdiv.config.HDIVConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.config.HDIVConfig"
  classesB4: "org.hdiv.config.HDIVConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.context.RequestContext"
  classesB4: "org.hdiv.context.RequestContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.context.RequestContext"
    classAftr: "org.hdiv.context.RequestContext"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.context.RequestContext"
  classesB4: "org.hdiv.context.RequestContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.dataComposer.AbstractDataComposer"
  classesB4: "org.hdiv.dataComposer.AbstractDataComposer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.dataComposer.AbstractDataComposer"
    classAftr: "org.hdiv.dataComposer.AbstractDataComposer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.dataComposer.AbstractDataComposer"
  classesB4: "org.hdiv.dataComposer.AbstractDataComposer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.dataComposer.DataComposerMemory"
  classesB4: "org.hdiv.dataComposer.DataComposerMemory"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.dataComposer.DataComposerMemory"
    classAftr: "org.hdiv.dataComposer.DataComposerMemory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.dataComposer.DataComposerMemory"
  classesB4: "org.hdiv.dataComposer.DataComposerMemory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.dataValidator.DataValidator"
  classesB4: "org.hdiv.dataValidator.DataValidator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.dataValidator.DataValidator"
    classAftr: "org.hdiv.dataValidator.DataValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.dataValidator.DataValidator"
  classesB4: "org.hdiv.dataValidator.DataValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.filter.ResponseWrapper"
  classesB4: "org.hdiv.filter.ResponseWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.filter.ResponseWrapper"
    classAftr: "org.hdiv.filter.ResponseWrapper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.filter.ResponseWrapper"
  classesB4: "org.hdiv.filter.ResponseWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.filter.ValidatorFilter"
  classesB4: "org.hdiv.filter.ValidatorFilter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.filter.ValidatorFilter"
    classAftr: "org.hdiv.filter.ValidatorFilter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.filter.ValidatorFilter"
  classesB4: "org.hdiv.filter.ValidatorFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.filter.ValidatorHelperRequest"
  classesB4: "org.hdiv.filter.ValidatorHelperRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.filter.ValidatorHelperRequest"
    classAftr: "org.hdiv.filter.ValidatorHelperRequest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.filter.ValidatorHelperRequest"
  classesB4: "org.hdiv.filter.ValidatorHelperRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.init.DefaultRequestInitializer"
  classesB4: "org.hdiv.init.DefaultRequestInitializer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.init.DefaultRequestInitializer"
    classAftr: "org.hdiv.init.DefaultRequestInitializer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.init.DefaultRequestInitializer"
  classesB4: "org.hdiv.init.DefaultRequestInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.listener.InitListener"
  classesB4: "org.hdiv.listener.InitListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.listener.InitListener"
    classAftr: "org.hdiv.listener.InitListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.listener.InitListener"
  classesB4: "org.hdiv.listener.InitListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.logs.Logger"
  classesB4: "org.hdiv.logs.Logger"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.logs.Logger"
    classAftr: "org.hdiv.logs.Logger"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.logs.Logger"
  classesB4: "org.hdiv.logs.Logger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.regex.DefaultPatternMatcher"
  classesB4: "org.hdiv.regex.DefaultPatternMatcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.regex.DefaultPatternMatcher"
    classAftr: "org.hdiv.regex.DefaultPatternMatcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.regex.DefaultPatternMatcher"
  classesB4: "org.hdiv.regex.DefaultPatternMatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.session.HTTPSessionCache"
  classesB4: "org.hdiv.session.HTTPSessionCache"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.session.HTTPSessionCache"
    classAftr: "org.hdiv.session.HTTPSessionCache"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.session.HTTPSessionCache"
  classesB4: "org.hdiv.session.HTTPSessionCache"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.session.StateCache"
  classesB4: "org.hdiv.session.StateCache"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.session.StateCache"
    classAftr: "org.hdiv.session.StateCache"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.session.StateCache"
  classesB4: "org.hdiv.session.StateCache"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.state.StateUtil"
  classesB4: "org.hdiv.state.StateUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.state.StateUtil"
    classAftr: "org.hdiv.state.StateUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.state.StateUtil"
  classesB4: "org.hdiv.state.StateUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.urlProcessor.FormUrlProcessor"
  classesB4: "org.hdiv.urlProcessor.FormUrlProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.urlProcessor.FormUrlProcessor"
    classAftr: "org.hdiv.urlProcessor.FormUrlProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.urlProcessor.FormUrlProcessor"
  classesB4: "org.hdiv.urlProcessor.FormUrlProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.urlProcessor.LinkUrlProcessor"
  classesB4: "org.hdiv.urlProcessor.LinkUrlProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.urlProcessor.LinkUrlProcessor"
    classAftr: "org.hdiv.urlProcessor.LinkUrlProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.urlProcessor.LinkUrlProcessor"
  classesB4: "org.hdiv.urlProcessor.LinkUrlProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.util.HDIVUtil"
  classesB4: "org.hdiv.util.HDIVUtil"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.util.HDIVUtil"
    classAftr: "org.hdiv.util.HDIVUtil"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.util.HDIVUtil"
  classesB4: "org.hdiv.util.HDIVUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validator.Validation"
  classesB4: "org.hdiv.validator.Validation"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.validator.Validation"
    classAftr: "org.hdiv.validator.Validation"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.validator.Validation"
  classesB4: "org.hdiv.validator.Validation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.AbstractHDIVTestCase"
  classesB4: "org.hdiv.AbstractHDIVTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.AbstractHDIVTestCase"
    classAftr: "org.hdiv.AbstractHDIVTestCase"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.AbstractHDIVTestCase"
  classesB4: "org.hdiv.AbstractHDIVTestCase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.session.StateCacheTest"
  classesB4: "org.hdiv.session.StateCacheTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.session.StateCacheTest"
    classAftr: "org.hdiv.session.StateCacheTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.session.StateCacheTest"
  classesB4: "org.hdiv.session.StateCacheTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.components.HtmlInputHiddenExtension"
  classesB4: "org.hdiv.components.HtmlInputHiddenExtension"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.components.HtmlInputHiddenExtension"
    classAftr: "org.hdiv.components.HtmlInputHiddenExtension"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.components.HtmlInputHiddenExtension"
  classesB4: "org.hdiv.components.HtmlInputHiddenExtension"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutcomeTargetComponentHelper"
  classesB4: "org.hdiv.components.support.OutcomeTargetComponentHelper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.components.support.OutcomeTargetComponentHelper"
    classAftr: "org.hdiv.components.support.OutcomeTargetComponentHelper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutcomeTargetComponentHelper"
  classesB4: "org.hdiv.components.support.OutcomeTargetComponentHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutcomeTargetComponentHelper.Param"
  classesB4: "org.hdiv.components.support.OutcomeTargetComponentHelper.Param"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutcomeTargetComponentProcessor"
  classesB4: "org.hdiv.components.support.OutcomeTargetComponentProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.components.support.OutcomeTargetComponentProcessor"
    classAftr: "org.hdiv.components.support.OutcomeTargetComponentProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutcomeTargetComponentProcessor"
  classesB4: "org.hdiv.components.support.OutcomeTargetComponentProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutputLinkComponentProcessor"
  classesB4: "org.hdiv.components.support.OutputLinkComponentProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.components.support.OutputLinkComponentProcessor"
    classAftr: "org.hdiv.components.support.OutputLinkComponentProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.components.support.OutputLinkComponentProcessor"
  classesB4: "org.hdiv.components.support.OutputLinkComponentProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.context.RedirectExternalContext"
  classesB4: "org.hdiv.context.RedirectExternalContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.context.RedirectExternalContext"
    classAftr: "org.hdiv.context.RedirectExternalContext"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.context.RedirectExternalContext"
  classesB4: "org.hdiv.context.RedirectExternalContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.filter.JsfValidatorErrorHandler"
  classesB4: "org.hdiv.filter.JsfValidatorErrorHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.filter.JsfValidatorErrorHandler"
    classAftr: "org.hdiv.filter.JsfValidatorErrorHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.filter.JsfValidatorErrorHandler"
  classesB4: "org.hdiv.filter.JsfValidatorErrorHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.filter.JsfValidatorHelper"
  classesB4: "org.hdiv.filter.JsfValidatorHelper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.filter.JsfValidatorHelper"
    classAftr: "org.hdiv.filter.JsfValidatorHelper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.filter.JsfValidatorHelper"
  classesB4: "org.hdiv.filter.JsfValidatorHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.logs.ComponentMessagesLog"
  classesB4: "org.hdiv.logs.ComponentMessagesLog"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.logs.ComponentMessagesLog"
    classAftr: "org.hdiv.logs.ComponentMessagesLog"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.logs.ComponentMessagesLog"
  classesB4: "org.hdiv.logs.ComponentMessagesLog"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.phaseListeners.ComponentMessagesPhaseListener"
  classesB4: "org.hdiv.phaseListeners.ComponentMessagesPhaseListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.phaseListeners.ComponentMessagesPhaseListener"
    classAftr: "org.hdiv.phaseListeners.ComponentMessagesPhaseListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.phaseListeners.ComponentMessagesPhaseListener"
  classesB4: "org.hdiv.phaseListeners.ComponentMessagesPhaseListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.phaseListeners.ConfigPhaseListener"
  classesB4: "org.hdiv.phaseListeners.ConfigPhaseListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.phaseListeners.ConfigPhaseListener"
    classAftr: "org.hdiv.phaseListeners.ConfigPhaseListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.phaseListeners.ConfigPhaseListener"
  classesB4: "org.hdiv.phaseListeners.ConfigPhaseListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.phaseListeners.ValidatorPhaseListener"
  classesB4: "org.hdiv.phaseListeners.ValidatorPhaseListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.phaseListeners.ValidatorPhaseListener"
    classAftr: "org.hdiv.phaseListeners.ValidatorPhaseListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.phaseListeners.ValidatorPhaseListener"
  classesB4: "org.hdiv.phaseListeners.ValidatorPhaseListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validation.DefaultComponentTreeValidator"
  classesB4: "org.hdiv.validation.DefaultComponentTreeValidator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.validation.DefaultComponentTreeValidator"
    classAftr: "org.hdiv.validation.DefaultComponentTreeValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.validation.DefaultComponentTreeValidator"
  classesB4: "org.hdiv.validation.DefaultComponentTreeValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validation.ValidationContext"
  classesB4: "org.hdiv.validation.ValidationContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.validation.ValidationContext"
    classAftr: "org.hdiv.validation.ValidationContext"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.validation.ValidationContext"
  classesB4: "org.hdiv.validation.ValidationContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validators.EditableValidator"
  classesB4: "org.hdiv.validators.EditableValidator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.validators.EditableValidator"
    classAftr: "org.hdiv.validators.EditableValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.validators.EditableValidator"
  classesB4: "org.hdiv.validators.EditableValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validators.HtmlInputHiddenValidator"
  classesB4: "org.hdiv.validators.HtmlInputHiddenValidator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.validators.HtmlInputHiddenValidator"
    classAftr: "org.hdiv.validators.HtmlInputHiddenValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.validators.HtmlInputHiddenValidator"
  classesB4: "org.hdiv.validators.HtmlInputHiddenValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validators.UICommandValidator"
  classesB4: "org.hdiv.validators.UICommandValidator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.validators.UICommandValidator"
    classAftr: "org.hdiv.validators.UICommandValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.validators.UICommandValidator"
  classesB4: "org.hdiv.validators.UICommandValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.validators.UICommandValidator.Clicked"
  classesB4: "org.hdiv.validators.UICommandValidator.Clicked"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.config.multipart.SpringMVCMultipartConfig"
  classesB4: "org.hdiv.config.multipart.SpringMVCMultipartConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.config.multipart.SpringMVCMultipartConfig"
    classAftr: "org.hdiv.config.multipart.SpringMVCMultipartConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.config.multipart.SpringMVCMultipartConfig"
  classesB4: "org.hdiv.config.multipart.SpringMVCMultipartConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.action.HDIVRequestProcessor"
  classesB4: "org.hdiv.action.HDIVRequestProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.config.multipart.AbstractMultipartConfig"
  classesB4: "org.hdiv.config.multipart.AbstractMultipartConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.config.multipart.AbstractMultipartConfig"
    classAftr: "org.hdiv.config.multipart.AbstractMultipartConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.config.multipart.AbstractMultipartConfig"
  classesB4: "org.hdiv.config.multipart.AbstractMultipartConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.config.multipart.StrutsMultipartConfig"
  classesB4: "org.hdiv.config.multipart.StrutsMultipartConfig"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.config.multipart.StrutsMultipartConfig"
    classAftr: "org.hdiv.config.multipart.StrutsMultipartConfig"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.config.multipart.StrutsMultipartConfig"
  classesB4: "org.hdiv.config.multipart.StrutsMultipartConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.taglib.html.HiddenTagHDIV"
  classesB4: "org.hdiv.taglib.html.HiddenTagHDIV"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.taglib.html.HiddenTagHDIV"
    classAftr: "org.hdiv.taglib.html.HiddenTagHDIV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.taglib.html.HiddenTagHDIV"
  classesB4: "org.hdiv.taglib.html.HiddenTagHDIV"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.taglib.html.RadioTagHDIV"
  classesB4: "org.hdiv.taglib.html.RadioTagHDIV"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.taglib.html.RadioTagHDIV"
    classAftr: "org.hdiv.taglib.html.RadioTagHDIV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.taglib.html.RadioTagHDIV"
  classesB4: "org.hdiv.taglib.html.RadioTagHDIV"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.upload.HDIVMultipartRequestHandler"
  classesB4: "org.hdiv.upload.HDIVMultipartRequestHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.hdiv.upload.HDIVMultipartRequestHandler"
    classAftr: "org.hdiv.upload.HDIVMultipartRequestHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.hdiv.upload.HDIVMultipartRequestHandler"
  classesB4: "org.hdiv.upload.HDIVMultipartRequestHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.hdiv.upload.HDIVMultipartRequestHandler.CommonsFormFile"
  classesB4: "org.hdiv.upload.HDIVMultipartRequestHandler.CommonsFormFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "hdiv"
commit: "hdiv"
tooBig: false

refactorings {
  classesAftr: "producer.HttpServletRequestProducerTest"
  classesB4: "producer.HttpServletRequestProducerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "get"
    classb4: "producer.HttpServletRequestProducerTest"
    classAftr: "producer.HttpServletRequestProducerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "producer.HttpServletRequestProducerTest"
  classesB4: "producer.HttpServletRequestProducerTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "producer.HttpServletRequestProducerTest"
  classesB4: "producer.HttpServletRequestProducerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "producer.HttpServletRequestProducerTest"
    classAftr: "producer.HttpServletRequestProducerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "producer.HttpServletRequestProducerTest"
  classesB4: "producer.HttpServletRequestProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "producer.HttpServletResponseProducerTest"
  classesB4: "producer.HttpServletResponseProducerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "get"
    classb4: "producer.HttpServletResponseProducerTest"
    classAftr: "producer.HttpServletResponseProducerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "producer.HttpServletResponseProducerTest"
  classesB4: "producer.HttpServletResponseProducerTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "producer.HttpServletResponseProducerTest"
  classesB4: "producer.HttpServletResponseProducerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "producer.HttpServletResponseProducerTest"
    classAftr: "producer.HttpServletResponseProducerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "producer.HttpServletResponseProducerTest"
  classesB4: "producer.HttpServletResponseProducerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "security.SecurityServlet"
  classesB4: "security.SecurityServlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "security.SecurityTest"
  classesB4: "security.SecurityTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "get"
    classb4: "security.SecurityTest"
    classAftr: "security.SecurityTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "security.SecurityTest"
  classesB4: "security.SecurityTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "security.SecurityTest"
  classesB4: "security.SecurityTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "security.SecurityTest"
    classAftr: "security.SecurityTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "security.SecurityTest"
  classesB4: "security.SecurityTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "GetMethod"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "GetMethod"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "GetMethod"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "GetMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "GetMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpClient"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpClient"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpClient"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpClient"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpClient"
      }
    }
  }
}
project: "framework"
commit: "framework"
tooBig: false

refactorings {
  classesAftr: "fr.ybonnel.codestory.path.scalaskel.Change"
  classesB4: "fr.ybonnel.codestory.path.ChangeScalaskelQueryHandler.Change"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "fr.ybonnel.codestory.path.ChangeScalaskelQueryHandler"
  classesB4: "fr.ybonnel.codestory.path.ChangeScalaskelQueryHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.ybonnel.codestory.ScalaskelTest"
  classesB4: "fr.ybonnel.codestory.ScalaskelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.ybonnel.codestory.path.scalaskel.Change"
  classesB4: "fr.ybonnel.codestory.path.ChangeScalaskelQueryHandler.Change"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "CodeStory"
commit: "CodeStory"
tooBig: false

refactorings {
  classesAftr: "fr.ybonnel.codestory.path.InsertEnonceHandler"
  classesB4: "fr.ybonnel.codestory.path.InsertEnonceHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "CodeStory"
commit: "CodeStory"
tooBig: false

refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.AbstractServer"
  classesB4: "org.sonar.plugins.buildstability.ci.AbstractServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "org.sonar.plugins.buildstability.ci.CiConnector"
    classAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "httpGet"
    classb4: "org.sonar.plugins.buildstability.ci.CiConnector"
    classAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.CiConnector"
  classesB4: "org.sonar.plugins.buildstability.ci.CiConnector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.bamboo.BambooBuildUnmarshaller"
  classesB4: "org.sonar.plugins.buildstability.ci.bamboo.BambooBuildUnmarshaller"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.bamboo.BambooBuildUnmarshaller"
  classesB4: "org.sonar.plugins.buildstability.ci.bamboo.BambooBuildUnmarshaller"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.bamboo.BambooBuildUnmarshaller"
  classesB4: "org.sonar.plugins.buildstability.ci.bamboo.BambooBuildUnmarshaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.bamboo.BambooServer"
  classesB4: "org.sonar.plugins.buildstability.ci.bamboo.BambooServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.hudson.HudsonServer"
  classesB4: "org.sonar.plugins.buildstability.ci.hudson.HudsonServer"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "org.sonar.plugins.buildstability.ci.hudson.HudsonServer"
    classAftr: "org.sonar.plugins.buildstability.ci.hudson.HudsonServer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.hudson.HudsonServer"
  classesB4: "org.sonar.plugins.buildstability.ci.hudson.HudsonServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.sonar.plugins.buildstability.ci.hudson.HudsonUtils"
  classesB4: "org.sonar.plugins.buildstability.ci.hudson.HudsonUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
project: "sonar-build-stability"
commit: "sonar-build-stability"
tooBig: false

refactorings {
  classesAftr: "org.juxtasoftware.resource.SourcesResource"
  classesB4: "org.juxtasoftware.resource.SourcesResource"
  typeChange {
    dtB4 {
      simpleType {
        name: "FileOutputStream"
      }
    }
    dtAftr {
      simpleType {
        name: "OutputStreamWriter"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "fos"
    nameaftr: "osw"
    classb4: "org.juxtasoftware.resource.SourcesResource"
    classAftr: "org.juxtasoftware.resource.SourcesResource"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.juxtasoftware.resource.SourcesResource"
  classesB4: "org.juxtasoftware.resource.SourcesResource"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.juxtasoftware.resource.SourcesResource"
  classesB4: "org.juxtasoftware.resource.SourcesResource"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "get"
    nameaftr: "get"
    classb4: "org.juxtasoftware.resource.SourcesResource"
    classAftr: "org.juxtasoftware.resource.SourcesResource"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.juxtasoftware.resource.SourcesResource"
  classesB4: "org.juxtasoftware.resource.SourcesResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.juxtasoftware.resource.SourcesResource.SourcesSerializer"
  classesB4: "org.juxtasoftware.resource.SourcesResource.SourcesSerializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.juxtasoftware.resource.SourcesResource.DuplicateSourceException"
  classesB4: "org.juxtasoftware.resource.SourcesResource.DuplicateSourceException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.io.FileOutputStream"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "java.io.OutputStreamWriter"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.io.FileOutputStream"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.io.OutputStreamWriter"
              typeOfType: Jdk
            }
          }
          chng {
            from: "java.io.FileOutputStream"
            to: "java.io.OutputStreamWriter"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.io.FileOutputStream"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "java.io.OutputStreamWriter"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.FileOutputStream"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.OutputStreamWriter"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.io.FileOutputStream"
        typeOfType: Jdk
      }
    }
  }
}
project: "juxta-service"
commit: "juxta-service"
tooBig: false

refactorings {
  classesAftr: "fr.pfgen.lims.repository.ResearchUnitRepository"
  classesB4: "fr.pfgen.lims.repository.BillingAddressRepository"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "fr.pfgen.lims.web.converters.AddressConverter"
  classesB4: "fr.pfgen.lims.web.converters.BillingAddressConverter"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.Address"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  typeChange {
    dtB4 {
      simpleType {
        name: "ShippingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "shippingAddress"
    nameaftr: "shippingAddress"
    classb4: "fr.pfgen.lims.domain.Client"
    classAftr: "fr.pfgen.lims.domain.Client"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  typeChange {
    dtB4 {
      simpleType {
        name: "BillingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "billingAddress"
    nameaftr: "billingAddress"
    classb4: "fr.pfgen.lims.domain.Client"
    classAftr: "fr.pfgen.lims.domain.Client"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  typeChange {
    dtB4 {
      simpleType {
        name: "ShippingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getShippingAddress"
    nameaftr: "getShippingAddress"
    classb4: "fr.pfgen.lims.domain.Client"
    classAftr: "fr.pfgen.lims.domain.Client"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  typeChange {
    dtB4 {
      simpleType {
        name: "BillingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getBillingAddress"
    nameaftr: "getBillingAddress"
    classb4: "fr.pfgen.lims.domain.Client"
    classAftr: "fr.pfgen.lims.domain.Client"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  typeChange {
    dtB4 {
      simpleType {
        name: "ShippingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "shippingAddress"
    nameaftr: "shippingAddress"
    classb4: "fr.pfgen.lims.domain.Client"
    classAftr: "fr.pfgen.lims.domain.Client"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  typeChange {
    dtB4 {
      simpleType {
        name: "BillingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "billingAddress"
    nameaftr: "billingAddress"
    classb4: "fr.pfgen.lims.domain.Client"
    classAftr: "fr.pfgen.lims.domain.Client"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Client"
  classesB4: "fr.pfgen.lims.domain.Client"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.ClientType"
  classesB4: "fr.pfgen.lims.domain.ClientType"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.AppCredentialsService"
  classesB4: "fr.pfgen.lims.service.AppCredentialsService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.AppCredentialsServiceImpl"
  classesB4: "fr.pfgen.lims.service.AppCredentialsServiceImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.AppCredentialsServiceImpl"
  classesB4: "fr.pfgen.lims.service.AppCredentialsServiceImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.AppCredentialsServiceImpl"
  classesB4: "fr.pfgen.lims.service.AppCredentialsServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.ClientService"
  classesB4: "fr.pfgen.lims.service.ClientService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.ClientServiceImpl"
  classesB4: "fr.pfgen.lims.service.ClientServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.web.people.ClientBean"
  classesB4: "fr.pfgen.lims.web.people.ClientBean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.web.people.CreateClientBean"
  classesB4: "fr.pfgen.lims.web.people.CreateClientBean"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.repository.ResearchUnitRepository"
  classesB4: "fr.pfgen.lims.repository.BillingAddressRepository"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.web.converters.AddressConverter"
  classesB4: "fr.pfgen.lims.web.converters.BillingAddressConverter"
  typeChange {
    dtB4 {
      simpleType {
        name: "BillingAddress"
      }
    }
    dtAftr {
      simpleType {
        name: "Address"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "ad"
    nameaftr: "ad"
    classb4: "fr.pfgen.lims.web.converters.BillingAddressConverter"
    classAftr: "fr.pfgen.lims.web.converters.AddressConverter"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "fr.pfgen.lims.web.converters.AddressConverter"
  classesB4: "fr.pfgen.lims.web.converters.BillingAddressConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.BillingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.BillingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.BillingAddress"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.BillingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.BillingAddress"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.BillingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.ShippingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.ShippingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.ShippingAddress"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.ShippingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.ShippingAddress"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "fr.pfgen.lims.domain.Address"
  classesB4: "fr.pfgen.lims.domain.ShippingAddress"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.AppCredentialsService"
  classesB4: "fr.pfgen.lims.service.AppCredentialsService"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "fr.pfgen.lims.service.AppCredentialsService"
  classesB4: "fr.pfgen.lims.service.AppCredentialsService"
  refactoringType: "RENAME_METHOD"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "fr.pfgen.lims.domain.ShippingAddress"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "fr.pfgen.lims.domain.Address"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "fr.pfgen.lims.domain.ShippingAddress"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "fr.pfgen.lims.domain.Address"
              typeOfType: Internal
            }
          }
          chng {
            from: "fr.pfgen.lims.domain.ShippingAddress"
            to: "fr.pfgen.lims.domain.Address"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "fr.pfgen.lims.domain.ShippingAddress"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "fr.pfgen.lims.domain.Address"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "fr.pfgen.lims.domain.ShippingAddress"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "fr.pfgen.lims.domain.Address"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "fr.pfgen.lims.domain.ShippingAddress"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "fr.pfgen.lims.domain.BillingAddress"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "fr.pfgen.lims.domain.Address"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "fr.pfgen.lims.domain.BillingAddress"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "fr.pfgen.lims.domain.Address"
              typeOfType: Internal
            }
          }
          chng {
            from: "fr.pfgen.lims.domain.BillingAddress"
            to: "fr.pfgen.lims.domain.Address"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "fr.pfgen.lims.domain.BillingAddress"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "fr.pfgen.lims.domain.Address"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "fr.pfgen.lims.domain.BillingAddress"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "fr.pfgen.lims.domain.Address"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "fr.pfgen.lims.domain.BillingAddress"
        typeOfType: Internal
      }
    }
  }
}
project: "drongo"
commit: "drongo"
tooBig: false

refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.KitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.KitParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.CfgKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.CfgKitParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Object"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "itemObject"
    nameaftr: "itemElement"
    classb4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
    classAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Object"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonElement"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "object"
    nameaftr: "element"
    classb4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
    classAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonObject"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "json"
    nameaftr: "json"
    classb4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
    classAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONParser"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonParser"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "parser"
    nameaftr: "parser"
    classb4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
    classAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "jsonKits"
    nameaftr: "jsonKits"
    classb4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
    classAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "JsonArray"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "jsonItems"
    nameaftr: "jsonItems"
    classb4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
    classAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  classesB4: "uk.thecodingbadgers.bkits.kit.parser.JsonKitParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.Object"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonElement"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.Object"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonElement"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "java.lang.Object"
            to: "com.google.gson.JsonElement"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.Object"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonElement"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonElement"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Object"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.parser.JSONParser"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonParser"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.parser.JSONParser"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonParser"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.simple.parser.JSONParser"
            to: "com.google.gson.JsonParser"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.parser.JSONParser"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonParser"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.parser.JSONParser"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonParser"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.parser.JSONParser"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONObject"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonObject"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.JSONObject"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonObject"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.simple.JSONObject"
            to: "com.google.gson.JsonObject"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.JSONObject"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonObject"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONObject"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonObject"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONObject"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONArray"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.google.gson.JsonArray"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.JSONArray"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.google.gson.JsonArray"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.json.simple.JSONArray"
            to: "com.google.gson.JsonArray"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.google.gson.JsonArray"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONArray"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.gson.JsonArray"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
  }
}
project: "Perks"
commit: "Perks"
tooBig: false

refactorings {
  classesAftr: "org.wylyeak.gjjx.Main"
  classesB4: "org.wylyeak.gjjx.Main"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "org.wylyeak.gjjx.Main"
  classesB4: "org.wylyeak.gjjx.Main"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "org.wylyeak.gjjx.Main"
  classesB4: "org.wylyeak.gjjx.Main"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "org.wylyeak.gjjx.Main"
  classesB4: "org.wylyeak.gjjx.Main"
  refactoringType: "REPLACE_VARIABLE_WITH_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.wylyeak.gjjx.Main"
  classesB4: "org.wylyeak.gjjx.Main"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "statusCode"
    nameaftr: "response"
    classb4: "org.wylyeak.gjjx.Main"
    classAftr: "org.wylyeak.gjjx.Main"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.wylyeak.gjjx.Main"
  classesB4: "org.wylyeak.gjjx.Main"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "int"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.HttpResponse"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.HttpResponse"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "int"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.HttpResponse"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
  }
}
project: "gjjx-book-car"
commit: "gjjx-book-car"
tooBig: false

refactorings {
  classesAftr: "com.google.common.testing.testng.TearDownTestCaseTest"
  classesB4: "com.google.common.testing.testng.TearDownTestCaseTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.google.common.testing.testng.TestNGAssertsTest"
  classesB4: "com.google.common.testing.testng.TestNGAssertsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "test-libraries-for-java"
commit: "test-libraries-for-java"
tooBig: false

refactorings {
  classesAftr: "org.apache.tez.client.TezClient"
  classesB4: "org.apache.tez.client.TezClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.client.TezClient"
    classAftr: "org.apache.tez.client.TezClient"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.client.TezClient"
  classesB4: "org.apache.tez.client.TezClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.client.TezClientUtils"
  classesB4: "org.apache.tez.client.TezClientUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.client.TezClientUtils"
    classAftr: "org.apache.tez.client.TezClientUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.client.TezClientUtils"
  classesB4: "org.apache.tez.client.TezClientUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezCommonUtils"
  classesB4: "org.apache.tez.common.TezCommonUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.TezCommonUtils"
    classAftr: "org.apache.tez.common.TezCommonUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezCommonUtils"
  classesB4: "org.apache.tez.common.TezCommonUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.tez.common.TezCommonUtils"
    classAftr: "org.apache.tez.common.TezCommonUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezCommonUtils"
  classesB4: "org.apache.tez.common.TezCommonUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezUtils"
  classesB4: "org.apache.tez.common.TezUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.TezUtils"
    classAftr: "org.apache.tez.common.TezUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezUtils"
  classesB4: "org.apache.tez.common.TezUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.VersionInfo"
  classesB4: "org.apache.tez.common.VersionInfo"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.VersionInfo"
    classAftr: "org.apache.tez.common.VersionInfo"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.VersionInfo"
  classesB4: "org.apache.tez.common.VersionInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.counters.AbstractCounters"
  classesB4: "org.apache.tez.common.counters.AbstractCounters"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.counters.AbstractCounters"
    classAftr: "org.apache.tez.common.counters.AbstractCounters"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.counters.AbstractCounters"
  classesB4: "org.apache.tez.common.counters.AbstractCounters"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.counters.Limits"
  classesB4: "org.apache.tez.common.counters.Limits"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.counters.Limits"
    classAftr: "org.apache.tez.common.counters.Limits"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.counters.Limits"
  classesB4: "org.apache.tez.common.counters.Limits"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.security.ACLConfigurationParser"
  classesB4: "org.apache.tez.common.security.ACLConfigurationParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.security.ACLConfigurationParser"
    classAftr: "org.apache.tez.common.security.ACLConfigurationParser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.security.ACLConfigurationParser"
  classesB4: "org.apache.tez.common.security.ACLConfigurationParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.security.ACLManager"
  classesB4: "org.apache.tez.common.security.ACLManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.security.ACLManager"
    classAftr: "org.apache.tez.common.security.ACLManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.security.ACLManager"
  classesB4: "org.apache.tez.common.security.ACLManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.security.TokenCache"
  classesB4: "org.apache.tez.common.security.TokenCache"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.security.TokenCache"
    classAftr: "org.apache.tez.common.security.TokenCache"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.security.TokenCache"
  classesB4: "org.apache.tez.common.security.TokenCache"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.DAG"
  classesB4: "org.apache.tez.dag.api.DAG"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.DAG"
    classAftr: "org.apache.tez.dag.api.DAG"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.DAG"
  classesB4: "org.apache.tez.dag.api.DAG"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.DAG.AnnotatedVertex"
  classesB4: "org.apache.tez.dag.api.DAG.AnnotatedVertex"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.TezConfiguration"
  classesB4: "org.apache.tez.dag.api.TezConfiguration"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.TezConfiguration"
    classAftr: "org.apache.tez.dag.api.TezConfiguration"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.TezConfiguration"
  classesB4: "org.apache.tez.dag.api.TezConfiguration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientImpl"
  classesB4: "org.apache.tez.dag.api.client.DAGClientImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.client.DAGClientImpl"
    classAftr: "org.apache.tez.dag.api.client.DAGClientImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientImpl"
  classesB4: "org.apache.tez.dag.api.client.DAGClientImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientTimelineImpl"
  classesB4: "org.apache.tez.dag.api.client.DAGClientTimelineImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.client.DAGClientTimelineImpl"
    classAftr: "org.apache.tez.dag.api.client.DAGClientTimelineImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientTimelineImpl"
  classesB4: "org.apache.tez.dag.api.client.DAGClientTimelineImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientTimelineImpl.VertexTaskStats"
  classesB4: "org.apache.tez.dag.api.client.DAGClientTimelineImpl.VertexTaskStats"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientTimelineImpl.PseudoAuthenticatedURLConnectionFactory"
  classesB4: "org.apache.tez.dag.api.client.DAGClientTimelineImpl.PseudoAuthenticatedURLConnectionFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.rpc.DAGClientRPCImpl"
  classesB4: "org.apache.tez.dag.api.client.rpc.DAGClientRPCImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.client.rpc.DAGClientRPCImpl"
    classAftr: "org.apache.tez.dag.api.client.rpc.DAGClientRPCImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.rpc.DAGClientRPCImpl"
  classesB4: "org.apache.tez.dag.api.client.rpc.DAGClientRPCImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.TestTezCommonUtils"
  classesB4: "org.apache.tez.common.TestTezCommonUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.TestTezCommonUtils"
    classAftr: "org.apache.tez.common.TestTezCommonUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.TestTezCommonUtils"
  classesB4: "org.apache.tez.common.TestTezCommonUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.AsyncDispatcher"
  classesB4: "org.apache.tez.common.AsyncDispatcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.AsyncDispatcher"
    classAftr: "org.apache.tez.common.AsyncDispatcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.AsyncDispatcher"
  classesB4: "org.apache.tez.common.AsyncDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.AsyncDispatcher.GenericEventHandler"
  classesB4: "org.apache.tez.common.AsyncDispatcher.GenericEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.AsyncDispatcher.MultiListenerHandler"
  classesB4: "org.apache.tez.common.AsyncDispatcher.MultiListenerHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezUtilsInternal"
  classesB4: "org.apache.tez.common.TezUtilsInternal"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.common.TezUtilsInternal"
    classAftr: "org.apache.tez.common.TezUtilsInternal"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.common.TezUtilsInternal"
  classesB4: "org.apache.tez.common.TezUtilsInternal"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.records.TestTezIds"
  classesB4: "org.apache.tez.dag.records.TestTezIds"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.records.TestTezIds"
    classAftr: "org.apache.tez.dag.records.TestTezIds"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.records.TestTezIds"
  classesB4: "org.apache.tez.dag.records.TestTezIds"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.client.LocalClient"
  classesB4: "org.apache.tez.client.LocalClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientHandler"
  classesB4: "org.apache.tez.dag.api.client.DAGClientHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.client.DAGClientHandler"
    classAftr: "org.apache.tez.dag.api.client.DAGClientHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientHandler"
  classesB4: "org.apache.tez.dag.api.client.DAGClientHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientServer"
  classesB4: "org.apache.tez.dag.api.client.DAGClientServer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.api.client.DAGClientServer"
    classAftr: "org.apache.tez.dag.api.client.DAGClientServer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.api.client.DAGClientServer"
  classesB4: "org.apache.tez.dag.api.client.DAGClientServer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.ContainerContext"
  classesB4: "org.apache.tez.dag.app.ContainerContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.ContainerContext"
    classAftr: "org.apache.tez.dag.app.ContainerContext"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.ContainerContext"
  classesB4: "org.apache.tez.dag.app.ContainerContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.DAGAppMaster"
    classAftr: "org.apache.tez.dag.app.DAGAppMaster"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterEventHandler"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterShutdownHandler"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterShutdownHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterShutdownHandler.AMShutdownRunnable"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterShutdownHandler.AMShutdownRunnable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.RunningAppContext"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.RunningAppContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.ServiceWithDependency"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.ServiceWithDependency"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.ServiceThread"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.ServiceThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.DagEventDispatcher"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.DagEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.TaskEventDispatcher"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.TaskEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.SpeculatorEventHandler"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.SpeculatorEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.TaskAttemptEventDispatcher"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.TaskAttemptEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.VertexEventDispatcher"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.VertexEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterShutdownHook"
  classesB4: "org.apache.tez.dag.app.DAGAppMaster.DAGAppMasterShutdownHook"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.RecoveryParser"
  classesB4: "org.apache.tez.dag.app.RecoveryParser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.RecoveryParser"
    classAftr: "org.apache.tez.dag.app.RecoveryParser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.RecoveryParser"
  classesB4: "org.apache.tez.dag.app.RecoveryParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.RecoveryParser.DAGSummaryData"
  classesB4: "org.apache.tez.dag.app.RecoveryParser.DAGSummaryData"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag"
  classesB4: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag"
    classAftr: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag"
  classesB4: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag.ContainerInfo"
  classesB4: "org.apache.tez.dag.app.TaskAttemptListenerImpTezDag.ContainerInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager"
  classesB4: "org.apache.tez.dag.app.dag.RootInputInitializerManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.RootInputInitializerManager"
    classAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager"
  classesB4: "org.apache.tez.dag.app.dag.RootInputInitializerManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager.VertexUpdateRegistrationHolder"
  classesB4: "org.apache.tez.dag.app.dag.RootInputInitializerManager.VertexUpdateRegistrationHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager.InputInitializerCallable"
  classesB4: "org.apache.tez.dag.app.dag.RootInputInitializerManager.InputInitializerCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager.InputInitializerCallback"
  classesB4: "org.apache.tez.dag.app.dag.RootInputInitializerManager.InputInitializerCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.RootInputInitializerManager.InitializerWrapper"
  classesB4: "org.apache.tez.dag.app.dag.RootInputInitializerManager.InitializerWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.DAGImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.VertexGroupInfo"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.VertexGroupInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.RecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.RecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.InitTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.InitTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.StartTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.StartTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.KillNewJobTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.KillNewJobTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.KillInitedJobTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.KillInitedJobTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.DAGKilledTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.DAGKilledTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.VertexCompletedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.VertexCompletedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.VertexReRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.VertexReRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.DiagnosticsUpdateTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.DiagnosticsUpdateTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.CounterUpdateTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.CounterUpdateTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.DAGSchedulerUpdateTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.DAGSchedulerUpdateTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGImpl.InternalErrorTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGImpl.InternalErrorTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrder"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrder"
    classAftr: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrder"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
    classAftr: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
  classesB4: "org.apache.tez.dag.app.dag.impl.DAGSchedulerNaturalOrderControlled"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.Edge"
  classesB4: "org.apache.tez.dag.app.dag.impl.Edge"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.Edge"
    classAftr: "org.apache.tez.dag.app.dag.impl.Edge"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.Edge"
  classesB4: "org.apache.tez.dag.app.dag.impl.Edge"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.Edge.EdgeManagerPluginContextImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.Edge.EdgeManagerPluginContextImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.ImmediateStartVertexManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.ImmediateStartVertexManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.ImmediateStartVertexManager"
    classAftr: "org.apache.tez.dag.app.dag.impl.ImmediateStartVertexManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.ImmediateStartVertexManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.ImmediateStartVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ScheduleTaskattemptTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ScheduleTaskattemptTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.DiagnosticInformationUpdater"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.DiagnosticInformationUpdater"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminateTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminateTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.StartedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.StartedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedBeforeRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedBeforeRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.NodeFailedBeforeRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.NodeFailedBeforeRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerTerminatingBeforeRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerTerminatingBeforeRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerCompletedBeforeRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerCompletedBeforeRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.StatusUpdaterTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.StatusUpdaterTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.SucceededTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.SucceededTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedWhileRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedWhileRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerCompletedWhileRunningTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerCompletedWhileRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerCompletedWhileTerminating"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.ContainerCompletedWhileTerminating"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedAfterSuccessHelper"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedAfterSuccessHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.RecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.RecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedAfterSuccessTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedAfterSuccessTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.OutputReportedFailedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.OutputReportedFailedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedTransitionHelper"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.TerminatedTransitionHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.FailedTransitionHelper"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.FailedTransitionHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.KilledTransitionHelper"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.KilledTransitionHelper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImplHelpers"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImplHelpers"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImplHelpers"
    classAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImplHelpers"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskAttemptImplHelpers"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskAttemptImplHelpers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TaskImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.InitialScheduleTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.InitialScheduleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.RedundantScheduleTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.RedundantScheduleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.AttemptSucceededTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.AttemptSucceededTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.AttemptKilledTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.AttemptKilledTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.RecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.RecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.KillWaitAttemptCompletedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.KillWaitAttemptCompletedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.AttemptFailedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.AttemptFailedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.TaskRetroactiveFailureTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.TaskRetroactiveFailureTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.TaskRetroactiveKilledTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.TaskRetroactiveKilledTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.KillNewTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.KillNewTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.TaskStateChangedCallback"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.TaskStateChangedCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.KillTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.KillTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TaskImpl.LaunchTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.TaskImpl.LaunchTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.VertexImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.StartRecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.StartRecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateDuringRecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateDuringRecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.NullEdgeInitializedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.NullEdgeInitializedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.BufferDataRecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.BufferDataRecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.RecoverTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.RecoverTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.IgnoreInitInInitedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.IgnoreInitInInitedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.InitTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.InitTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexInitializedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexInitializedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.RootInputInitializedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.RootInputInitializedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.InputDataInformationTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.InputDataInformationTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.SourceVertexStartedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.SourceVertexStartedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.StartWhileInitializingTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.StartWhileInitializingTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.StartTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.StartTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.RootInputInitFailedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.RootInputInitFailedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateNewVertexTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateNewVertexTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateInitedVertexTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateInitedVertexTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateInitingVertexTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TerminateInitingVertexTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexKilledTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexKilledTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexManagerUserCodeErrorTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexManagerUserCodeErrorTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.SourceTaskAttemptCompletedEventTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.SourceTaskAttemptCompletedEventTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskAttemptCompletedEventTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskAttemptCompletedEventTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskCompletedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskCompletedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskRescheduledTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskRescheduledTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexNoTasksCompletedTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexNoTasksCompletedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskCompletedAfterVertexSuccessTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskCompletedAfterVertexSuccessTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskRescheduledAfterVertexSuccessTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.TaskRescheduledAfterVertexSuccessTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.RouteEventTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.RouteEventTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.InternalErrorTransition"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.InternalErrorTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexStateChangedCallback"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexImpl.VertexStateChangedCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.VertexManager"
    classAftr: "org.apache.tez.dag.app.dag.impl.VertexManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerPluginContextImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerPluginContextImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerCallback"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerRootInputInitializedCallback"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerRootInputInitializedCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventOnVertexStateUpdate"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventOnVertexStateUpdate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventOnVertexStarted"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventOnVertexStarted"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventSourceTaskCompleted"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventSourceTaskCompleted"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventReceived"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventReceived"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventRootInputInitialized"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEventRootInputInitialized"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEvent"
  classesB4: "org.apache.tez.dag.app.dag.impl.VertexManager.VertexManagerEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator"
  classesB4: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator"
    classAftr: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator"
  classesB4: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator.TaskAttemptHistoryStatistics"
  classesB4: "org.apache.tez.dag.app.dag.speculation.legacy.LegacySpeculator.TaskAttemptHistoryStatistics"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl"
  classesB4: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl"
    classAftr: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl"
  classesB4: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl.Container"
  classesB4: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl.Container"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl.EventProcessor"
  classesB4: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl.EventProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl.CustomizedRejectedExecutionHandler"
  classesB4: "org.apache.tez.dag.app.launcher.ContainerLauncherImpl.CustomizedRejectedExecutionHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.LocalContainerLauncher"
  classesB4: "org.apache.tez.dag.app.launcher.LocalContainerLauncher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.launcher.LocalContainerLauncher"
    classAftr: "org.apache.tez.dag.app.launcher.LocalContainerLauncher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.LocalContainerLauncher"
  classesB4: "org.apache.tez.dag.app.launcher.LocalContainerLauncher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.LocalContainerLauncher.TezSubTaskRunner"
  classesB4: "org.apache.tez.dag.app.launcher.LocalContainerLauncher.TezSubTaskRunner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.launcher.LocalContainerLauncher.RunningTaskCallback"
  classesB4: "org.apache.tez.dag.app.launcher.LocalContainerLauncher.RunningTaskCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService"
    classAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.LocalContainerFactory"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.LocalContainerFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.TaskRequest"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.TaskRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.AllocateTaskRequest"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.AllocateTaskRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.DeallocateTaskRequest"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.DeallocateTaskRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.AsyncDelegateRequestHandler"
  classesB4: "org.apache.tez.dag.app.rm.LocalTaskSchedulerService.AsyncDelegateRequestHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TaskSchedulerEventHandler"
  classesB4: "org.apache.tez.dag.app.rm.TaskSchedulerEventHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.TaskSchedulerEventHandler"
    classAftr: "org.apache.tez.dag.app.rm.TaskSchedulerEventHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TaskSchedulerEventHandler"
  classesB4: "org.apache.tez.dag.app.rm.TaskSchedulerEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TezAMRMClientAsync"
  classesB4: "org.apache.tez.dag.app.rm.TezAMRMClientAsync"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.TezAMRMClientAsync"
    classAftr: "org.apache.tez.dag.app.rm.TezAMRMClientAsync"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TezAMRMClientAsync"
  classesB4: "org.apache.tez.dag.app.rm.TezAMRMClientAsync"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TezAMRMClientAsync.LocalityRequestCounter"
  classesB4: "org.apache.tez.dag.app.rm.TezAMRMClientAsync.LocalityRequestCounter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService"
    classAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.CRCookie"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.CRCookie"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.CookieContainerRequest"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.CookieContainerRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.ContainerAssigner"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.ContainerAssigner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.NodeLocalContainerAssigner"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.NodeLocalContainerAssigner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.RackLocalContainerAssigner"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.RackLocalContainerAssigner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.NonLocalContainerAssigner"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.NonLocalContainerAssigner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.DelayedContainerManager"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.DelayedContainerManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.DelayedContainerManager.HeldContainerTimerComparator"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.DelayedContainerManager.HeldContainerTimerComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.ContainerIterable"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.ContainerIterable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.HeldContainer"
  classesB4: "org.apache.tez.dag.app.rm.YarnTaskSchedulerService.HeldContainer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerHelpers"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerHelpers"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.container.AMContainerHelpers"
    classAftr: "org.apache.tez.dag.app.rm.container.AMContainerHelpers"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerHelpers"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerHelpers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.container.AMContainerImpl"
    classAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.LaunchRequestTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.LaunchRequestTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTaskAttemptAtAllocatedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTaskAttemptAtAllocatedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtAllocatedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtAllocatedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtAllocatedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtAllocatedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtAllocatedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtAllocatedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTaskAttemptTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTaskAttemptTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.LaunchedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.LaunchedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.LaunchFailedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.LaunchFailedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtLaunchingTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtLaunchingTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtLaunchingTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtLaunchingTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedBaseTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedBaseTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtLaunchingTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtLaunchingTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtLaunchingTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtLaunchingTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtIdleTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtIdleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtIdleTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtIdleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.TimedOutAtIdleTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.TimedOutAtIdleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtIdleTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtIdleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtIdleTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtIdleTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTaskAttemptAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTaskAttemptAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.TASucceededAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.TASucceededAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.StopRequestAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.TimedOutAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.TimedOutAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtRunningTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtRunningTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTAAtWindDownTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTAAtWindDownTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtWindDownTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.CompletedAtWindDownTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NMStopRequestFailedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NMStopRequestFailedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtNMStopRequestedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.NodeFailedAtNMStopRequestedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtNMStopRequestedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtNMStopRequestedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtStoppingTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorAtStoppingTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorBaseTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.ErrorBaseTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTAAtCompletedTransition"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerImpl.AssignTAAtCompletedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerMap"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerMap"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.container.AMContainerMap"
    classAftr: "org.apache.tez.dag.app.rm.container.AMContainerMap"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.container.AMContainerMap"
  classesB4: "org.apache.tez.dag.app.rm.container.AMContainerMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.node.AMNodeImpl"
    classAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.ContainerAllocatedTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.ContainerAllocatedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.TaskAttemptSucceededTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.TaskAttemptSucceededTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.TaskAttemptFailedTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.TaskAttemptFailedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.NodeTurnedUnhealthyTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.NodeTurnedUnhealthyTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.IgnoreBlacklistingDisabledTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.IgnoreBlacklistingDisabledTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.IgnoreBlacklistingStateChangeTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.IgnoreBlacklistingStateChangeTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.ContainerAllocatedWhileBlacklistedTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.ContainerAllocatedWhileBlacklistedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.TaskAttemptSucceededWhileBlacklistedTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.TaskAttemptSucceededWhileBlacklistedTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.CountFailedTaskAttemptTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.CountFailedTaskAttemptTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.GenericErrorTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.GenericErrorTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.ContainerAllocatedWhileUnhealthyTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.ContainerAllocatedWhileUnhealthyTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeImpl.NodeTurnedHealthyTransition"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeImpl.NodeTurnedHealthyTransition"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeTracker"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeTracker"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.node.AMNodeTracker"
    classAftr: "org.apache.tez.dag.app.rm.node.AMNodeTracker"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.AMNodeTracker"
  classesB4: "org.apache.tez.dag.app.rm.node.AMNodeTracker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.AMWebController"
  classesB4: "org.apache.tez.dag.app.web.AMWebController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.web.AMWebController"
    classAftr: "org.apache.tez.dag.app.web.AMWebController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.AMWebController"
  classesB4: "org.apache.tez.dag.app.web.AMWebController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.AMWebController.StaticAMView"
  classesB4: "org.apache.tez.dag.app.web.AMWebController.StaticAMView"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.AMWebController.ProgressInfo"
  classesB4: "org.apache.tez.dag.app.web.AMWebController.ProgressInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.WebUIService"
  classesB4: "org.apache.tez.dag.app.web.WebUIService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.web.WebUIService"
    classAftr: "org.apache.tez.dag.app.web.WebUIService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.WebUIService"
  classesB4: "org.apache.tez.dag.app.web.WebUIService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.web.WebUIService.TezAMWebApp"
  classesB4: "org.apache.tez.dag.app.web.WebUIService.TezAMWebApp"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.HistoryEventHandler"
  classesB4: "org.apache.tez.dag.history.HistoryEventHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.HistoryEventHandler"
    classAftr: "org.apache.tez.dag.history.HistoryEventHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.HistoryEventHandler"
  classesB4: "org.apache.tez.dag.history.HistoryEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.DAGFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.DAGFinishedEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.DAGFinishedEvent"
    classAftr: "org.apache.tez.dag.history.events.DAGFinishedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.DAGFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.DAGFinishedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.DAGSubmittedEvent"
  classesB4: "org.apache.tez.dag.history.events.DAGSubmittedEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.DAGSubmittedEvent"
    classAftr: "org.apache.tez.dag.history.events.DAGSubmittedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.DAGSubmittedEvent"
  classesB4: "org.apache.tez.dag.history.events.DAGSubmittedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.TaskAttemptFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.TaskAttemptFinishedEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.TaskAttemptFinishedEvent"
    classAftr: "org.apache.tez.dag.history.events.TaskAttemptFinishedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.TaskAttemptFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.TaskAttemptFinishedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.TaskFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.TaskFinishedEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.TaskFinishedEvent"
    classAftr: "org.apache.tez.dag.history.events.TaskFinishedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.TaskFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.TaskFinishedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.VertexFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.VertexFinishedEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.VertexFinishedEvent"
    classAftr: "org.apache.tez.dag.history.events.VertexFinishedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.VertexFinishedEvent"
  classesB4: "org.apache.tez.dag.history.events.VertexFinishedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.VertexRecoverableEventsGeneratedEvent"
  classesB4: "org.apache.tez.dag.history.events.VertexRecoverableEventsGeneratedEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.VertexRecoverableEventsGeneratedEvent"
    classAftr: "org.apache.tez.dag.history.events.VertexRecoverableEventsGeneratedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.VertexRecoverableEventsGeneratedEvent"
  classesB4: "org.apache.tez.dag.history.events.VertexRecoverableEventsGeneratedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.impl.SimpleHistoryLoggingService"
  classesB4: "org.apache.tez.dag.history.logging.impl.SimpleHistoryLoggingService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.logging.impl.SimpleHistoryLoggingService"
    classAftr: "org.apache.tez.dag.history.logging.impl.SimpleHistoryLoggingService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.impl.SimpleHistoryLoggingService"
  classesB4: "org.apache.tez.dag.history.logging.impl.SimpleHistoryLoggingService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.recovery.RecoveryService"
  classesB4: "org.apache.tez.dag.history.recovery.RecoveryService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.recovery.RecoveryService"
    classAftr: "org.apache.tez.dag.history.recovery.RecoveryService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.recovery.RecoveryService"
  classesB4: "org.apache.tez.dag.history.recovery.RecoveryService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.utils.Simple2LevelVersionComparator"
  classesB4: "org.apache.tez.dag.utils.Simple2LevelVersionComparator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.utils.Simple2LevelVersionComparator"
    classAftr: "org.apache.tez.dag.utils.Simple2LevelVersionComparator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.utils.Simple2LevelVersionComparator"
  classesB4: "org.apache.tez.dag.utils.Simple2LevelVersionComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.utils.Simple2LevelVersionComparator.Version"
  classesB4: "org.apache.tez.dag.utils.Simple2LevelVersionComparator.Version"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.utils.TaskSpecificLaunchCmdOption"
  classesB4: "org.apache.tez.dag.utils.TaskSpecificLaunchCmdOption"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.utils.TaskSpecificLaunchCmdOption"
    classAftr: "org.apache.tez.dag.utils.TaskSpecificLaunchCmdOption"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.utils.TaskSpecificLaunchCmdOption"
  classesB4: "org.apache.tez.dag.utils.TaskSpecificLaunchCmdOption"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.MockDAGAppMaster"
    classAftr: "org.apache.tez.dag.app.MockDAGAppMaster"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster.CountersDelegate"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster.CountersDelegate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher.ContainerData"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher.ContainerData"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher.Worker"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher.Worker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher.Worker.WorkerCallback"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster.MockContainerLauncher.Worker.WorkerCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.MockDAGAppMaster.MockDAGAppMasterShutdownHandler"
  classesB4: "org.apache.tez.dag.app.MockDAGAppMaster.MockDAGAppMasterShutdownHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.DagEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.DagEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TaskEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TaskEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TaskAttemptEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TaskAttemptEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TaskAttemptEventDisptacher2"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TaskAttemptEventDisptacher2"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.VertexEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.VertexEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.DAGFinishEventHandler"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.DAGFinishEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TotalCountingOutputCommitter"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.TotalCountingOutputCommitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.AMSchedulerEventHandler"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.AMSchedulerEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.CustomizedEdgeManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestDAGImpl.CustomizedEdgeManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestTaskImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestTaskImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TestTaskImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.TestTaskImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestTaskImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestTaskImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestTaskImpl.TestEventHandler"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestTaskImpl.TestEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestTaskImpl.MockTaskImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestTaskImpl.MockTaskImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestTaskImpl.MockTaskAttemptImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestTaskImpl.MockTaskAttemptImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl"
    classAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.CountingOutputCommitter"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.CountingOutputCommitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.CountingOutputCommitter.CountingOutputCommitterConfig"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.CountingOutputCommitter.CountingOutputCommitterConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.TaskAttemptEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.TaskAttemptEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.TaskEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.TaskEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.DagEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.DagEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexEventDispatcher"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.TestUpdateListener"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.TestUpdateListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexImplWithRunningInputInitializer"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexImplWithRunningInputInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexImplWithControlledInitializerManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexImplWithControlledInitializerManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInputInitializerManagerWithRunningInitializer"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInputInitializerManagerWithRunningInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInputInitializerManagerControlled"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInputInitializerManagerControlled"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInputSpecUpdaterVertexManager"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInputSpecUpdaterVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInitializerSettingParallelismTo0"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.RootInitializerSettingParallelismTo0"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexManagerWithException"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.VertexManagerWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.EventHandlingRootInputInitializer"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.EventHandlingRootInputInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.ContextSettableInputInitialzier"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexImpl.ContextSettableInputInitialzier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery"
    classAftr: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery.VertexEventHanlder"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery.VertexEventHanlder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery.TaskEventHandler"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery.TaskEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery.TaskAttemptEventHandler"
  classesB4: "org.apache.tez.dag.app.dag.impl.TestVertexRecovery.TaskAttemptEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TestContainerReuse"
  classesB4: "org.apache.tez.dag.app.rm.TestContainerReuse"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.TestContainerReuse"
    classAftr: "org.apache.tez.dag.app.rm.TestContainerReuse"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TestContainerReuse"
  classesB4: "org.apache.tez.dag.app.rm.TestContainerReuse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.TestContainerReuse.ChangingDAGIDAnswer"
  classesB4: "org.apache.tez.dag.app.rm.TestContainerReuse.ChangingDAGIDAnswer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker"
  classesB4: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker"
    classAftr: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker"
  classesB4: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker.TestEventHandler"
  classesB4: "org.apache.tez.dag.app.rm.node.TestAMNodeTracker.TestEventHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.TestHistoryEventsProtoConversion"
  classesB4: "org.apache.tez.dag.history.events.TestHistoryEventsProtoConversion"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.events.TestHistoryEventsProtoConversion"
    classAftr: "org.apache.tez.dag.history.events.TestHistoryEventsProtoConversion"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.events.TestHistoryEventsProtoConversion"
  classesB4: "org.apache.tez.dag.history.events.TestHistoryEventsProtoConversion"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.HashJoinExample"
  classesB4: "org.apache.tez.examples.HashJoinExample"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.HashJoinExample"
    classAftr: "org.apache.tez.examples.HashJoinExample"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.HashJoinExample"
  classesB4: "org.apache.tez.examples.HashJoinExample"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.HashJoinExample.ForwardingProcessor"
  classesB4: "org.apache.tez.examples.HashJoinExample.ForwardingProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.HashJoinExample.HashJoinProcessor"
  classesB4: "org.apache.tez.examples.HashJoinExample.HashJoinProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinDataGen"
  classesB4: "org.apache.tez.examples.JoinDataGen"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.JoinDataGen"
    classAftr: "org.apache.tez.examples.JoinDataGen"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinDataGen"
  classesB4: "org.apache.tez.examples.JoinDataGen"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinDataGen.GenDataProcessor"
  classesB4: "org.apache.tez.examples.JoinDataGen.GenDataProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.JoinDataGen.GenDataProcessor"
    classAftr: "org.apache.tez.examples.JoinDataGen.GenDataProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinDataGen.GenDataProcessor"
  classesB4: "org.apache.tez.examples.JoinDataGen.GenDataProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinValidate"
  classesB4: "org.apache.tez.examples.JoinValidate"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.JoinValidate"
    classAftr: "org.apache.tez.examples.JoinValidate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinValidate"
  classesB4: "org.apache.tez.examples.JoinValidate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinValidate.JoinValidateProcessor"
  classesB4: "org.apache.tez.examples.JoinValidate.JoinValidateProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.JoinValidate.JoinValidateProcessor"
    classAftr: "org.apache.tez.examples.JoinValidate.JoinValidateProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.JoinValidate.JoinValidateProcessor"
  classesB4: "org.apache.tez.examples.JoinValidate.JoinValidateProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.OrderedWordCount"
  classesB4: "org.apache.tez.examples.OrderedWordCount"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.OrderedWordCount"
    classAftr: "org.apache.tez.examples.OrderedWordCount"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.OrderedWordCount"
  classesB4: "org.apache.tez.examples.OrderedWordCount"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.OrderedWordCount.SumProcessor"
  classesB4: "org.apache.tez.examples.OrderedWordCount.SumProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.OrderedWordCount.NoOpSorter"
  classesB4: "org.apache.tez.examples.OrderedWordCount.NoOpSorter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.SimpleSessionExample"
  classesB4: "org.apache.tez.examples.SimpleSessionExample"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.SimpleSessionExample"
    classAftr: "org.apache.tez.examples.SimpleSessionExample"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.SimpleSessionExample"
  classesB4: "org.apache.tez.examples.SimpleSessionExample"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.SortMergeJoinExample"
  classesB4: "org.apache.tez.examples.SortMergeJoinExample"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.SortMergeJoinExample"
    classAftr: "org.apache.tez.examples.SortMergeJoinExample"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.SortMergeJoinExample"
  classesB4: "org.apache.tez.examples.SortMergeJoinExample"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.SortMergeJoinExample.SortMergeJoinProcessor"
  classesB4: "org.apache.tez.examples.SortMergeJoinExample.SortMergeJoinProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.TezExampleBase"
  classesB4: "org.apache.tez.examples.TezExampleBase"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.TezExampleBase"
    classAftr: "org.apache.tez.examples.TezExampleBase"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.TezExampleBase"
  classesB4: "org.apache.tez.examples.TezExampleBase"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.apache.tez.examples.TezExampleBase"
    classAftr: "org.apache.tez.examples.TezExampleBase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.TezExampleBase"
  classesB4: "org.apache.tez.examples.TezExampleBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.WordCount"
  classesB4: "org.apache.tez.examples.WordCount"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.examples.WordCount"
    classAftr: "org.apache.tez.examples.WordCount"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.examples.WordCount"
  classesB4: "org.apache.tez.examples.WordCount"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.WordCount.TokenProcessor"
  classesB4: "org.apache.tez.examples.WordCount.TokenProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.examples.WordCount.SumProcessor"
  classesB4: "org.apache.tez.examples.WordCount.SumProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat"
  classesB4: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat"
    classAftr: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat"
  classesB4: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat.TezGroupedSplitsRecordReader"
  classesB4: "org.apache.hadoop.mapred.split.TezGroupedSplitsInputFormat.TezGroupedSplitsRecordReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper"
  classesB4: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper"
    classAftr: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper"
  classesB4: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper.SplitHolder"
  classesB4: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper.SplitHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper.LocationHolder"
  classesB4: "org.apache.hadoop.mapred.split.TezMapredSplitsGrouper.LocationHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.SplitMetaInfoReaderTez"
  classesB4: "org.apache.hadoop.mapreduce.split.SplitMetaInfoReaderTez"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.hadoop.mapreduce.split.SplitMetaInfoReaderTez"
    classAftr: "org.apache.hadoop.mapreduce.split.SplitMetaInfoReaderTez"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.SplitMetaInfoReaderTez"
  classesB4: "org.apache.hadoop.mapreduce.split.SplitMetaInfoReaderTez"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat"
  classesB4: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat"
    classAftr: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat"
  classesB4: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat.SplitHolder"
  classesB4: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat.SplitHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat.LocationHolder"
  classesB4: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat.LocationHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat.TezGroupedSplitsRecordReader"
  classesB4: "org.apache.hadoop.mapreduce.split.TezGroupedSplitsInputFormat.TezGroupedSplitsRecordReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper"
  classesB4: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper"
    classAftr: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper"
  classesB4: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper.SplitHolder"
  classesB4: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper.SplitHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper.LocationHolder"
  classesB4: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper.LocationHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper.TezMRSplitsGrouperConfigBuilder"
  classesB4: "org.apache.hadoop.mapreduce.split.TezMapReduceSplitsGrouper.TezMRSplitsGrouperConfigBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.client.ResourceMgrDelegate"
  classesB4: "org.apache.tez.mapreduce.client.ResourceMgrDelegate"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.client.ResourceMgrDelegate"
    classAftr: "org.apache.tez.mapreduce.client.ResourceMgrDelegate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.client.ResourceMgrDelegate"
  classesB4: "org.apache.tez.mapreduce.client.ResourceMgrDelegate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.client.YARNRunner"
  classesB4: "org.apache.tez.mapreduce.client.YARNRunner"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.client.YARNRunner"
    classAftr: "org.apache.tez.mapreduce.client.YARNRunner"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.client.YARNRunner"
  classesB4: "org.apache.tez.mapreduce.client.YARNRunner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.client.YARNRunner.MRInputHelpersInternal"
  classesB4: "org.apache.tez.mapreduce.client.YARNRunner.MRInputHelpersInternal"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.combine.MRCombiner"
  classesB4: "org.apache.tez.mapreduce.combine.MRCombiner"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.combine.MRCombiner"
    classAftr: "org.apache.tez.mapreduce.combine.MRCombiner"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.combine.MRCombiner"
  classesB4: "org.apache.tez.mapreduce.combine.MRCombiner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.combine.MRCombiner.CombinerValuesIterator"
  classesB4: "org.apache.tez.mapreduce.combine.MRCombiner.CombinerValuesIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.committer.MROutputCommitter"
  classesB4: "org.apache.tez.mapreduce.committer.MROutputCommitter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.committer.MROutputCommitter"
    classAftr: "org.apache.tez.mapreduce.committer.MROutputCommitter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.committer.MROutputCommitter"
  classesB4: "org.apache.tez.mapreduce.committer.MROutputCommitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.committer.MROutputCommitter.MRJobContextImpl"
  classesB4: "org.apache.tez.mapreduce.committer.MROutputCommitter.MRJobContextImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.common.MRInputAMSplitGenerator"
  classesB4: "org.apache.tez.mapreduce.common.MRInputAMSplitGenerator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.common.MRInputAMSplitGenerator"
    classAftr: "org.apache.tez.mapreduce.common.MRInputAMSplitGenerator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.common.MRInputAMSplitGenerator"
  classesB4: "org.apache.tez.mapreduce.common.MRInputAMSplitGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.common.MRInputSplitDistributor"
  classesB4: "org.apache.tez.mapreduce.common.MRInputSplitDistributor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.common.MRInputSplitDistributor"
    classAftr: "org.apache.tez.mapreduce.common.MRInputSplitDistributor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.common.MRInputSplitDistributor"
  classesB4: "org.apache.tez.mapreduce.common.MRInputSplitDistributor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.MRHelpers"
  classesB4: "org.apache.tez.mapreduce.hadoop.MRHelpers"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.hadoop.MRHelpers"
    classAftr: "org.apache.tez.mapreduce.hadoop.MRHelpers"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.MRHelpers"
  classesB4: "org.apache.tez.mapreduce.hadoop.MRHelpers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.MRInputHelpers"
  classesB4: "org.apache.tez.mapreduce.hadoop.MRInputHelpers"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.hadoop.MRInputHelpers"
    classAftr: "org.apache.tez.mapreduce.hadoop.MRInputHelpers"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.MRInputHelpers"
  classesB4: "org.apache.tez.mapreduce.hadoop.MRInputHelpers"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.MRInputHelpers.InputSplitComparator"
  classesB4: "org.apache.tez.mapreduce.hadoop.MRInputHelpers.InputSplitComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.MRInputHelpers.OldInputSplitComparator"
  classesB4: "org.apache.tez.mapreduce.hadoop.MRInputHelpers.OldInputSplitComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.mapred.MRCounters"
  classesB4: "org.apache.tez.mapreduce.hadoop.mapred.MRCounters"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.mapred.MRCounters.MRCounterGroup"
  classesB4: "org.apache.tez.mapreduce.hadoop.mapred.MRCounters.MRCounterGroup"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.hadoop.mapred.MRCounters.MRCounter"
  classesB4: "org.apache.tez.mapreduce.hadoop.mapred.MRCounters.MRCounter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MRInput"
  classesB4: "org.apache.tez.mapreduce.input.MRInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.input.MRInput"
    classAftr: "org.apache.tez.mapreduce.input.MRInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MRInput"
  classesB4: "org.apache.tez.mapreduce.input.MRInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MRInput.MRInputConfigBuilder"
  classesB4: "org.apache.tez.mapreduce.input.MRInput.MRInputConfigBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MRInput.MRInputHelpersInternal"
  classesB4: "org.apache.tez.mapreduce.input.MRInput.MRInputHelpersInternal"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MRInputLegacy"
  classesB4: "org.apache.tez.mapreduce.input.MRInputLegacy"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.input.MRInputLegacy"
    classAftr: "org.apache.tez.mapreduce.input.MRInputLegacy"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MRInputLegacy"
  classesB4: "org.apache.tez.mapreduce.input.MRInputLegacy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MultiMRInput"
  classesB4: "org.apache.tez.mapreduce.input.MultiMRInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.input.MultiMRInput"
    classAftr: "org.apache.tez.mapreduce.input.MultiMRInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MultiMRInput"
  classesB4: "org.apache.tez.mapreduce.input.MultiMRInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.MultiMRInput.MultiMRInputConfigBuilder"
  classesB4: "org.apache.tez.mapreduce.input.MultiMRInput.MultiMRInputConfigBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.lib.MRInputUtils"
  classesB4: "org.apache.tez.mapreduce.lib.MRInputUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.lib.MRInputUtils"
    classAftr: "org.apache.tez.mapreduce.lib.MRInputUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.lib.MRInputUtils"
  classesB4: "org.apache.tez.mapreduce.lib.MRInputUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.lib.MRReaderMapReduce"
  classesB4: "org.apache.tez.mapreduce.lib.MRReaderMapReduce"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.lib.MRReaderMapReduce"
    classAftr: "org.apache.tez.mapreduce.lib.MRReaderMapReduce"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.lib.MRReaderMapReduce"
  classesB4: "org.apache.tez.mapreduce.lib.MRReaderMapReduce"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.lib.MRReaderMapred"
  classesB4: "org.apache.tez.mapreduce.lib.MRReaderMapred"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.lib.MRReaderMapred"
    classAftr: "org.apache.tez.mapreduce.lib.MRReaderMapred"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.lib.MRReaderMapred"
  classesB4: "org.apache.tez.mapreduce.lib.MRReaderMapred"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.output.MROutput"
  classesB4: "org.apache.tez.mapreduce.output.MROutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.output.MROutput"
    classAftr: "org.apache.tez.mapreduce.output.MROutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.output.MROutput"
  classesB4: "org.apache.tez.mapreduce.output.MROutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.output.MROutput.MROutputConfigBuilder"
  classesB4: "org.apache.tez.mapreduce.output.MROutput.MROutputConfigBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.partition.MRPartitioner"
  classesB4: "org.apache.tez.mapreduce.partition.MRPartitioner"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.partition.MRPartitioner"
    classAftr: "org.apache.tez.mapreduce.partition.MRPartitioner"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.partition.MRPartitioner"
  classesB4: "org.apache.tez.mapreduce.partition.MRPartitioner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.MRTask"
  classesB4: "org.apache.tez.mapreduce.processor.MRTask"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.MRTask"
    classAftr: "org.apache.tez.mapreduce.processor.MRTask"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.MRTask"
  classesB4: "org.apache.tez.mapreduce.processor.MRTask"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.SimpleMRProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.SimpleMRProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.SimpleMRProcessor"
    classAftr: "org.apache.tez.mapreduce.processor.SimpleMRProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.SimpleMRProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.SimpleMRProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.map.MapProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.map.MapProcessor"
    classAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.map.MapProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor.NewRecordReader"
  classesB4: "org.apache.tez.mapreduce.processor.map.MapProcessor.NewRecordReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor.OldRecordReader"
  classesB4: "org.apache.tez.mapreduce.processor.map.MapProcessor.OldRecordReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor.OldOutputCollector"
  classesB4: "org.apache.tez.mapreduce.processor.map.MapProcessor.OldOutputCollector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.MapProcessor.NewOutputCollector"
  classesB4: "org.apache.tez.mapreduce.processor.map.MapProcessor.NewOutputCollector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor"
    classAftr: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor.ReduceValuesIterator"
  classesB4: "org.apache.tez.mapreduce.processor.reduce.ReduceProcessor.ReduceValuesIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TestGroupedSplits"
  classesB4: "org.apache.hadoop.mapred.split.TestGroupedSplits"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.hadoop.mapred.split.TestGroupedSplits"
    classAftr: "org.apache.hadoop.mapred.split.TestGroupedSplits"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TestGroupedSplits"
  classesB4: "org.apache.hadoop.mapred.split.TestGroupedSplits"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TestGroupedSplits.Range"
  classesB4: "org.apache.hadoop.mapred.split.TestGroupedSplits.Range"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.mapred.split.TestGroupedSplits.TestInputSplit"
  classesB4: "org.apache.hadoop.mapred.split.TestGroupedSplits.TestInputSplit"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestUmbilical"
  classesB4: "org.apache.tez.mapreduce.TestUmbilical"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.TestUmbilical"
    classAftr: "org.apache.tez.mapreduce.TestUmbilical"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestUmbilical"
  classesB4: "org.apache.tez.mapreduce.TestUmbilical"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.TestMultiMRInput"
  classesB4: "org.apache.tez.mapreduce.input.TestMultiMRInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.input.TestMultiMRInput"
    classAftr: "org.apache.tez.mapreduce.input.TestMultiMRInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.input.TestMultiMRInput"
  classesB4: "org.apache.tez.mapreduce.input.TestMultiMRInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.MapUtils"
  classesB4: "org.apache.tez.mapreduce.processor.MapUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.MapUtils"
    classAftr: "org.apache.tez.mapreduce.processor.MapUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.MapUtils"
  classesB4: "org.apache.tez.mapreduce.processor.MapUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.TestMapProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.map.TestMapProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.map.TestMapProcessor"
    classAftr: "org.apache.tez.mapreduce.processor.map.TestMapProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.map.TestMapProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.map.TestMapProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.reduce.TestReduceProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.reduce.TestReduceProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.processor.reduce.TestReduceProcessor"
    classAftr: "org.apache.tez.mapreduce.processor.reduce.TestReduceProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.processor.reduce.TestReduceProcessor"
  classesB4: "org.apache.tez.mapreduce.processor.reduce.TestReduceProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.ats.acls.ATSHistoryACLPolicyManager"
  classesB4: "org.apache.tez.dag.history.ats.acls.ATSHistoryACLPolicyManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.ats.acls.ATSHistoryACLPolicyManager"
    classAftr: "org.apache.tez.dag.history.ats.acls.ATSHistoryACLPolicyManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.ats.acls.ATSHistoryACLPolicyManager"
  classesB4: "org.apache.tez.dag.history.ats.acls.ATSHistoryACLPolicyManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.ats.acls.TestATSHistoryWithACLs"
  classesB4: "org.apache.tez.dag.history.ats.acls.TestATSHistoryWithACLs"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.ats.acls.TestATSHistoryWithACLs"
    classAftr: "org.apache.tez.dag.history.ats.acls.TestATSHistoryWithACLs"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.ats.acls.TestATSHistoryWithACLs"
  classesB4: "org.apache.tez.dag.history.ats.acls.TestATSHistoryWithACLs"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService"
  classesB4: "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService"
    classAftr: "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService"
  classesB4: "org.apache.tez.dag.history.logging.ats.ATSHistoryLoggingService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.ats.TestATSHistoryLoggingService"
  classesB4: "org.apache.tez.dag.history.logging.ats.TestATSHistoryLoggingService"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.logging.ats.TestATSHistoryLoggingService"
    classAftr: "org.apache.tez.dag.history.logging.ats.TestATSHistoryLoggingService"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.ats.TestATSHistoryLoggingService"
  classesB4: "org.apache.tez.dag.history.logging.ats.TestATSHistoryLoggingService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.ats.TestATSHistoryWithMiniCluster"
  classesB4: "org.apache.tez.dag.history.logging.ats.TestATSHistoryWithMiniCluster"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.history.logging.ats.TestATSHistoryWithMiniCluster"
    classAftr: "org.apache.tez.dag.history.logging.ats.TestATSHistoryWithMiniCluster"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.history.logging.ats.TestATSHistoryWithMiniCluster"
  classesB4: "org.apache.tez.dag.history.logging.ats.TestATSHistoryWithMiniCluster"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.tests.MiniTezClusterWithTimeline"
  classesB4: "org.apache.tez.tests.MiniTezClusterWithTimeline"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.tests.MiniTezClusterWithTimeline"
    classAftr: "org.apache.tez.tests.MiniTezClusterWithTimeline"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.tests.MiniTezClusterWithTimeline"
  classesB4: "org.apache.tez.tests.MiniTezClusterWithTimeline"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask"
  classesB4: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask"
    classAftr: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask"
  classesB4: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.InitializeInputCallable"
  classesB4: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.InitializeInputCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.StartInputCallable"
  classesB4: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.StartInputCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.InitializeOutputCallable"
  classesB4: "org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.InitializeOutputCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.common.resources.MemoryDistributor"
  classesB4: "org.apache.tez.runtime.common.resources.MemoryDistributor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.common.resources.MemoryDistributor"
    classAftr: "org.apache.tez.runtime.common.resources.MemoryDistributor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.common.resources.MemoryDistributor"
  classesB4: "org.apache.tez.runtime.common.resources.MemoryDistributor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.common.resources.MemoryDistributor.RequestorInfo"
  classesB4: "org.apache.tez.runtime.common.resources.MemoryDistributor.RequestorInfo"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.common.resources.MemoryDistributor.RequestorInfo"
    classAftr: "org.apache.tez.runtime.common.resources.MemoryDistributor.RequestorInfo"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.common.resources.MemoryDistributor.RequestorInfo"
  classesB4: "org.apache.tez.runtime.common.resources.MemoryDistributor.RequestorInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.common.resources.ScalingAllocator"
  classesB4: "org.apache.tez.runtime.common.resources.ScalingAllocator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.common.resources.ScalingAllocator"
    classAftr: "org.apache.tez.runtime.common.resources.ScalingAllocator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.common.resources.ScalingAllocator"
  classesB4: "org.apache.tez.runtime.common.resources.ScalingAllocator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.metrics.TaskCounterUpdater"
  classesB4: "org.apache.tez.runtime.metrics.TaskCounterUpdater"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.metrics.TaskCounterUpdater"
    classAftr: "org.apache.tez.runtime.metrics.TaskCounterUpdater"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.metrics.TaskCounterUpdater"
  classesB4: "org.apache.tez.runtime.metrics.TaskCounterUpdater"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.ContainerReporter"
  classesB4: "org.apache.tez.runtime.task.ContainerReporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TaskReporter"
  classesB4: "org.apache.tez.runtime.task.TaskReporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TaskReporter.HeartbeatCallable"
  classesB4: "org.apache.tez.runtime.task.TaskReporter.HeartbeatCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TaskReporter.HeartbeatCallback"
  classesB4: "org.apache.tez.runtime.task.TaskReporter.HeartbeatCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TaskReporter.ResponseWrapper"
  classesB4: "org.apache.tez.runtime.task.TaskReporter.ResponseWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TezChild"
  classesB4: "org.apache.tez.runtime.task.TezChild"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TezChild.ContainerExecutionResult"
  classesB4: "org.apache.tez.runtime.task.TezChild.ContainerExecutionResult"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TezTaskRunner"
  classesB4: "org.apache.tez.runtime.task.TezTaskRunner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TezTaskRunner.TaskRunnerCallable"
  classesB4: "org.apache.tez.runtime.task.TezTaskRunner.TaskRunnerCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TestTaskExecution"
  classesB4: "org.apache.tez.runtime.task.TestTaskExecution"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TestTaskExecution.TaskRunnerCallable"
  classesB4: "org.apache.tez.runtime.task.TestTaskExecution.TaskRunnerCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TestTaskExecution.TestProcessor"
  classesB4: "org.apache.tez.runtime.task.TestTaskExecution.TestProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.task.TestTaskExecution.TezTaskUmbilicalForTest"
  classesB4: "org.apache.tez.runtime.task.TestTaskExecution.TezTaskUmbilicalForTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager"
  classesB4: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager"
    classAftr: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager"
  classesB4: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager.SourceVertexInfo"
  classesB4: "org.apache.tez.dag.library.vertexmanager.InputReadyVertexManager.SourceVertexInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager"
  classesB4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager"
    classAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager"
  classesB4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.SourceVertexInfo"
  classesB4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.SourceVertexInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.CustomShuffleEdgeManager"
  classesB4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.CustomShuffleEdgeManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.CustomShuffleEdgeManagerConfig"
  classesB4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.CustomShuffleEdgeManagerConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.ShuffleVertexManagerConfigBuilder"
  classesB4: "org.apache.tez.dag.library.vertexmanager.ShuffleVertexManager.ShuffleVertexManagerConfigBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.broadcast.output.FileBasedKVWriter"
  classesB4: "org.apache.tez.runtime.library.broadcast.output.FileBasedKVWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.broadcast.output.FileBasedKVWriter"
    classAftr: "org.apache.tez.runtime.library.broadcast.output.FileBasedKVWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.broadcast.output.FileBasedKVWriter"
  classesB4: "org.apache.tez.runtime.library.broadcast.output.FileBasedKVWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TezRuntimeUtils"
  classesB4: "org.apache.tez.runtime.library.common.TezRuntimeUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.TezRuntimeUtils"
    classAftr: "org.apache.tez.runtime.library.common.TezRuntimeUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TezRuntimeUtils"
  classesB4: "org.apache.tez.runtime.library.common.TezRuntimeUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.ValuesIterator"
  classesB4: "org.apache.tez.runtime.library.common.ValuesIterator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.ValuesIterator"
    classAftr: "org.apache.tez.runtime.library.common.ValuesIterator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.ValuesIterator"
  classesB4: "org.apache.tez.runtime.library.common.ValuesIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.readers.UnorderedKVReader"
  classesB4: "org.apache.tez.runtime.library.common.readers.UnorderedKVReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.readers.UnorderedKVReader"
    classAftr: "org.apache.tez.runtime.library.common.readers.UnorderedKVReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.readers.UnorderedKVReader"
  classesB4: "org.apache.tez.runtime.library.common.readers.UnorderedKVReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization"
  classesB4: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization"
    classAftr: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization"
  classesB4: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization.TezBytesWritableDeserializer"
  classesB4: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization.TezBytesWritableDeserializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization.TezBytesWritableSerializer"
  classesB4: "org.apache.tez.runtime.library.common.serializer.TezBytesWritableSerialization.TezBytesWritableSerializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.DiskFetchedInput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.DiskFetchedInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.DiskFetchedInput"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.DiskFetchedInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.DiskFetchedInput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.DiskFetchedInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.Fetcher"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.Fetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.Fetcher"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.Fetcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.Fetcher"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.Fetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.Fetcher.CachingCallBack"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.Fetcher.CachingCallBack"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.Fetcher.HostFetchResult"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.Fetcher.HostFetchResult"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.Fetcher.FetcherBuilder"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.Fetcher.FetcherBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.HttpConnection"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.HttpConnection"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.HttpConnection"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.HttpConnection"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.HttpConnection"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.HttpConnection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.HttpConnection.HttpConnectionParams"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.HttpConnection.HttpConnectionParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.HttpConnection.HttpConnectionParamsBuilder"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.HttpConnection.HttpConnectionParamsBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.LocalDiskFetchedInput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.LocalDiskFetchedInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.LocalDiskFetchedInput"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.LocalDiskFetchedInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.LocalDiskFetchedInput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.LocalDiskFetchedInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.ShuffleUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleInputEventHandlerImpl"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleInputEventHandlerImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleInputEventHandlerImpl"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleInputEventHandlerImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleInputEventHandlerImpl"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleInputEventHandlerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.RunShuffleCallable"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.RunShuffleCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.ShuffleEventInfo"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.ShuffleEventInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.NullFetchedInput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.NullFetchedInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.SchedulerFutureCallback"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.SchedulerFutureCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.FetchFutureCallback"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.ShuffleManager.FetchFutureCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.SimpleFetchedInputAllocator"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.SimpleFetchedInputAllocator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.impl.SimpleFetchedInputAllocator"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.impl.SimpleFetchedInputAllocator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.SimpleFetchedInputAllocator"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.SimpleFetchedInputAllocator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.FetcherOrderedGrouped"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.FetcherOrderedGrouped"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.FetcherOrderedGrouped"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.FetcherOrderedGrouped"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.FetcherOrderedGrouped"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.FetcherOrderedGrouped"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.InMemoryWriter"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.InMemoryWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.InMemoryWriter"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.InMemoryWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.InMemoryWriter"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.InMemoryWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput.MapOutputComparator"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MapOutput.MapOutputComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.IntermediateMemoryToMemoryMerger"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.IntermediateMemoryToMemoryMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.InMemoryMerger"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.InMemoryMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.OnDiskMerger"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.OnDiskMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.RawKVIteratorReader"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeManager.RawKVIteratorReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeThread"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeThread"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeThread"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeThread"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeThread"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.MergeThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle.RunShuffleCallable"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle.RunShuffleCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle.ShuffleError"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle.ShuffleError"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle.ShuffleRunnerFutureCallback"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.Shuffle.ShuffleRunnerFutureCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleInputEventHandlerOrderedGrouped"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleInputEventHandlerOrderedGrouped"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleInputEventHandlerOrderedGrouped"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleInputEventHandlerOrderedGrouped"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleInputEventHandlerOrderedGrouped"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleInputEventHandlerOrderedGrouped"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler.ShuffleEventInfo"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler.ShuffleEventInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler.Penalty"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler.Penalty"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler.Referee"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.ShuffleScheduler.Referee"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter.MapBufferTooSmallException"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.ExternalSorter.MapBufferTooSmallException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.IFile"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.IFile"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.IFile"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.IFile"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.IFile"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.IFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.IFile.Writer"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.IFile.Writer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.IFile.Reader"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.IFile.Reader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.IFileInputStream"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.IFileInputStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.IFileInputStream"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.IFileInputStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.IFileInputStream"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.IFileInputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.PartitionedRawKeyValueIterator"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.PartitionedRawKeyValueIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.BufferStreamWrapper"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.BufferStreamWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.InputByteBuffer"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.InputByteBuffer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SortSpan"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SortSpan"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SpanIterator"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SpanIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SortTask"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SortTask"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.PartitionFilter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.PartitionFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SpanHeap"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SpanHeap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SpanMerger"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.PipelinedSorter.SpanMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TezMerger"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TezMerger"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.TezMerger"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.TezMerger"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TezMerger"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TezMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TezMerger.Segment"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TezMerger.Segment"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TezMerger.MergeQueue"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TezMerger.MergeQueue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TezMerger.EmptyIterator"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TezMerger.EmptyIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.BlockingBuffer"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.BlockingBuffer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.Buffer"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.Buffer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.SpillThread"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.SpillThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.InMemValBytes"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.InMemValBytes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.MRResultIterator"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.dflt.DefaultSorter.MRResultIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.task.local.output.TezTaskOutputFiles"
  classesB4: "org.apache.tez.runtime.library.common.task.local.output.TezTaskOutputFiles"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.task.local.output.TezTaskOutputFiles"
    classAftr: "org.apache.tez.runtime.library.common.task.local.output.TezTaskOutputFiles"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.task.local.output.TezTaskOutputFiles"
  classesB4: "org.apache.tez.runtime.library.common.task.local.output.TezTaskOutputFiles"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.BaseUnorderedPartitionedKVWriter"
  classesB4: "org.apache.tez.runtime.library.common.writers.BaseUnorderedPartitionedKVWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.writers.BaseUnorderedPartitionedKVWriter"
    classAftr: "org.apache.tez.runtime.library.common.writers.BaseUnorderedPartitionedKVWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.BaseUnorderedPartitionedKVWriter"
  classesB4: "org.apache.tez.runtime.library.common.writers.BaseUnorderedPartitionedKVWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter"
    classAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillCallable"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillCallable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.ByteArrayOutputStream"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.ByteArrayOutputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.WrappedBuffer"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.WrappedBuffer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillCallback"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillResult"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillResult"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillInfo"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillInfo"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillPathDetails"
  classesB4: "org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.SpillPathDetails"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput"
    classAftr: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput.OrderedGroupedKeyValuesReader"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedKVInput.OrderedGroupedKeyValuesReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput"
    classAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader.ValuesIterable"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader.ValuesIterable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader.ValuesIterator"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader.ValuesIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader.KVReaderComparator"
  classesB4: "org.apache.tez.runtime.library.input.OrderedGroupedMergedKVInput.OrderedGroupedMergedKeyValuesReader.KVReaderComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.UnorderedKVInput"
  classesB4: "org.apache.tez.runtime.library.input.UnorderedKVInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.input.UnorderedKVInput"
    classAftr: "org.apache.tez.runtime.library.input.UnorderedKVInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.input.UnorderedKVInput"
  classesB4: "org.apache.tez.runtime.library.input.UnorderedKVInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput"
    classAftr: "org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.OrderedPartitionedKVOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.UnorderedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.UnorderedKVOutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.output.UnorderedKVOutput"
    classAftr: "org.apache.tez.runtime.library.output.UnorderedKVOutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.UnorderedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.UnorderedKVOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput"
    classAftr: "org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.UnorderedPartitionedKVOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.processor.SleepProcessor"
  classesB4: "org.apache.tez.runtime.library.processor.SleepProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.processor.SleepProcessor"
    classAftr: "org.apache.tez.runtime.library.processor.SleepProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.processor.SleepProcessor"
  classesB4: "org.apache.tez.runtime.library.processor.SleepProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.processor.SleepProcessor.SleepProcessorConfig"
  classesB4: "org.apache.tez.runtime.library.processor.SleepProcessor.SleepProcessorConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor"
  classesB4: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor"
    classAftr: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor"
  classesB4: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor.Request"
  classesB4: "org.apache.tez.runtime.library.resources.WeightedScalingMemoryDistributor.Request"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TestValuesIterator"
  classesB4: "org.apache.tez.runtime.library.common.TestValuesIterator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.TestValuesIterator"
    classAftr: "org.apache.tez.runtime.library.common.TestValuesIterator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TestValuesIterator"
  classesB4: "org.apache.tez.runtime.library.common.TestValuesIterator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TestValuesIterator.ProgressReporter"
  classesB4: "org.apache.tez.runtime.library.common.TestValuesIterator.ProgressReporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TestValuesIterator.CustomKey"
  classesB4: "org.apache.tez.runtime.library.common.TestValuesIterator.CustomKey"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.TestValuesIterator.CustomKey.Comparator"
  classesB4: "org.apache.tez.runtime.library.common.TestValuesIterator.CustomKey.Comparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.comparator.TestProxyComparator"
  classesB4: "org.apache.tez.runtime.library.common.comparator.TestProxyComparator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.comparator.TestProxyComparator"
    classAftr: "org.apache.tez.runtime.library.common.comparator.TestProxyComparator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.comparator.TestProxyComparator"
  classesB4: "org.apache.tez.runtime.library.common.comparator.TestProxyComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.TestSimpleFetchedInputAllocator"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.TestSimpleFetchedInputAllocator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.impl.TestSimpleFetchedInputAllocator"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.impl.TestSimpleFetchedInputAllocator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.impl.TestSimpleFetchedInputAllocator"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.impl.TestSimpleFetchedInputAllocator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher.FakeHttpConnection"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestFetcher.FakeHttpConnection"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestMergeManager"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestMergeManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestMergeManager"
    classAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestMergeManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestMergeManager"
  classesB4: "org.apache.tez.runtime.library.common.shuffle.orderedgrouped.TestMergeManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TestIFile"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TestIFile"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.TestIFile"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.TestIFile"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TestIFile"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TestIFile"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger"
    classAftr: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger.CustomComparator"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger.CustomComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger.Reporter"
  classesB4: "org.apache.tez.runtime.library.common.sort.impl.TestTezMerger.Reporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter"
  classesB4: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter"
    classAftr: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter"
  classesB4: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.PartitionerForTest"
  classesB4: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.PartitionerForTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.UnorderedPartitionedKVWriterForTest"
  classesB4: "org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.UnorderedPartitionedKVWriterForTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput"
    classAftr: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput"
  classesB4: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput.OnFileUnorderedKVOutputForTest"
  classesB4: "org.apache.tez.runtime.library.output.TestOnFileUnorderedKVOutput.OnFileUnorderedKVOutputForTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.BroadcastLoadGen"
  classesB4: "org.apache.tez.mapreduce.examples.BroadcastLoadGen"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.BroadcastLoadGen"
    classAftr: "org.apache.tez.mapreduce.examples.BroadcastLoadGen"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.BroadcastLoadGen"
  classesB4: "org.apache.tez.mapreduce.examples.BroadcastLoadGen"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.BroadcastLoadGen.InputGenProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.BroadcastLoadGen.InputGenProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.BroadcastLoadGen.InputFetchProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.BroadcastLoadGen.InputFetchProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWord"
  classesB4: "org.apache.tez.mapreduce.examples.FilterLinesByWord"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.FilterLinesByWord"
    classAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWord"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWord"
  classesB4: "org.apache.tez.mapreduce.examples.FilterLinesByWord"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWord.TextLongPair"
  classesB4: "org.apache.tez.mapreduce.examples.FilterLinesByWord.TextLongPair"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWordOneToOne"
  classesB4: "org.apache.tez.mapreduce.examples.FilterLinesByWordOneToOne"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.FilterLinesByWordOneToOne"
    classAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWordOneToOne"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.FilterLinesByWordOneToOne"
  classesB4: "org.apache.tez.mapreduce.examples.FilterLinesByWordOneToOne"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest"
  classesB4: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest"
    classAftr: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest"
  classesB4: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest.MyMapper"
  classesB4: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest.MyMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest.MyGroupByReducer"
  classesB4: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest.MyGroupByReducer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest.MyOrderByNoOpReducer"
  classesB4: "org.apache.tez.mapreduce.examples.GroupByOrderByMRRTest.MyOrderByNoOpReducer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.MRRSleepJob"
    classAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob.MRRSleepJobPartitioner"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob.MRRSleepJobPartitioner"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob.EmptySplit"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob.EmptySplit"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob.SleepInputFormat"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob.SleepInputFormat"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob.SleepMapper"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob.SleepMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob.ISleepReducer"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob.ISleepReducer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MRRSleepJob.SleepReducer"
  classesB4: "org.apache.tez.mapreduce.examples.MRRSleepJob.SleepReducer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MapredWordCount"
  classesB4: "org.apache.tez.mapreduce.examples.MapredWordCount"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.MapredWordCount"
    classAftr: "org.apache.tez.mapreduce.examples.MapredWordCount"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MapredWordCount"
  classesB4: "org.apache.tez.mapreduce.examples.MapredWordCount"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MapredWordCount.MapClass"
  classesB4: "org.apache.tez.mapreduce.examples.MapredWordCount.MapClass"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.MapredWordCount.Reduce"
  classesB4: "org.apache.tez.mapreduce.examples.MapredWordCount.Reduce"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.RPCLoadGen"
  classesB4: "org.apache.tez.mapreduce.examples.RPCLoadGen"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.RPCLoadGen"
    classAftr: "org.apache.tez.mapreduce.examples.RPCLoadGen"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.RPCLoadGen"
  classesB4: "org.apache.tez.mapreduce.examples.RPCLoadGen"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.RPCLoadGen.RPCSleepProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.RPCLoadGen.RPCSleepProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.TestOrderedWordCount"
  classesB4: "org.apache.tez.mapreduce.examples.TestOrderedWordCount"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.TestOrderedWordCount"
    classAftr: "org.apache.tez.mapreduce.examples.TestOrderedWordCount"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.TestOrderedWordCount"
  classesB4: "org.apache.tez.mapreduce.examples.TestOrderedWordCount"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.TestOrderedWordCount.TokenizerMapper"
  classesB4: "org.apache.tez.mapreduce.examples.TestOrderedWordCount.TokenizerMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.TestOrderedWordCount.IntSumReducer"
  classesB4: "org.apache.tez.mapreduce.examples.TestOrderedWordCount.IntSumReducer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.TestOrderedWordCount.MyOrderByNoOpReducer"
  classesB4: "org.apache.tez.mapreduce.examples.TestOrderedWordCount.MyOrderByNoOpReducer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.processor.FilterByWordInputProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.processor.FilterByWordInputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.processor.FilterByWordInputProcessor"
    classAftr: "org.apache.tez.mapreduce.examples.processor.FilterByWordInputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.processor.FilterByWordInputProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.processor.FilterByWordInputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.processor.FilterByWordOutputProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.processor.FilterByWordOutputProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.examples.processor.FilterByWordOutputProcessor"
    classAftr: "org.apache.tez.mapreduce.examples.processor.FilterByWordOutputProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.examples.processor.FilterByWordOutputProcessor"
  classesB4: "org.apache.tez.mapreduce.examples.processor.FilterByWordOutputProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestMRRJobs"
  classesB4: "org.apache.tez.mapreduce.TestMRRJobs"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.TestMRRJobs"
    classAftr: "org.apache.tez.mapreduce.TestMRRJobs"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestMRRJobs"
  classesB4: "org.apache.tez.mapreduce.TestMRRJobs"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestMRRJobsDAGApi"
  classesB4: "org.apache.tez.mapreduce.TestMRRJobsDAGApi"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.mapreduce.TestMRRJobsDAGApi"
    classAftr: "org.apache.tez.mapreduce.TestMRRJobsDAGApi"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestMRRJobsDAGApi"
  classesB4: "org.apache.tez.mapreduce.TestMRRJobsDAGApi"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestMRRJobsDAGApi.MRInputAMSplitGeneratorRelocalizationTest"
  classesB4: "org.apache.tez.mapreduce.TestMRRJobsDAGApi.MRInputAMSplitGeneratorRelocalizationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.mapreduce.TestMRRJobsDAGApi.SimpleJavaFileObjectImpl"
  classesB4: "org.apache.tez.mapreduce.TestMRRJobsDAGApi.SimpleJavaFileObjectImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.MiniTezCluster"
  classesB4: "org.apache.tez.test.MiniTezCluster"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.MiniTezCluster"
    classAftr: "org.apache.tez.test.MiniTezCluster"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.MiniTezCluster"
  classesB4: "org.apache.tez.test.MiniTezCluster"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery"
  classesB4: "org.apache.tez.test.TestAMRecovery"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestAMRecovery"
    classAftr: "org.apache.tez.test.TestAMRecovery"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery"
  classesB4: "org.apache.tez.test.TestAMRecovery"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.ControlledInputReadyVertexManager"
  classesB4: "org.apache.tez.test.TestAMRecovery.ControlledInputReadyVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.ControlledShuffleVertexManager"
  classesB4: "org.apache.tez.test.TestAMRecovery.ControlledShuffleVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.ControlledImmediateStartVertexManager"
  classesB4: "org.apache.tez.test.TestAMRecovery.ControlledImmediateStartVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.ScheduleControlledVertexManager"
  classesB4: "org.apache.tez.test.TestAMRecovery.ScheduleControlledVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.FailOnAttemptVertexManager"
  classesB4: "org.apache.tez.test.TestAMRecovery.FailOnAttemptVertexManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.MyProcessor"
  classesB4: "org.apache.tez.test.TestAMRecovery.MyProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestAMRecovery.DoNothingProcessor"
  classesB4: "org.apache.tez.test.TestAMRecovery.DoNothingProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestDAGRecovery"
  classesB4: "org.apache.tez.test.TestDAGRecovery"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestDAGRecovery"
    classAftr: "org.apache.tez.test.TestDAGRecovery"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestDAGRecovery"
  classesB4: "org.apache.tez.test.TestDAGRecovery"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestDAGRecovery2"
  classesB4: "org.apache.tez.test.TestDAGRecovery2"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestDAGRecovery2"
    classAftr: "org.apache.tez.test.TestDAGRecovery2"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestDAGRecovery2"
  classesB4: "org.apache.tez.test.TestDAGRecovery2"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation"
  classesB4: "org.apache.tez.test.TestExceptionPropagation"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestExceptionPropagation"
    classAftr: "org.apache.tez.test.TestExceptionPropagation"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation"
  classesB4: "org.apache.tez.test.TestExceptionPropagation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.InputInitializerWithException"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.InputInitializerWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.InputInitializerWithException2"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.InputInitializerWithException2"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.InputWithException"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.InputWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.OutputWithException"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.OutputWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.ProcessorWithException"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.ProcessorWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.RootInputVertexManagerWithException"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.RootInputVertexManagerWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.InputReadyVertexManagerWithException"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.InputReadyVertexManagerWithException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestExceptionPropagation.CustomEdgeManager"
  classesB4: "org.apache.tez.test.TestExceptionPropagation.CustomEdgeManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestFaultTolerance"
  classesB4: "org.apache.tez.test.TestFaultTolerance"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestFaultTolerance"
    classAftr: "org.apache.tez.test.TestFaultTolerance"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestFaultTolerance"
  classesB4: "org.apache.tez.test.TestFaultTolerance"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestInput"
  classesB4: "org.apache.tez.test.TestInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestInput"
    classAftr: "org.apache.tez.test.TestInput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestInput"
  classesB4: "org.apache.tez.test.TestInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestOutput"
  classesB4: "org.apache.tez.test.TestOutput"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestOutput"
    classAftr: "org.apache.tez.test.TestOutput"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestOutput"
  classesB4: "org.apache.tez.test.TestOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestProcessor"
  classesB4: "org.apache.tez.test.TestProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestProcessor"
    classAftr: "org.apache.tez.test.TestProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestProcessor"
  classesB4: "org.apache.tez.test.TestProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestTezJobs"
  classesB4: "org.apache.tez.test.TestTezJobs"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.TestTezJobs"
    classAftr: "org.apache.tez.test.TestTezJobs"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestTezJobs"
  classesB4: "org.apache.tez.test.TestTezJobs"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestTezJobs.InputInitializerEventGeneratingProcessor"
  classesB4: "org.apache.tez.test.TestTezJobs.InputInitializerEventGeneratingProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.TestTezJobs.InputInitializerForTest"
  classesB4: "org.apache.tez.test.TestTezJobs.InputInitializerForTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.test.dag.MultiAttemptDAG"
    classAftr: "org.apache.tez.test.dag.MultiAttemptDAG"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.FailOnAttemptVertexManagerPlugin"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.FailOnAttemptVertexManagerPlugin"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.FailingOutputCommitter"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.FailingOutputCommitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.FailingOutputCommitter.FailingOutputCommitterConfig"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.FailingOutputCommitter.FailingOutputCommitterConfig"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.TestRootInputInitializer"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.TestRootInputInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.FailingInputInitializer"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.FailingInputInitializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.NoOpInput"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.NoOpInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.test.dag.MultiAttemptDAG.NoOpOutput"
  classesB4: "org.apache.tez.test.dag.MultiAttemptDAG.NoOpOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.tools.TFileLoader"
  classesB4: "org.apache.tez.tools.TFileLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.tools.TFileLoader"
    classAftr: "org.apache.tez.tools.TFileLoader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.tools.TFileLoader"
  classesB4: "org.apache.tez.tools.TFileLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.tools.TFileLoader.TFileInputFormat"
  classesB4: "org.apache.tez.tools.TFileLoader.TFileInputFormat"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.tez.tools.TFileRecordReader"
  classesB4: "org.apache.tez.tools.TFileRecordReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.apache.tez.tools.TFileRecordReader"
    classAftr: "org.apache.tez.tools.TFileRecordReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.tez.tools.TFileRecordReader"
  classesB4: "org.apache.tez.tools.TFileRecordReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "tez"
commit: "tez"
tooBig: false

refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlobContainerWrapper"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlobContainerWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface.PreExistingContainer"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface.PreExistingContainer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlobDirectoryWrapper"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlobDirectoryWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlobWrapper"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlobWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlockBlobWrapper"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudBlockBlobWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudPageBlobWrapper"
  classesB4: "org.apache.hadoop.fs.azure.MockStorageInterface.MockCloudPageBlobWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "hadoop"
commit: "hadoop"
tooBig: false

refactorings {
  classesAftr: "slash.navigation.catalog.client.CategoryIT"
  classesB4: "slash.navigation.catalog.client.CategoryIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.client.FileIT"
  classesB4: "slash.navigation.catalog.client.FileIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.client.RouteCatalogClientBase"
  classesB4: "slash.navigation.catalog.client.RouteCatalogClientBase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.client.RouteIT"
  classesB4: "slash.navigation.catalog.client.RouteIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.client.UserIT"
  classesB4: "slash.navigation.catalog.client.UserIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.domain.CategorysIT"
  classesB4: "slash.navigation.catalog.domain.CategorysIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.domain.FilesIT"
  classesB4: "slash.navigation.catalog.domain.FilesIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.catalog.domain.RoutesIT"
  classesB4: "slash.navigation.catalog.domain.RoutesIT"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.Credentials"
  classesB4: "slash.navigation.rest.Credentials"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.Delete"
  classesB4: "slash.navigation.rest.Delete"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.Get"
  classesB4: "slash.navigation.rest.Get"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.HttpRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "slash.navigation.rest.HttpRequest"
    classAftr: "slash.navigation.rest.HttpRequest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.HttpRequest"
  typeChange {
    dtB4 {
      prmtv {
        name: "void"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "doExecute"
    nameaftr: "doExecute"
    classb4: "slash.navigation.rest.HttpRequest"
    classAftr: "slash.navigation.rest.HttpRequest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.HttpRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "slash.navigation.rest.HttpRequest"
    classAftr: "slash.navigation.rest.HttpRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.HttpRequest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.HttpRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.MultipartRequest"
  classesB4: "slash.navigation.rest.MultipartRequest"
  typeChange {
    dtB4 {
      prmtv {
        name: "void"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpResponse"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "doExecute"
    nameaftr: "doExecute"
    classb4: "slash.navigation.rest.MultipartRequest"
    classAftr: "slash.navigation.rest.MultipartRequest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "slash.navigation.rest.MultipartRequest"
  classesB4: "slash.navigation.rest.MultipartRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpEntityEnclosingRequestBase"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "slash.navigation.rest.MultipartRequest"
    classAftr: "slash.navigation.rest.MultipartRequest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "slash.navigation.rest.MultipartRequest"
  classesB4: "slash.navigation.rest.MultipartRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.Post"
  classesB4: "slash.navigation.rest.Post"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.Put"
  classesB4: "slash.navigation.rest.Put"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.SimpleCredentials"
  classesB4: "slash.navigation.rest.SimpleCredentials"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.Get"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.Post"
  refactoringType: "PULL_UP_OPERATION"
}
refactorings {
  classesAftr: "slash.navigation.rest.HttpRequest"
  classesB4: "slash.navigation.rest.Put"
  refactoringType: "PULL_UP_OPERATION"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpRequestBase"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpRequestBase"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpRequestBase"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpRequestBase"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpRequestBase"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpEntityEnclosingRequestBase"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpEntityEnclosingRequestBase"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpEntityEnclosingRequestBase"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpEntityEnclosingRequestBase"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpEntityEnclosingRequestBase"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "void"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.HttpResponse"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "void"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.HttpResponse"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "void"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.HttpResponse"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "void"
        typeOfType: Internal
      }
    }
  }
}
project: "RouteConverter"
commit: "RouteConverter"
tooBig: false

refactorings {
  classesAftr: "feign.DefaultContractTest"
  classesB4: "feign.DefaultContractTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.Methods"
  classesB4: "feign.DefaultContractTest.Methods"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.BodyParams"
  classesB4: "feign.DefaultContractTest.BodyParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.CustomMethodAndURIParam"
  classesB4: "feign.DefaultContractTest.CustomMethodAndURIParam"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.WithQueryParamsInPath"
  classesB4: "feign.DefaultContractTest.WithQueryParamsInPath"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.BodyWithoutParameters"
  classesB4: "feign.DefaultContractTest.BodyWithoutParameters"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.WithURIParam"
  classesB4: "feign.DefaultContractTest.WithURIParam"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.WithPathAndQueryParams"
  classesB4: "feign.DefaultContractTest.WithPathAndQueryParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.FormParams"
  classesB4: "feign.DefaultContractTest.FormParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultContractTest.HeaderParams"
  classesB4: "feign.DefaultContractTest.HeaderParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.DefaultRetryerTest"
  classesB4: "feign.DefaultRetryerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignBuilderTest"
  classesB4: "feign.FeignBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignBuilderTest.TestInterface"
  classesB4: "feign.FeignBuilderTest.TestInterface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest"
  classesB4: "feign.FeignTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.TestInterface"
  classesB4: "feign.FeignTest.TestInterface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.TestInterface.Module"
  classesB4: "feign.FeignTest.TestInterface.Module"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.OtherTestInterface"
  classesB4: "feign.FeignTest.OtherTestInterface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.RunSynchronous"
  classesB4: "feign.FeignTest.RunSynchronous"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.ForwardedForInterceptor"
  classesB4: "feign.FeignTest.ForwardedForInterceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.UserAgentInterceptor"
  classesB4: "feign.FeignTest.UserAgentInterceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.IllegalArgumentExceptionOn404"
  classesB4: "feign.FeignTest.IllegalArgumentExceptionOn404"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.DecodeFail"
  classesB4: "feign.FeignTest.DecodeFail"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.RetryableExceptionOnRetry"
  classesB4: "feign.FeignTest.RetryableExceptionOnRetry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.IOEOnDecode"
  classesB4: "feign.FeignTest.IOEOnDecode"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.TrustSSLSockets"
  classesB4: "feign.FeignTest.TrustSSLSockets"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.FeignTest.DisableHostnameVerification"
  classesB4: "feign.FeignTest.DisableHostnameVerification"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.LoggerTest"
  classesB4: "feign.LoggerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Logger"
      }
    }
    dtAftr {
      simpleType {
        name: "RecordingLogger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "feign.LoggerTest"
    classAftr: "feign.LoggerTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "feign.LoggerTest"
  classesB4: "feign.LoggerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.LoggerTest.SendsStuff"
  classesB4: "feign.LoggerTest.SendsStuff"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.RequestTemplateTest"
  classesB4: "feign.RequestTemplateTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.UtilTest"
  classesB4: "feign.UtilTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.auth.BasicAuthRequestInterceptorTest"
  classesB4: "feign.auth.BasicAuthRequestInterceptorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.codec.DefaultDecoderTest"
  classesB4: "feign.codec.DefaultDecoderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.codec.DefaultEncoderTest"
  classesB4: "feign.codec.DefaultEncoderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.codec.DefaultErrorDecoderTest"
  classesB4: "feign.codec.DefaultErrorDecoderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.codec.RetryAfterDecoderTest"
  classesB4: "feign.codec.RetryAfterDecoderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.gson.GsonModuleTest"
  classesB4: "feign.gson.GsonModuleTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.gson.GsonModuleTest.Zone"
  classesB4: "feign.gson.GsonModuleTest.Zone"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.gson.GsonModuleTest.CustomTypeAdapter"
  classesB4: "feign.gson.GsonModuleTest.CustomTypeAdapter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jackson.JacksonModuleTest"
  classesB4: "feign.jackson.JacksonModuleTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jackson.JacksonModuleTest.Zone"
  classesB4: "feign.jackson.JacksonModuleTest.Zone"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jackson.JacksonModuleTest.ZoneDeserializer"
  classesB4: "feign.jackson.JacksonModuleTest.ZoneDeserializer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jackson.JacksonModuleTest.ZoneModule"
  classesB4: "feign.jackson.JacksonModuleTest.ZoneModule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jackson.JacksonModuleTest.CustomJacksonModule"
  classesB4: "feign.jackson.JacksonModuleTest.CustomJacksonModule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxb.JAXBContextFactoryTest"
  classesB4: "feign.jaxb.JAXBContextFactoryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxb.JAXBModuleTest"
  classesB4: "feign.jaxb.JAXBModuleTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxb.JAXBModuleTest.MockObject"
  classesB4: "feign.jaxb.JAXBModuleTest.MockObject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest"
  classesB4: "feign.jaxrs.JAXRSContractTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.Methods"
  classesB4: "feign.jaxrs.JAXRSContractTest.Methods"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.CustomMethodAndURIParam"
  classesB4: "feign.jaxrs.JAXRSContractTest.CustomMethodAndURIParam"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.WithQueryParamsInPath"
  classesB4: "feign.jaxrs.JAXRSContractTest.WithQueryParamsInPath"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.ProducesAndConsumes"
  classesB4: "feign.jaxrs.JAXRSContractTest.ProducesAndConsumes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.BodyParams"
  classesB4: "feign.jaxrs.JAXRSContractTest.BodyParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.EmptyPathOnType"
  classesB4: "feign.jaxrs.JAXRSContractTest.EmptyPathOnType"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.PathOnType"
  classesB4: "feign.jaxrs.JAXRSContractTest.PathOnType"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.WithURIParam"
  classesB4: "feign.jaxrs.JAXRSContractTest.WithURIParam"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.WithPathAndQueryParams"
  classesB4: "feign.jaxrs.JAXRSContractTest.WithPathAndQueryParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.FormParams"
  classesB4: "feign.jaxrs.JAXRSContractTest.FormParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.HeaderParams"
  classesB4: "feign.jaxrs.JAXRSContractTest.HeaderParams"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.PathsWithoutAnySlashes"
  classesB4: "feign.jaxrs.JAXRSContractTest.PathsWithoutAnySlashes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.PathsWithSomeSlashes"
  classesB4: "feign.jaxrs.JAXRSContractTest.PathsWithSomeSlashes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.jaxrs.JAXRSContractTest.PathsWithSomeOtherSlashes"
  classesB4: "feign.jaxrs.JAXRSContractTest.PathsWithSomeOtherSlashes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.ribbon.LoadBalancingTargetTest"
  classesB4: "feign.ribbon.LoadBalancingTargetTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.ribbon.LoadBalancingTargetTest.TestInterface"
  classesB4: "feign.ribbon.LoadBalancingTargetTest.TestInterface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  refactoringType: "REPLACE_VARIABLE_WITH_ATTRIBUTE"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockWebServer"
      }
    }
    dtAftr {
      simpleType {
        name: "MockWebServerRule"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "server"
    nameaftr: "server1"
    classb4: "feign.ribbon.RibbonClientTest"
    classAftr: "feign.ribbon.RibbonClientTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  refactoringType: "REPLACE_VARIABLE_WITH_ATTRIBUTE"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockWebServer"
      }
    }
    dtAftr {
      simpleType {
        name: "MockWebServerRule"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "server"
    nameaftr: "server1"
    classb4: "feign.ribbon.RibbonClientTest"
    classAftr: "feign.ribbon.RibbonClientTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  refactoringType: "REPLACE_VARIABLE_WITH_ATTRIBUTE"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "MockWebServer"
      }
    }
    dtAftr {
      simpleType {
        name: "MockWebServerRule"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "server"
    nameaftr: "server1"
    classb4: "feign.ribbon.RibbonClientTest"
    classAftr: "feign.ribbon.RibbonClientTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest"
  classesB4: "feign.ribbon.RibbonClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest.TestInterface"
  classesB4: "feign.ribbon.RibbonClientTest.TestInterface"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.ribbon.RibbonClientTest.TestInterface.Module"
  classesB4: "feign.ribbon.RibbonClientTest.TestInterface.Module"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.sax.SAXDecoderTest"
  classesB4: "feign.sax.SAXDecoderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.sax.SAXDecoderTest.Module"
  classesB4: "feign.sax.SAXDecoderTest.Module"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.sax.SAXDecoderTest.NetworkStatusStringHandler"
  classesB4: "feign.sax.SAXDecoderTest.NetworkStatusStringHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.sax.SAXDecoderTest.NetworkStatusHandler"
  classesB4: "feign.sax.SAXDecoderTest.NetworkStatusHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.slf4j.Slf4jLoggerTest"
  classesB4: "feign.slf4j.Slf4jLoggerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "feign.LoggerTest.RecordingLogger"
  classesB4: "feign.LoggerTest"
  refactoringType: "MOVE_ATTRIBUTE"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "feign.Logger"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "feign.LoggerTest.RecordingLogger"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "feign.Logger"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "feign.LoggerTest.RecordingLogger"
              typeOfType: Internal
            }
          }
          chng {
            from: "feign.Logger"
            to: "feign.LoggerTest.RecordingLogger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "feign.Logger"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "feign.LoggerTest.RecordingLogger"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "feign.Logger"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "feign.LoggerTest.RecordingLogger"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "feign.Logger"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "com.google.mockwebserver.MockWebServer"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "com.squareup.okhttp.mockwebserver.rule.MockWebServerRule"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "com.google.mockwebserver.MockWebServer"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "com.squareup.okhttp.mockwebserver.rule.MockWebServerRule"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "com.google.mockwebserver.MockWebServer"
            to: "com.squareup.okhttp.mockwebserver.rule.MockWebServerRule"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "com.google.mockwebserver.MockWebServer"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "com.squareup.okhttp.mockwebserver.rule.MockWebServerRule"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.google.mockwebserver.MockWebServer"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "com.squareup.okhttp.mockwebserver.rule.MockWebServerRule"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "com.google.mockwebserver.MockWebServer"
        typeOfType: DontKnow
      }
    }
  }
}
project: "feign"
commit: "feign"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.ui.report.trend.DetailedReportTest"
  classesB4: "net.rrm.ehour.ui.report.trend.DetailedReportTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.ui.manage.assignment.AssignmentFormPanelTest"
  classesB4: "net.rrm.ehour.ui.manage.assignment.AssignmentFormPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.customer.service.CustomerServiceImplTest"
  classesB4: "net.rrm.ehour.customer.service.CustomerServiceImplTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.rrm.ehour.customer.service.CustomerServiceImplTest"
  classesB4: "net.rrm.ehour.customer.service.CustomerServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.project.service.ProjectAssignmentServiceImplTest"
  classesB4: "net.rrm.ehour.project.service.ProjectAssignmentServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.project.service.ProjectServiceImplTest"
  classesB4: "net.rrm.ehour.project.service.ProjectServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.MainConfigPage"
  classesB4: "net.rrm.ehour.ui.admin.config.MainConfigPage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.AbstractConfigPanel"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.AbstractConfigPanel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.AuditConfigPanelFactory"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.AuditConfigPanelFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.SkinConfigPanelFactory"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.SkinConfigPanelFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.MiscConfigPanelFactory"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.MiscConfigPanelFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.LocaleConfigPanelFactory"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.LocaleConfigPanelFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.MailServerConfigPanelFactory"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.MailServerConfigPanelFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.TabFactory"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.ConfigTabPanel.TabFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.AbstractMainConfigTest"
  classesB4: "net.rrm.ehour.ui.admin.config.AbstractMainConfigTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.AuditConfigPanelTest"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.AuditConfigPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.LocaleConfigPanelTest"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.LocaleConfigPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.MailServerConfigPanelTest"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.MailServerConfigPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.MiscConfigPanelTest"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.MiscConfigPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.admin.config.panel.SkinConfigPanelTest"
  classesB4: "net.rrm.ehour.ui.admin.config.panel.SkinConfigPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.project.status.ProjectAssignmentStatusServiceTest"
  classesB4: "net.rrm.ehour.project.status.ProjectAssignmentStatusServiceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.report.service.DetailedReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.DetailedReportServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.user.service.UserServiceImplTest"
  classesB4: "net.rrm.ehour.user.service.UserServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.ui.common.AbstractSpringTester"
  classesB4: "net.rrm.ehour.ui.common.AbstractSpringTester"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.util.WebUtilsTest"
  classesB4: "net.rrm.ehour.ui.common.util.WebUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.report.panel.aggregate.AbstractReportPanelTest"
  classesB4: "net.rrm.ehour.ui.report.panel.aggregate.AbstractReportPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  classesB4: "net.rrm.ehour.report.service.AggregateReportServiceImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.MockExpectations"
  classesB4: "net.rrm.ehour.ui.common.MockExpectations"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.MockExpectations"
  classesB4: "net.rrm.ehour.ui.common.MockExpectations"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.MockExpectations"
  classesB4: "net.rrm.ehour.ui.common.MockExpectations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.timesheet.page.MonthOverviewPageTest"
  classesB4: "net.rrm.ehour.ui.timesheet.page.MonthOverviewPageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.userprefs.page.UserPreferencePageTest"
  classesB4: "net.rrm.ehour.ui.userprefs.page.UserPreferencePageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.ui.manage.assignment.AssignmentFormPanelTest"
  classesB4: "net.rrm.ehour.ui.manage.assignment.AssignmentFormPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "net.rrm.ehour.ui.common.panel.calendar.CalendarPanelTest.ComparableGregorianCalendar"
  classesB4: "net.rrm.ehour.ui.common.panel.calendar.CalendarPanelTest.ComparableGreggieCalendar"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.AbstractSpringTester"
  classesB4: "net.rrm.ehour.ui.common.AbstractSpringTester"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.MockExpectations"
  classesB4: "net.rrm.ehour.ui.common.MockExpectations"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.MockExpectations"
  classesB4: "net.rrm.ehour.ui.common.MockExpectations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.panel.calendar.CalendarPanelTest"
  classesB4: "net.rrm.ehour.ui.common.panel.calendar.CalendarPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.timesheet.export.TimesheetExportPageTest"
  classesB4: "net.rrm.ehour.ui.timesheet.export.TimesheetExportPageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.timesheet.page.MonthOverviewPageTest"
  classesB4: "net.rrm.ehour.ui.timesheet.page.MonthOverviewPageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.timesheet.panel.TimesheetPanelTest"
  classesB4: "net.rrm.ehour.ui.timesheet.panel.TimesheetPanelTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.timesheet.panel.TimesheetPanelTest"
  classesB4: "net.rrm.ehour.ui.timesheet.panel.TimesheetPanelTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.timesheet.panel.TimesheetPanelTest"
  classesB4: "net.rrm.ehour.ui.timesheet.panel.TimesheetPanelTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.userprefs.page.UserPreferencePageTest"
  classesB4: "net.rrm.ehour.ui.userprefs.page.UserPreferencePageTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "net.rrm.ehour.ui.common.panel.calendar.CalendarPanelTest.ComparableGregorianCalendar"
  classesB4: "net.rrm.ehour.ui.common.panel.calendar.CalendarPanelTest.ComparableGreggieCalendar"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "ehour"
commit: "ehour"
tooBig: false

refactorings {
  classesAftr: "com.bastengao.struts2.freeroute.ParamTest"
  classesB4: "com.bastengao.struts2.freeroute.ParamTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "struts2-freeroute"
commit: "struts2-freeroute"
tooBig: false

refactorings {
  classesAftr: "com.max.algs.string.StringUtilsTest"
  classesB4: "com.max.algs.string.StringUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "incubator"
commit: "incubator"
tooBig: false

refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.system.ConfigurationUtils"
  classesB4: "org.jboss.aerogear.unifiedpush.system.ConfigurationUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.system.ConfigurationUtils"
    classAftr: "org.jboss.aerogear.unifiedpush.system.ConfigurationUtils"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.system.ConfigurationUtils"
  classesB4: "org.jboss.aerogear.unifiedpush.system.ConfigurationUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.AbstractBaseEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.AbstractBaseEndpoint"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.rest.AbstractBaseEndpoint"
    classAftr: "org.jboss.aerogear.unifiedpush.rest.AbstractBaseEndpoint"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.AbstractBaseEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.AbstractBaseEndpoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.registry.applications.AbstractVariantEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.registry.applications.AbstractVariantEndpoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.registry.installations.InstallationRegistrationEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.registry.installations.InstallationRegistrationEndpoint"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.rest.registry.installations.InstallationRegistrationEndpoint"
    classAftr: "org.jboss.aerogear.unifiedpush.rest.registry.installations.InstallationRegistrationEndpoint"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.registry.installations.InstallationRegistrationEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.registry.installations.InstallationRegistrationEndpoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.sender.PushNotificationSenderEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.sender.PushNotificationSenderEndpoint"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.rest.sender.PushNotificationSenderEndpoint"
    classAftr: "org.jboss.aerogear.unifiedpush.rest.sender.PushNotificationSenderEndpoint"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.rest.sender.PushNotificationSenderEndpoint"
  classesB4: "org.jboss.aerogear.unifiedpush.rest.sender.PushNotificationSenderEndpoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.jpa.dao.impl.JPAPushMessageInformationDao"
  classesB4: "org.jboss.aerogear.unifiedpush.jpa.dao.impl.JPAPushMessageInformationDao"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.jpa.dao.impl.JPAPushMessageInformationDao"
    classAftr: "org.jboss.aerogear.unifiedpush.jpa.dao.impl.JPAPushMessageInformationDao"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.jpa.dao.impl.JPAPushMessageInformationDao"
  classesB4: "org.jboss.aerogear.unifiedpush.jpa.dao.impl.JPAPushMessageInformationDao"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.MetricsCollector"
  classesB4: "org.jboss.aerogear.unifiedpush.message.MetricsCollector"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.MetricsCollector"
    classAftr: "org.jboss.aerogear.unifiedpush.message.MetricsCollector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.MetricsCollector"
  classesB4: "org.jboss.aerogear.unifiedpush.message.MetricsCollector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher"
  classesB4: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher"
    classAftr: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher"
  classesB4: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher.SenderServiceCallback"
  classesB4: "org.jboss.aerogear.unifiedpush.message.NotificationDispatcher.SenderServiceCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.NotificationRouter"
  classesB4: "org.jboss.aerogear.unifiedpush.message.NotificationRouter"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.NotificationRouter"
    classAftr: "org.jboss.aerogear.unifiedpush.message.NotificationRouter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.NotificationRouter"
  classesB4: "org.jboss.aerogear.unifiedpush.message.NotificationRouter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.NotificationRouter.VariantMap"
  classesB4: "org.jboss.aerogear.unifiedpush.message.NotificationRouter.VariantMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.configuration.SenderConfigurationProvider"
  classesB4: "org.jboss.aerogear.unifiedpush.message.configuration.SenderConfigurationProvider"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.configuration.SenderConfigurationProvider"
    classAftr: "org.jboss.aerogear.unifiedpush.message.configuration.SenderConfigurationProvider"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.configuration.SenderConfigurationProvider"
  classesB4: "org.jboss.aerogear.unifiedpush.message.configuration.SenderConfigurationProvider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.AbstractJMSMessageListener"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.AbstractJMSMessageListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.jms.AbstractJMSMessageListener"
    classAftr: "org.jboss.aerogear.unifiedpush.message.jms.AbstractJMSMessageListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.AbstractJMSMessageListener"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.AbstractJMSMessageListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.MessageHolderWithTokensConsumer"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.MessageHolderWithTokensConsumer"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.jms.MessageHolderWithTokensConsumer"
    classAftr: "org.jboss.aerogear.unifiedpush.message.jms.MessageHolderWithTokensConsumer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.MessageHolderWithTokensConsumer"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.MessageHolderWithTokensConsumer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.MetricCollectionTrigger"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.MetricCollectionTrigger"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.jms.MetricCollectionTrigger"
    classAftr: "org.jboss.aerogear.unifiedpush.message.jms.MetricCollectionTrigger"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.MetricCollectionTrigger"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.MetricCollectionTrigger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.APNsPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.APNsPushNotificationSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.sender.APNsPushNotificationSender"
    classAftr: "org.jboss.aerogear.unifiedpush.message.sender.APNsPushNotificationSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.APNsPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.APNsPushNotificationSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.AdmPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.AdmPushNotificationSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.sender.AdmPushNotificationSender"
    classAftr: "org.jboss.aerogear.unifiedpush.message.sender.AdmPushNotificationSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.AdmPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.AdmPushNotificationSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.FCMPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.FCMPushNotificationSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.sender.FCMPushNotificationSender"
    classAftr: "org.jboss.aerogear.unifiedpush.message.sender.FCMPushNotificationSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.FCMPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.FCMPushNotificationSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.MPNSPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.MPNSPushNotificationSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.sender.MPNSPushNotificationSender"
    classAftr: "org.jboss.aerogear.unifiedpush.message.sender.MPNSPushNotificationSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.MPNSPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.MPNSPushNotificationSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.SimplePushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.SimplePushNotificationSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.sender.SimplePushNotificationSender"
    classAftr: "org.jboss.aerogear.unifiedpush.message.sender.SimplePushNotificationSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.SimplePushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.SimplePushNotificationSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.WNSPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.WNSPushNotificationSender"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.sender.WNSPushNotificationSender"
    classAftr: "org.jboss.aerogear.unifiedpush.message.sender.WNSPushNotificationSender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.sender.WNSPushNotificationSender"
  classesB4: "org.jboss.aerogear.unifiedpush.message.sender.WNSPushNotificationSender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.serviceHolder.ApnsServiceHolder"
  classesB4: "org.jboss.aerogear.unifiedpush.message.serviceHolder.ApnsServiceHolder"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.serviceHolder.ApnsServiceHolder"
    classAftr: "org.jboss.aerogear.unifiedpush.message.serviceHolder.ApnsServiceHolder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.serviceHolder.ApnsServiceHolder"
  classesB4: "org.jboss.aerogear.unifiedpush.message.serviceHolder.ApnsServiceHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.token.TokenLoader"
  classesB4: "org.jboss.aerogear.unifiedpush.message.token.TokenLoader"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.token.TokenLoader"
    classAftr: "org.jboss.aerogear.unifiedpush.message.token.TokenLoader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.token.TokenLoader"
  classesB4: "org.jboss.aerogear.unifiedpush.message.token.TokenLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.TestTokenLoaderTransactionFailForGCM"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.TestTokenLoaderTransactionFailForGCM"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.message.jms.TestTokenLoaderTransactionFailForGCM"
    classAftr: "org.jboss.aerogear.unifiedpush.message.jms.TestTokenLoaderTransactionFailForGCM"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.jms.TestTokenLoaderTransactionFailForGCM"
  classesB4: "org.jboss.aerogear.unifiedpush.message.jms.TestTokenLoaderTransactionFailForGCM"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.serviceHolder.MockServiceHolderForSingleNode"
  classesB4: "org.jboss.aerogear.unifiedpush.message.serviceHolder.MockServiceHolderForSingleNode"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.jboss.aerogear.unifiedpush.message.serviceHolder.MockServiceHolderForSingleNode"
    classAftr: "org.jboss.aerogear.unifiedpush.message.serviceHolder.MockServiceHolderForSingleNode"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.message.serviceHolder.MockServiceHolderForSingleNode"
  classesB4: "org.jboss.aerogear.unifiedpush.message.serviceHolder.MockServiceHolderForSingleNode"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.test.archive.UnifiedPushArchiveImpl"
  classesB4: "org.jboss.aerogear.unifiedpush.test.archive.UnifiedPushArchiveImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.service.impl.ClientInstallationServiceImpl"
  classesB4: "org.jboss.aerogear.unifiedpush.service.impl.ClientInstallationServiceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.service.impl.ClientInstallationServiceImpl"
    classAftr: "org.jboss.aerogear.unifiedpush.service.impl.ClientInstallationServiceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.service.impl.ClientInstallationServiceImpl"
  classesB4: "org.jboss.aerogear.unifiedpush.service.impl.ClientInstallationServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.service.util.FCMTopicManager"
  classesB4: "org.jboss.aerogear.unifiedpush.service.util.FCMTopicManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logger"
    nameaftr: "logger"
    classb4: "org.jboss.aerogear.unifiedpush.service.util.FCMTopicManager"
    classAftr: "org.jboss.aerogear.unifiedpush.service.util.FCMTopicManager"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jboss.aerogear.unifiedpush.service.util.FCMTopicManager"
  classesB4: "org.jboss.aerogear.unifiedpush.service.util.FCMTopicManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "AeroGearLogger"
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "AeroGearLogger"
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "AeroGearLogger"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "AeroGearLogger"
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "AeroGearLogger"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "AeroGearLogger"
      }
    }
  }
}
project: "aerogear-unified-push-server"
commit: "aerogear-unified-push-server"
tooBig: false

refactorings {
  classesAftr: "com.owlike.genson.stream.JsonReader"
  classesB4: "com.owlike.genson.stream.JsonReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.owlike.genson.stream.JsonStreamException"
  classesB4: "com.owlike.genson.stream.JsonStreamException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.owlike.genson.stream.JsonStreamException.Builder"
  classesB4: "com.owlike.genson.stream.JsonStreamException.Builder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.owlike.genson.GensonBenchmark"
  classesB4: "com.owlike.genson.GensonBenchmark"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.owlike.genson.stream.JsonReaderTest"
  classesB4: "com.owlike.genson.stream.JsonReaderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "genson"
commit: "genson"
tooBig: false

refactorings {
  classesAftr: "com.bpodgursky.hubris.universe.GameState"
  classesB4: "com.bpodgursky.hubris.universe.GameState"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "hubris"
commit: "hubris"
tooBig: false

refactorings {
  classesAftr: "org.apache.any23.cli.Rover.ArgumentToIRIConverter"
  classesB4: "org.apache.any23.cli.Rover.ArgumentToURIConverter"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Tool"
  classesB4: "org.apache.any23.cli.Tool"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.configuration.Configuration"
  classesB4: "org.apache.any23.configuration.Configuration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.encoding.EncodingDetector"
  classesB4: "org.apache.any23.encoding.EncodingDetector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.ExtractionContext"
    classAftr: "org.apache.any23.extractor.ExtractionContext"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.ExtractionContext"
    classAftr: "org.apache.any23.extractor.ExtractionContext"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.ExtractionContext"
    classAftr: "org.apache.any23.extractor.ExtractionContext"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.ExtractionContext"
    classAftr: "org.apache.any23.extractor.ExtractionContext"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionContext"
  classesB4: "org.apache.any23.extractor.ExtractionContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionParameters"
  classesB4: "org.apache.any23.extractor.ExtractionParameters"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResult"
  classesB4: "org.apache.any23.extractor.ExtractionResult"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResult"
  classesB4: "org.apache.any23.extractor.ExtractionResult"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.Extractor"
  classesB4: "org.apache.any23.extractor.Extractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.Extractor.ContentExtractor"
  classesB4: "org.apache.any23.extractor.Extractor.ContentExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractorFactory"
  classesB4: "org.apache.any23.extractor.ExtractorFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport"
  classesB4: "org.apache.any23.extractor.IssueReport"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "row"
    nameaftr: "row"
    classb4: "org.apache.any23.extractor.IssueReport.Issue"
    classAftr: "org.apache.any23.extractor.IssueReport.Issue"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "col"
    nameaftr: "col"
    classb4: "org.apache.any23.extractor.IssueReport.Issue"
    classAftr: "org.apache.any23.extractor.IssueReport.Issue"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getRow"
    nameaftr: "getRow"
    classb4: "org.apache.any23.extractor.IssueReport.Issue"
    classAftr: "org.apache.any23.extractor.IssueReport.Issue"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getCol"
    nameaftr: "getCol"
    classb4: "org.apache.any23.extractor.IssueReport.Issue"
    classAftr: "org.apache.any23.extractor.IssueReport.Issue"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "r"
    nameaftr: "r"
    classb4: "org.apache.any23.extractor.IssueReport.Issue"
    classAftr: "org.apache.any23.extractor.IssueReport.Issue"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "c"
    nameaftr: "c"
    classb4: "org.apache.any23.extractor.IssueReport.Issue"
    classAftr: "org.apache.any23.extractor.IssueReport.Issue"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport.Issue"
  classesB4: "org.apache.any23.extractor.IssueReport.Issue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.Any23PluginManager"
  classesB4: "org.apache.any23.plugin.Any23PluginManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.Any23PluginManager.DynamicClassLoader"
  classesB4: "org.apache.any23.plugin.Any23PluginManager.DynamicClassLoader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "expand"
    nameaftr: "expand"
    classb4: "org.apache.any23.rdf.Prefixes"
    classAftr: "org.apache.any23.rdf.Prefixes"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Prefixes"
  classesB4: "org.apache.any23.rdf.Prefixes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.source.DocumentSource"
  classesB4: "org.apache.any23.source.DocumentSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "row"
    nameaftr: "row"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rowPosition"
    nameaftr: "rowPosition"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "numberOfRows"
    nameaftr: "numberOfRows"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "numberOfColumns"
    nameaftr: "numberOfColumns"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rowType"
    nameaftr: "rowType"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "columnPosition"
    nameaftr: "columnPosition"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createResource"
    nameaftr: "createResource"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.CSV"
    classAftr: "org.apache.any23.vocab.CSV"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.CSV"
  classesB4: "org.apache.any23.vocab.CSV"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "license"
    nameaftr: "license"
    classb4: "org.apache.any23.vocab.DCTerms"
    classAftr: "org.apache.any23.vocab.DCTerms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "title"
    nameaftr: "title"
    classb4: "org.apache.any23.vocab.DCTerms"
    classAftr: "org.apache.any23.vocab.DCTerms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "creator"
    nameaftr: "creator"
    classb4: "org.apache.any23.vocab.DCTerms"
    classAftr: "org.apache.any23.vocab.DCTerms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "related"
    nameaftr: "related"
    classb4: "org.apache.any23.vocab.DCTerms"
    classAftr: "org.apache.any23.vocab.DCTerms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "date"
    nameaftr: "date"
    classb4: "org.apache.any23.vocab.DCTerms"
    classAftr: "org.apache.any23.vocab.DCTerms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "source"
    nameaftr: "source"
    classb4: "org.apache.any23.vocab.DCTerms"
    classAftr: "org.apache.any23.vocab.DCTerms"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DCTerms"
  classesB4: "org.apache.any23.vocab.DCTerms"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "end_date"
    nameaftr: "end_date"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "publication"
    nameaftr: "publication"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "title"
    nameaftr: "title"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "reference"
    nameaftr: "reference"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "language"
    nameaftr: "language"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "experience"
    nameaftr: "experience"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "organization"
    nameaftr: "organization"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "affiliation"
    nameaftr: "affiliation"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "writes"
    nameaftr: "writes"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "start_date"
    nameaftr: "start_date"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "education"
    nameaftr: "education"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "skill"
    nameaftr: "skill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "referer"
    nameaftr: "referer"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "isco88_code"
    nameaftr: "isco88_code"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "speaks"
    nameaftr: "speaks"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "reads"
    nameaftr: "reads"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "reference_type"
    nameaftr: "reference_type"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Publication"
    nameaftr: "Publication"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Education"
    nameaftr: "Education"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "OrganisationalSkill"
    nameaftr: "OrganisationalSkill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PrimarySchool"
    nameaftr: "PrimarySchool"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Reference"
    nameaftr: "Reference"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "DrivingSkill"
    nameaftr: "DrivingSkill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Degree"
    nameaftr: "Degree"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LanguageSkill"
    nameaftr: "LanguageSkill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Skill"
    nameaftr: "Skill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SecondarySchool"
    nameaftr: "SecondarySchool"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Course"
    nameaftr: "Course"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Experience"
    nameaftr: "Experience"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SocialSkill"
    nameaftr: "SocialSkill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ComputerSkill"
    nameaftr: "ComputerSkill"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LanguageLevel"
    nameaftr: "LanguageLevel"
    classb4: "org.apache.any23.vocab.DOAC"
    classAftr: "org.apache.any23.vocab.DOAC"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAC"
  classesB4: "org.apache.any23.vocab.DOAC"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Project"
    nameaftr: "Project"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Version"
    nameaftr: "Version"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Specification"
    nameaftr: "Specification"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Repository"
    nameaftr: "Repository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SVNRepository"
    nameaftr: "SVNRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "BKRepository"
    nameaftr: "BKRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "CVSRepository"
    nameaftr: "CVSRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ArchRepository"
    nameaftr: "ArchRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "BazaarBranch"
    nameaftr: "BazaarBranch"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "GitRepository"
    nameaftr: "GitRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "HgRepository"
    nameaftr: "HgRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "DarcsRepository"
    nameaftr: "DarcsRepository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "homepage"
    nameaftr: "homepage"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "old_homepage"
    nameaftr: "old_homepage"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "created"
    nameaftr: "created"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "shortdesc"
    nameaftr: "shortdesc"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "description"
    nameaftr: "description"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "release"
    nameaftr: "release"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mailing_list"
    nameaftr: "mailing_list"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "license"
    nameaftr: "license"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "repository"
    nameaftr: "repository"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "anon_root"
    nameaftr: "anon_root"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "browse"
    nameaftr: "browse"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "module"
    nameaftr: "module"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location"
    nameaftr: "location"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "download_page"
    nameaftr: "download_page"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "download_mirror"
    nameaftr: "download_mirror"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "revision"
    nameaftr: "revision"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "file_release"
    nameaftr: "file_release"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wiki"
    nameaftr: "wiki"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bug_database"
    nameaftr: "bug_database"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "screenshots"
    nameaftr: "screenshots"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "maintainer"
    nameaftr: "maintainer"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "developer"
    nameaftr: "developer"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "documenter"
    nameaftr: "documenter"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "translator"
    nameaftr: "translator"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tester"
    nameaftr: "tester"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "helper"
    nameaftr: "helper"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "programming_language"
    nameaftr: "programming_language"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "os"
    nameaftr: "os"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "implement"
    nameaftr: "implement"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "service_endpoint"
    nameaftr: "service_endpoint"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "language"
    nameaftr: "language"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "vendor"
    nameaftr: "vendor"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "platform"
    nameaftr: "platform"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "audience"
    nameaftr: "audience"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "blog"
    nameaftr: "blog"
    classb4: "org.apache.any23.vocab.DOAP"
    classAftr: "org.apache.any23.vocab.DOAP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.DOAP"
  classesB4: "org.apache.any23.vocab.DOAP"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "topic_interest"
    nameaftr: "topic_interest"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "phone"
    nameaftr: "phone"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "icqChatID"
    nameaftr: "icqChatID"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "yahooChatID"
    nameaftr: "yahooChatID"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "member"
    nameaftr: "member"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "givenname"
    nameaftr: "givenname"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "birthday"
    nameaftr: "birthday"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "img"
    nameaftr: "img"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "maker"
    nameaftr: "maker"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tipjar"
    nameaftr: "tipjar"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "membershipClass"
    nameaftr: "membershipClass"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "accountName"
    nameaftr: "accountName"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mbox_sha1sum"
    nameaftr: "mbox_sha1sum"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "geekcode"
    nameaftr: "geekcode"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "interest"
    nameaftr: "interest"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "depicts"
    nameaftr: "depicts"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "knows"
    nameaftr: "knows"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "homepage"
    nameaftr: "homepage"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "firstName"
    nameaftr: "firstName"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "surname"
    nameaftr: "surname"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "isPrimaryTopicOf"
    nameaftr: "isPrimaryTopicOf"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "page"
    nameaftr: "page"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "accountServiceHomepage"
    nameaftr: "accountServiceHomepage"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "depiction"
    nameaftr: "depiction"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "fundedBy"
    nameaftr: "fundedBy"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "title"
    nameaftr: "title"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "weblog"
    nameaftr: "weblog"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logo"
    nameaftr: "logo"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "workplaceHomepage"
    nameaftr: "workplaceHomepage"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "based_near"
    nameaftr: "based_near"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "thumbnail"
    nameaftr: "thumbnail"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "primaryTopic"
    nameaftr: "primaryTopic"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "aimChatID"
    nameaftr: "aimChatID"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "made"
    nameaftr: "made"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "workInfoHomepage"
    nameaftr: "workInfoHomepage"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "currentProject"
    nameaftr: "currentProject"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "holdsAccount"
    nameaftr: "holdsAccount"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "publications"
    nameaftr: "publications"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sha1"
    nameaftr: "sha1"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "gender"
    nameaftr: "gender"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mbox"
    nameaftr: "mbox"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "myersBriggs"
    nameaftr: "myersBriggs"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "plan"
    nameaftr: "plan"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "pastProject"
    nameaftr: "pastProject"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "schoolHomepage"
    nameaftr: "schoolHomepage"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "family_name"
    nameaftr: "family_name"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "msnChatID"
    nameaftr: "msnChatID"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "theme"
    nameaftr: "theme"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "topic"
    nameaftr: "topic"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dnaChecksum"
    nameaftr: "dnaChecksum"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nick"
    nameaftr: "nick"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "jabberID"
    nameaftr: "jabberID"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Person"
    nameaftr: "Person"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PersonalProfileDocument"
    nameaftr: "PersonalProfileDocument"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Project"
    nameaftr: "Project"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "OnlineChatAccount"
    nameaftr: "OnlineChatAccount"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "OnlineAccount"
    nameaftr: "OnlineAccount"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Agent"
    nameaftr: "Agent"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Group"
    nameaftr: "Group"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "OnlineGamingAccount"
    nameaftr: "OnlineGamingAccount"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "OnlineEcommerceAccount"
    nameaftr: "OnlineEcommerceAccount"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Document"
    nameaftr: "Document"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Organization"
    nameaftr: "Organization"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Image"
    nameaftr: "Image"
    classb4: "org.apache.any23.vocab.FOAF"
    classAftr: "org.apache.any23.vocab.FOAF"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.FOAF"
  classesB4: "org.apache.any23.vocab.FOAF"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.GeoNames"
  classesB4: "org.apache.any23.vocab.GeoNames"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Point"
    nameaftr: "Point"
    classb4: "org.apache.any23.vocab.GeoNames"
    classAftr: "org.apache.any23.vocab.GeoNames"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.GeoNames"
  classesB4: "org.apache.any23.vocab.GeoNames"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lat"
    nameaftr: "lat"
    classb4: "org.apache.any23.vocab.GeoNames"
    classAftr: "org.apache.any23.vocab.GeoNames"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.GeoNames"
  classesB4: "org.apache.any23.vocab.GeoNames"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lon"
    nameaftr: "lon"
    classb4: "org.apache.any23.vocab.GeoNames"
    classAftr: "org.apache.any23.vocab.GeoNames"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.GeoNames"
  classesB4: "org.apache.any23.vocab.GeoNames"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Card"
    nameaftr: "Card"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Address"
    nameaftr: "Address"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Geo"
    nameaftr: "Geo"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "honorific_prefix"
    nameaftr: "honorific_prefix"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "given_name"
    nameaftr: "given_name"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "additional_name"
    nameaftr: "additional_name"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "family_name"
    nameaftr: "family_name"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sort_string"
    nameaftr: "sort_string"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "honorific_suffix"
    nameaftr: "honorific_suffix"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nickname"
    nameaftr: "nickname"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "email"
    nameaftr: "email"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logo"
    nameaftr: "logo"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "photo"
    nameaftr: "photo"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uid"
    nameaftr: "uid"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tel"
    nameaftr: "tel"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "note"
    nameaftr: "note"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bday"
    nameaftr: "bday"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "key"
    nameaftr: "key"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "org"
    nameaftr: "org"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "job_title"
    nameaftr: "job_title"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "role"
    nameaftr: "role"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "impp"
    nameaftr: "impp"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sex"
    nameaftr: "sex"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "gender_identity"
    nameaftr: "gender_identity"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "anniversary"
    nameaftr: "anniversary"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "geo"
    nameaftr: "geo"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "adr"
    nameaftr: "adr"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "street_address"
    nameaftr: "street_address"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "extended_address"
    nameaftr: "extended_address"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "locality"
    nameaftr: "locality"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "region"
    nameaftr: "region"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "postal_code"
    nameaftr: "postal_code"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "country_name"
    nameaftr: "country_name"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "latitude"
    nameaftr: "latitude"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "longitude"
    nameaftr: "longitude"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "altitude"
    nameaftr: "altitude"
    classb4: "org.apache.any23.vocab.HCard"
    classAftr: "org.apache.any23.vocab.HCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HCard"
  classesB4: "org.apache.any23.vocab.HCard"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Entry"
    nameaftr: "Entry"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "author"
    nameaftr: "author"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location"
    nameaftr: "location"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "content"
    nameaftr: "content"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "published"
    nameaftr: "published"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "updated"
    nameaftr: "updated"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uid"
    nameaftr: "uid"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "syndication"
    nameaftr: "syndication"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "in_reply_to"
    nameaftr: "in_reply_to"
    classb4: "org.apache.any23.vocab.HEntry"
    classAftr: "org.apache.any23.vocab.HEntry"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEntry"
  classesB4: "org.apache.any23.vocab.HEntry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "event"
    nameaftr: "event"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "start"
    nameaftr: "start"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "end"
    nameaftr: "end"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "duration"
    nameaftr: "duration"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "description"
    nameaftr: "description"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location"
    nameaftr: "location"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "attendee"
    nameaftr: "attendee"
    classb4: "org.apache.any23.vocab.HEvent"
    classAftr: "org.apache.any23.vocab.HEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HEvent"
  classesB4: "org.apache.any23.vocab.HEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HItem"
  classesB4: "org.apache.any23.vocab.HItem"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Item"
    nameaftr: "Item"
    classb4: "org.apache.any23.vocab.HItem"
    classAftr: "org.apache.any23.vocab.HItem"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HItem"
  classesB4: "org.apache.any23.vocab.HItem"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.HItem"
    classAftr: "org.apache.any23.vocab.HItem"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HItem"
  classesB4: "org.apache.any23.vocab.HItem"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.HItem"
    classAftr: "org.apache.any23.vocab.HItem"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HItem"
  classesB4: "org.apache.any23.vocab.HItem"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "photo"
    nameaftr: "photo"
    classb4: "org.apache.any23.vocab.HItem"
    classAftr: "org.apache.any23.vocab.HItem"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HItem"
  classesB4: "org.apache.any23.vocab.HItem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Listing"
    nameaftr: "Listing"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Lister"
    nameaftr: "Lister"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Item"
    nameaftr: "Item"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "action"
    nameaftr: "action"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lister"
    nameaftr: "lister"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "item"
    nameaftr: "item"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sell"
    nameaftr: "sell"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rent"
    nameaftr: "rent"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "trade"
    nameaftr: "trade"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "meet"
    nameaftr: "meet"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "announce"
    nameaftr: "announce"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "offer"
    nameaftr: "offer"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wanted"
    nameaftr: "wanted"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "event"
    nameaftr: "event"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "service"
    nameaftr: "service"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tel"
    nameaftr: "tel"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dtlisted"
    nameaftr: "dtlisted"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dtexpired"
    nameaftr: "dtexpired"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "price"
    nameaftr: "price"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "description"
    nameaftr: "description"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "permalink"
    nameaftr: "permalink"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "region"
    nameaftr: "region"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "postOfficeBox"
    nameaftr: "postOfficeBox"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "locality"
    nameaftr: "locality"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "extendedAddress"
    nameaftr: "extendedAddress"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "streetAddress"
    nameaftr: "streetAddress"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "postalCode"
    nameaftr: "postalCode"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "countryName"
    nameaftr: "countryName"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "listerUrl"
    nameaftr: "listerUrl"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "listerName"
    nameaftr: "listerName"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "itemName"
    nameaftr: "itemName"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "itemUrl"
    nameaftr: "itemUrl"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "itemPhoto"
    nameaftr: "itemPhoto"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "listerOrg"
    nameaftr: "listerOrg"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "listerLogo"
    nameaftr: "listerLogo"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createClass"
    nameaftr: "createClass"
    classb4: "org.apache.any23.vocab.HListing"
    classAftr: "org.apache.any23.vocab.HListing"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HListing"
  classesB4: "org.apache.any23.vocab.HListing"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "product"
    nameaftr: "product"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "photo"
    nameaftr: "photo"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "brand"
    nameaftr: "brand"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "description"
    nameaftr: "description"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "identifier"
    nameaftr: "identifier"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "price"
    nameaftr: "price"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "review"
    nameaftr: "review"
    classb4: "org.apache.any23.vocab.HProduct"
    classAftr: "org.apache.any23.vocab.HProduct"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HProduct"
  classesB4: "org.apache.any23.vocab.HProduct"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Recipe"
    nameaftr: "Recipe"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Duration"
    nameaftr: "Duration"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Ingredient"
    nameaftr: "Ingredient"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Nutrition"
    nameaftr: "Nutrition"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "fn"
    nameaftr: "fn"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "duration"
    nameaftr: "duration"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "durationTitle"
    nameaftr: "durationTitle"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "durationTime"
    nameaftr: "durationTime"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "photo"
    nameaftr: "photo"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "author"
    nameaftr: "author"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "published"
    nameaftr: "published"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nutrition"
    nameaftr: "nutrition"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nutritionValue"
    nameaftr: "nutritionValue"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nutritionValueType"
    nameaftr: "nutritionValueType"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tag"
    nameaftr: "tag"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ingredient"
    nameaftr: "ingredient"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ingredientName"
    nameaftr: "ingredientName"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ingredientQuantity"
    nameaftr: "ingredientQuantity"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ingredientQuantityType"
    nameaftr: "ingredientQuantityType"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "instructions"
    nameaftr: "instructions"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "yield"
    nameaftr: "yield"
    classb4: "org.apache.any23.vocab.HRecipe"
    classAftr: "org.apache.any23.vocab.HRecipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HRecipe"
  classesB4: "org.apache.any23.vocab.HRecipe"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Resume"
    nameaftr: "Resume"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "education"
    nameaftr: "education"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "experience"
    nameaftr: "experience"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "contact"
    nameaftr: "contact"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "affiliation"
    nameaftr: "affiliation"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "skill"
    nameaftr: "skill"
    classb4: "org.apache.any23.vocab.HResume"
    classAftr: "org.apache.any23.vocab.HResume"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.HResume"
  classesB4: "org.apache.any23.vocab.HResume"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "DomainOf_rrule"
    nameaftr: "DomainOf_rrule"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "List_of_Float"
    nameaftr: "List_of_Float"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Valarm"
    nameaftr: "Valarm"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Value_CAL_ADDRESS"
    nameaftr: "Value_CAL_ADDRESS"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Value_DATE"
    nameaftr: "Value_DATE"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Value_DURATION"
    nameaftr: "Value_DURATION"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Value_PERIOD"
    nameaftr: "Value_PERIOD"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Value_RECUR"
    nameaftr: "Value_RECUR"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Vcalendar"
    nameaftr: "Vcalendar"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Vevent"
    nameaftr: "Vevent"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Vfreebusy"
    nameaftr: "Vfreebusy"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Vjournal"
    nameaftr: "Vjournal"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Vtimezone"
    nameaftr: "Vtimezone"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Vtodo"
    nameaftr: "Vtodo"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "attach"
    nameaftr: "attach"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "attendee"
    nameaftr: "attendee"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "calAddress"
    nameaftr: "calAddress"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "component"
    nameaftr: "component"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "daylight"
    nameaftr: "daylight"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "duration"
    nameaftr: "duration"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "exrule"
    nameaftr: "exrule"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "freebusy"
    nameaftr: "freebusy"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "geo"
    nameaftr: "geo"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "organizer"
    nameaftr: "organizer"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rrule"
    nameaftr: "rrule"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "standard"
    nameaftr: "standard"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "trigger"
    nameaftr: "trigger"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tzurl"
    nameaftr: "tzurl"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "X_"
    nameaftr: "X_"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "action"
    nameaftr: "action"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "altrep"
    nameaftr: "altrep"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "byday"
    nameaftr: "byday"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "byhour"
    nameaftr: "byhour"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "byminute"
    nameaftr: "byminute"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bymonth"
    nameaftr: "bymonth"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bysecond"
    nameaftr: "bysecond"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bysetpos"
    nameaftr: "bysetpos"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "byweekno"
    nameaftr: "byweekno"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "byyearday"
    nameaftr: "byyearday"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "calscale"
    nameaftr: "calscale"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "categories"
    nameaftr: "categories"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "class_"
    nameaftr: "class_"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cn"
    nameaftr: "cn"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "comment"
    nameaftr: "comment"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "completed"
    nameaftr: "completed"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "contact"
    nameaftr: "contact"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "count"
    nameaftr: "count"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "created"
    nameaftr: "created"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cutype"
    nameaftr: "cutype"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "delegatedFrom"
    nameaftr: "delegatedFrom"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "delegatedTo"
    nameaftr: "delegatedTo"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "description"
    nameaftr: "description"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dir"
    nameaftr: "dir"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dtend"
    nameaftr: "dtend"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dtstamp"
    nameaftr: "dtstamp"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dtstart"
    nameaftr: "dtstart"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "due"
    nameaftr: "due"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "encoding"
    nameaftr: "encoding"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "exdate"
    nameaftr: "exdate"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "fbtype"
    nameaftr: "fbtype"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "fmttype"
    nameaftr: "fmttype"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "freq"
    nameaftr: "freq"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "interval"
    nameaftr: "interval"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "language"
    nameaftr: "language"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastModified"
    nameaftr: "lastModified"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location"
    nameaftr: "location"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "member"
    nameaftr: "member"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "partstat"
    nameaftr: "partstat"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "percentComplete"
    nameaftr: "percentComplete"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "priority"
    nameaftr: "priority"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "prodid"
    nameaftr: "prodid"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "range"
    nameaftr: "range"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rdate"
    nameaftr: "rdate"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "recurrenceId"
    nameaftr: "recurrenceId"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "related"
    nameaftr: "related"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "relatedTo"
    nameaftr: "relatedTo"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "reltype"
    nameaftr: "reltype"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "repeat"
    nameaftr: "repeat"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "requestStatus"
    nameaftr: "requestStatus"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "resources"
    nameaftr: "resources"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "role"
    nameaftr: "role"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rsvp"
    nameaftr: "rsvp"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sentBy"
    nameaftr: "sentBy"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sequence"
    nameaftr: "sequence"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "status"
    nameaftr: "status"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "summary"
    nameaftr: "summary"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "transp"
    nameaftr: "transp"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tzid"
    nameaftr: "tzid"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tzname"
    nameaftr: "tzname"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tzoffsetfrom"
    nameaftr: "tzoffsetfrom"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tzoffsetto"
    nameaftr: "tzoffsetto"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uid"
    nameaftr: "uid"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "until"
    nameaftr: "until"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "version"
    nameaftr: "version"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createClass"
    nameaftr: "createClass"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.ICAL"
    classAftr: "org.apache.any23.vocab.ICAL"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ICAL"
  classesB4: "org.apache.any23.vocab.ICAL"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Action"
    nameaftr: "Action"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Agent"
    nameaftr: "Agent"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Artifact"
    nameaftr: "Artifact"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Collaborative_Plan"
    nameaftr: "Collaborative_Plan"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Creation_C"
    nameaftr: "Creation_C"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Natural_Object"
    nameaftr: "Natural_Object"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Organisation"
    nameaftr: "Organisation"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Person"
    nameaftr: "Person"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Personal_Plan"
    nameaftr: "Personal_Plan"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Plan"
    nameaftr: "Plan"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Reaction"
    nameaftr: "Reaction"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Transaction"
    nameaftr: "Transaction"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Mental_Object"
    nameaftr: "Mental_Object"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Change"
    nameaftr: "Change"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Physical_Object"
    nameaftr: "Physical_Object"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Process"
    nameaftr: "Process"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "actor"
    nameaftr: "actor"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "actor_in"
    nameaftr: "actor_in"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "direct_part"
    nameaftr: "direct_part"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "member"
    nameaftr: "member"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "part"
    nameaftr: "part"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "creation_P"
    nameaftr: "creation_P"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "participant"
    nameaftr: "participant"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "participant_in"
    nameaftr: "participant_in"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "result_of"
    nameaftr: "result_of"
    classb4: "org.apache.any23.vocab.LKIFCoreAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreAction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Argument"
    nameaftr: "Argument"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Assertion"
    nameaftr: "Assertion"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Assumption"
    nameaftr: "Assumption"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Belief"
    nameaftr: "Belief"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Cause"
    nameaftr: "Cause"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Communicated_Attitude"
    nameaftr: "Communicated_Attitude"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Declaration"
    nameaftr: "Declaration"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Desire"
    nameaftr: "Desire"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Document"
    nameaftr: "Document"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Evaluative_Attitude"
    nameaftr: "Evaluative_Attitude"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Evaluative_Proposition"
    nameaftr: "Evaluative_Proposition"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Evidence"
    nameaftr: "Evidence"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Exception"
    nameaftr: "Exception"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Expectation"
    nameaftr: "Expectation"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Expression"
    nameaftr: "Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Fact"
    nameaftr: "Fact"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Intention"
    nameaftr: "Intention"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Lie"
    nameaftr: "Lie"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Medium"
    nameaftr: "Medium"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Observation"
    nameaftr: "Observation"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Problem"
    nameaftr: "Problem"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Promise"
    nameaftr: "Promise"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Proposition"
    nameaftr: "Proposition"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Propositional_Attitude"
    nameaftr: "Propositional_Attitude"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Qualification"
    nameaftr: "Qualification"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Qualified"
    nameaftr: "Qualified"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Reason"
    nameaftr: "Reason"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Speech_Act"
    nameaftr: "Speech_Act"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Statement_In_Writing"
    nameaftr: "Statement_In_Writing"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Surprise"
    nameaftr: "Surprise"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "addressee"
    nameaftr: "addressee"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "asserted_by"
    nameaftr: "asserted_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "asserts"
    nameaftr: "asserts"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "attitude"
    nameaftr: "attitude"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "author"
    nameaftr: "author"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bears"
    nameaftr: "bears"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "believed_by"
    nameaftr: "believed_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "believes"
    nameaftr: "believes"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "declares"
    nameaftr: "declares"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "declared_by"
    nameaftr: "declared_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "evaluated_by"
    nameaftr: "evaluated_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "evaluates"
    nameaftr: "evaluates"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "evaluatively_comparable"
    nameaftr: "evaluatively_comparable"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "held_by"
    nameaftr: "held_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "holds"
    nameaftr: "holds"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "intended_by"
    nameaftr: "intended_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "intends"
    nameaftr: "intends"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "medium"
    nameaftr: "medium"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "observer"
    nameaftr: "observer"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "observes"
    nameaftr: "observes"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "promised_by"
    nameaftr: "promised_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "promises"
    nameaftr: "promises"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "qualified_by"
    nameaftr: "qualified_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "qualifies"
    nameaftr: "qualifies"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "qualitatively_comparable"
    nameaftr: "qualitatively_comparable"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "stated_by"
    nameaftr: "stated_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "states"
    nameaftr: "states"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "towards"
    nameaftr: "towards"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "utterer"
    nameaftr: "utterer"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "utters"
    nameaftr: "utters"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "creation"
    nameaftr: "creation"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "counts_as"
    nameaftr: "counts_as"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imposed_on"
    nameaftr: "imposed_on"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "played_by"
    nameaftr: "played_by"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "plays"
    nameaftr: "plays"
    classb4: "org.apache.any23.vocab.LKIFCoreExpression"
    classAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreExpression"
  classesB4: "org.apache.any23.vocab.LKIFCoreExpression"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Limited_Company"
    nameaftr: "Limited_Company"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Private_Legal_Person"
    nameaftr: "Private_Legal_Person"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Society"
    nameaftr: "Society"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Natural_Person"
    nameaftr: "Natural_Person"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Mandate"
    nameaftr: "Mandate"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Corporation"
    nameaftr: "Corporation"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Person"
    nameaftr: "Legal_Person"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Public_Body"
    nameaftr: "Public_Body"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Foundation"
    nameaftr: "Foundation"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Co_operative"
    nameaftr: "Co_operative"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legislative_Body"
    nameaftr: "Legislative_Body"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Delegation"
    nameaftr: "Delegation"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Speech_Act"
    nameaftr: "Legal_Speech_Act"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Public_Act"
    nameaftr: "Public_Act"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Company"
    nameaftr: "Company"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Decision"
    nameaftr: "Decision"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Public_Limited_Company"
    nameaftr: "Public_Limited_Company"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Incorporated"
    nameaftr: "Incorporated"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Act_of_Law"
    nameaftr: "Act_of_Law"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Association"
    nameaftr: "Association"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Assignment"
    nameaftr: "Assignment"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Unincorporated"
    nameaftr: "Unincorporated"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalAction"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalAction"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalAction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Social_Legal_Role"
    nameaftr: "Social_Legal_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Role"
    nameaftr: "Legal_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Professional_Legal_Role"
    nameaftr: "Professional_Legal_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreLegalRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreLegalRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreLegalRole"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Atom"
    nameaftr: "Atom"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Composition"
    nameaftr: "Composition"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Pair"
    nameaftr: "Pair"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Part"
    nameaftr: "Part"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Whole"
    nameaftr: "Whole"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "component"
    nameaftr: "component"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "component_of"
    nameaftr: "component_of"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "composed_of"
    nameaftr: "composed_of"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "composes"
    nameaftr: "composes"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "contained_in"
    nameaftr: "contained_in"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "contains"
    nameaftr: "contains"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "direct_part"
    nameaftr: "direct_part"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "direct_part_of"
    nameaftr: "direct_part_of"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "member"
    nameaftr: "member"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "member_of"
    nameaftr: "member_of"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "part"
    nameaftr: "part"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "part_of"
    nameaftr: "part_of"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "strict_part"
    nameaftr: "strict_part"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "strict_part_of"
    nameaftr: "strict_part_of"
    classb4: "org.apache.any23.vocab.LKIFCoreMereology"
    classAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreMereology"
  classesB4: "org.apache.any23.vocab.LKIFCoreMereology"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Hohfeldian_Power"
    nameaftr: "Hohfeldian_Power"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Normatively_Qualified"
    nameaftr: "Normatively_Qualified"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Code_of_Conduct"
    nameaftr: "Code_of_Conduct"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Regulation"
    nameaftr: "Regulation"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Soft_Law"
    nameaftr: "Soft_Law"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Strictly_Disallowed"
    nameaftr: "Strictly_Disallowed"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Permissive_Right"
    nameaftr: "Permissive_Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Proclamation"
    nameaftr: "Proclamation"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Expression"
    nameaftr: "Legal_Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Qualificatory_Expression"
    nameaftr: "Qualificatory_Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Enabling_Power"
    nameaftr: "Enabling_Power"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Existential_Expression"
    nameaftr: "Existential_Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Persuasive_Precedent"
    nameaftr: "Persuasive_Precedent"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Belief_In_Violation"
    nameaftr: "Belief_In_Violation"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Strictly_Allowed"
    nameaftr: "Strictly_Allowed"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Doctrine"
    nameaftr: "Legal_Doctrine"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Resolution"
    nameaftr: "Resolution"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Evaluative_Expression"
    nameaftr: "Evaluative_Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Liberty_Right"
    nameaftr: "Liberty_Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Declarative_Power"
    nameaftr: "Declarative_Power"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Contract"
    nameaftr: "Contract"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Custom"
    nameaftr: "Custom"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Exclusionary_Right"
    nameaftr: "Exclusionary_Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "International_Agreement"
    nameaftr: "International_Agreement"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Customary_Law"
    nameaftr: "Customary_Law"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Action_Power"
    nameaftr: "Action_Power"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Source"
    nameaftr: "Legal_Source"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Statute"
    nameaftr: "Statute"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "International_Arbitration"
    nameaftr: "International_Arbitration"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Immunity"
    nameaftr: "Immunity"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Treaty"
    nameaftr: "Treaty"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Mandatory_Precedent"
    nameaftr: "Mandatory_Precedent"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Code"
    nameaftr: "Code"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Allowed"
    nameaftr: "Allowed"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Observation_of_Violation"
    nameaftr: "Observation_of_Violation"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Legal_Document"
    nameaftr: "Legal_Document"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Potestative_Expression"
    nameaftr: "Potestative_Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Norm"
    nameaftr: "Norm"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Potestative_Right"
    nameaftr: "Potestative_Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Allowed_And_Disallowed"
    nameaftr: "Allowed_And_Disallowed"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Obligation"
    nameaftr: "Obligation"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Disallowed_Intention"
    nameaftr: "Disallowed_Intention"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Permission"
    nameaftr: "Permission"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Liability_Right"
    nameaftr: "Liability_Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Right"
    nameaftr: "Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Obliged"
    nameaftr: "Obliged"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Non_binding_International_Agreement"
    nameaftr: "Non_binding_International_Agreement"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Directive"
    nameaftr: "Directive"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Disallowed"
    nameaftr: "Disallowed"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Definitional_Expression"
    nameaftr: "Definitional_Expression"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Prohibition"
    nameaftr: "Prohibition"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Precedent"
    nameaftr: "Precedent"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Obligative_Right"
    nameaftr: "Obligative_Right"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "normatively_comparable"
    nameaftr: "normatively_comparable"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "normatively_equivalent_or_better"
    nameaftr: "normatively_equivalent_or_better"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "disallows"
    nameaftr: "disallows"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "normatively_strictly_worse"
    nameaftr: "normatively_strictly_worse"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "normatively_not_equivalent"
    nameaftr: "normatively_not_equivalent"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "normatively_strictly_better"
    nameaftr: "normatively_strictly_better"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "allowed_by"
    nameaftr: "allowed_by"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "disallowed_by"
    nameaftr: "disallowed_by"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "allows"
    nameaftr: "allows"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "normatively_equivalent_or_worse"
    nameaftr: "normatively_equivalent_or_worse"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "commands"
    nameaftr: "commands"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "commanded_by"
    nameaftr: "commanded_by"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "strictly_equivalent"
    nameaftr: "strictly_equivalent"
    classb4: "org.apache.any23.vocab.LKIFCoreNorm"
    classAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreNorm"
  classesB4: "org.apache.any23.vocab.LKIFCoreNorm"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Change"
    nameaftr: "Change"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Continuation"
    nameaftr: "Continuation"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Initiation"
    nameaftr: "Initiation"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Mental_Process"
    nameaftr: "Mental_Process"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Physical_Object"
    nameaftr: "Physical_Object"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Physical_Process"
    nameaftr: "Physical_Process"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Process"
    nameaftr: "Process"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Termination"
    nameaftr: "Termination"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "created_by"
    nameaftr: "created_by"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "creation"
    nameaftr: "creation"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "participant"
    nameaftr: "participant"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "participant_in"
    nameaftr: "participant_in"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "requirement"
    nameaftr: "requirement"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "requirement_of"
    nameaftr: "requirement_of"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "resource"
    nameaftr: "resource"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "resource_for"
    nameaftr: "resource_for"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "result"
    nameaftr: "result"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "result_of"
    nameaftr: "result_of"
    classb4: "org.apache.any23.vocab.LKIFCoreProcess"
    classAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreProcess"
  classesB4: "org.apache.any23.vocab.LKIFCoreProcess"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Absolute_Place"
    nameaftr: "Absolute_Place"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Comprehensive_Place"
    nameaftr: "Comprehensive_Place"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Location_Complex"
    nameaftr: "Location_Complex"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Place"
    nameaftr: "Place"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Relative_Place"
    nameaftr: "Relative_Place"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "abut"
    nameaftr: "abut"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "connect"
    nameaftr: "connect"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cover"
    nameaftr: "cover"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "covered_by"
    nameaftr: "covered_by"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "exactly_coincide"
    nameaftr: "exactly_coincide"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "externally_connect"
    nameaftr: "externally_connect"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "in"
    nameaftr: "in"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location_complex"
    nameaftr: "location_complex"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location_complex_for"
    nameaftr: "location_complex_for"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "meet"
    nameaftr: "meet"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "overlap"
    nameaftr: "overlap"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "partially_coincide"
    nameaftr: "partially_coincide"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "relatively_fixed"
    nameaftr: "relatively_fixed"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "spatial_reference"
    nameaftr: "spatial_reference"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "spatial_relation"
    nameaftr: "spatial_relation"
    classb4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
    classAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  classesB4: "org.apache.any23.vocab.LKIFCoreRelativePlaces"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Epistemic_Role"
    nameaftr: "Epistemic_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Function"
    nameaftr: "Function"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Organisation_Role"
    nameaftr: "Organisation_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Person_Role"
    nameaftr: "Person_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Role"
    nameaftr: "Role"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Social_Role"
    nameaftr: "Social_Role"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Subjective_Entity"
    nameaftr: "Subjective_Entity"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "context"
    nameaftr: "context"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "counts_as"
    nameaftr: "counts_as"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imposed_on"
    nameaftr: "imposed_on"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "played_by"
    nameaftr: "played_by"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "plays"
    nameaftr: "plays"
    classb4: "org.apache.any23.vocab.LKIFCoreRole"
    classAftr: "org.apache.any23.vocab.LKIFCoreRole"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRole"
  classesB4: "org.apache.any23.vocab.LKIFCoreRole"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Valid_Rule"
    nameaftr: "Valid_Rule"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Rule"
    nameaftr: "Rule"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rule_predicate"
    nameaftr: "rule_predicate"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "prior"
    nameaftr: "prior"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "excluded"
    nameaftr: "excluded"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "applies"
    nameaftr: "applies"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rebuts"
    nameaftr: "rebuts"
    classb4: "org.apache.any23.vocab.LKIFCoreRules"
    classAftr: "org.apache.any23.vocab.LKIFCoreRules"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreRules"
  classesB4: "org.apache.any23.vocab.LKIFCoreRules"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Interval"
    nameaftr: "Interval"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Moment"
    nameaftr: "Moment"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Pair_Of_Periods"
    nameaftr: "Pair_Of_Periods"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Temporal_Occurrence"
    nameaftr: "Temporal_Occurrence"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "after"
    nameaftr: "after"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "before"
    nameaftr: "before"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "between"
    nameaftr: "between"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "during"
    nameaftr: "during"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "finishes"
    nameaftr: "finishes"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "immediately_after"
    nameaftr: "immediately_after"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "immediately_before"
    nameaftr: "immediately_before"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "overlap"
    nameaftr: "overlap"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "preceeds"
    nameaftr: "preceeds"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "starts"
    nameaftr: "starts"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "temporal_relation"
    nameaftr: "temporal_relation"
    classb4: "org.apache.any23.vocab.LKIFCoreTime"
    classAftr: "org.apache.any23.vocab.LKIFCoreTime"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTime"
  classesB4: "org.apache.any23.vocab.LKIFCoreTime"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Semantic_Annotation"
    nameaftr: "Semantic_Annotation"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Modification"
    nameaftr: "Modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Transposition"
    nameaftr: "Transposition"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Ultractivity"
    nameaftr: "Ultractivity"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Annulment"
    nameaftr: "Annulment"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "End_efficacy"
    nameaftr: "End_efficacy"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Efficacy_Modification"
    nameaftr: "Efficacy_Modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Modification_of_System"
    nameaftr: "Modification_of_System"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Dynamic_Temporal_Entity"
    nameaftr: "Dynamic_Temporal_Entity"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Remaking"
    nameaftr: "Remaking"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Application"
    nameaftr: "Application"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Ratification"
    nameaftr: "Ratification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Textual_Modification"
    nameaftr: "Textual_Modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Prorogation_in_Force"
    nameaftr: "Prorogation_in_Force"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Application_Date"
    nameaftr: "Application_Date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Retroactivity"
    nameaftr: "Retroactivity"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Modification_of_Term"
    nameaftr: "Modification_of_Term"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Efficacy_Interval"
    nameaftr: "Efficacy_Interval"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Start_Efficacy"
    nameaftr: "Start_Efficacy"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Substitution"
    nameaftr: "Substitution"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Temporal_Modification"
    nameaftr: "Temporal_Modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Suspension"
    nameaftr: "Suspension"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "In_Force_Modification"
    nameaftr: "In_Force_Modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Publication_Date"
    nameaftr: "Publication_Date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Exception"
    nameaftr: "Exception"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Modification_of_Meaning"
    nameaftr: "Modification_of_Meaning"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Static_Temporal_Entity"
    nameaftr: "Static_Temporal_Entity"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "End_in_Force"
    nameaftr: "End_in_Force"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Start_in_Force"
    nameaftr: "Start_in_Force"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Integration"
    nameaftr: "Integration"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Application_Interval"
    nameaftr: "Application_Interval"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Interpretation"
    nameaftr: "Interpretation"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Deregulation"
    nameaftr: "Deregulation"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "In_Force_Interval"
    nameaftr: "In_Force_Interval"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Repeal"
    nameaftr: "Repeal"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Modification_of_Scope"
    nameaftr: "Modification_of_Scope"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Delivery_Date"
    nameaftr: "Delivery_Date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Enter_in_Force_Date"
    nameaftr: "Enter_in_Force_Date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Variation"
    nameaftr: "Variation"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Existence_Date"
    nameaftr: "Existence_Date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Relocation"
    nameaftr: "Relocation"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Prorogation_Efficacy"
    nameaftr: "Prorogation_Efficacy"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Extension"
    nameaftr: "Extension"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Renewal"
    nameaftr: "Renewal"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "initial_date"
    nameaftr: "initial_date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "in_force"
    nameaftr: "in_force"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "final_date_of"
    nameaftr: "final_date_of"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "efficacy"
    nameaftr: "efficacy"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "initial_date_of"
    nameaftr: "initial_date_of"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "produce_efficacy_modification"
    nameaftr: "produce_efficacy_modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "duration"
    nameaftr: "duration"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "final_date"
    nameaftr: "final_date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "application"
    nameaftr: "application"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "date"
    nameaftr: "date"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "produce_textual_modification"
    nameaftr: "produce_textual_modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "produce_inforce_modification"
    nameaftr: "produce_inforce_modification"
    classb4: "org.apache.any23.vocab.LKIFCoreTimeModification"
    classAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTimeModification"
  classesB4: "org.apache.any23.vocab.LKIFCoreTimeModification"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Abstract_Entity"
    nameaftr: "Abstract_Entity"
    classb4: "org.apache.any23.vocab.LKIFCoreTop"
    classAftr: "org.apache.any23.vocab.LKIFCoreTop"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Mental_Entity"
    nameaftr: "Mental_Entity"
    classb4: "org.apache.any23.vocab.LKIFCoreTop"
    classAftr: "org.apache.any23.vocab.LKIFCoreTop"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Mental_Object"
    nameaftr: "Mental_Object"
    classb4: "org.apache.any23.vocab.LKIFCoreTop"
    classAftr: "org.apache.any23.vocab.LKIFCoreTop"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Occurrence"
    nameaftr: "Occurrence"
    classb4: "org.apache.any23.vocab.LKIFCoreTop"
    classAftr: "org.apache.any23.vocab.LKIFCoreTop"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Physical_Entity"
    nameaftr: "Physical_Entity"
    classb4: "org.apache.any23.vocab.LKIFCoreTop"
    classAftr: "org.apache.any23.vocab.LKIFCoreTop"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Spatio_Temporal_Occurrence"
    nameaftr: "Spatio_Temporal_Occurrence"
    classb4: "org.apache.any23.vocab.LKIFCoreTop"
    classAftr: "org.apache.any23.vocab.LKIFCoreTop"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.LKIFCoreTop"
  classesB4: "org.apache.any23.vocab.LKIFCoreTop"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "title"
    nameaftr: "title"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "type"
    nameaftr: "type"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "image"
    nameaftr: "image"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "description"
    nameaftr: "description"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "determiner"
    nameaftr: "determiner"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "locale"
    nameaftr: "locale"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "localeAlternate"
    nameaftr: "localeAlternate"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "siteName"
    nameaftr: "siteName"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "video"
    nameaftr: "video"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imageURL"
    nameaftr: "imageURL"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imageSecureURL"
    nameaftr: "imageSecureURL"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imageType"
    nameaftr: "imageType"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imageWidth"
    nameaftr: "imageWidth"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "imageHeight"
    nameaftr: "imageHeight"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "videoURL"
    nameaftr: "videoURL"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "videoSecureURL"
    nameaftr: "videoSecureURL"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "videoType"
    nameaftr: "videoType"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "videoWidth"
    nameaftr: "videoWidth"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "videoHeight"
    nameaftr: "videoHeight"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "audio"
    nameaftr: "audio"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "audioSecureURL"
    nameaftr: "audioSecureURL"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "audioType"
    nameaftr: "audioType"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createClass"
    nameaftr: "createClass"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.OGP"
    classAftr: "org.apache.any23.vocab.OGP"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.OGP"
  classesB4: "org.apache.any23.vocab.OGP"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "AudioDescribedVersion"
    nameaftr: "AudioDescribedVersion"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Brand"
    nameaftr: "Brand"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Broadcast"
    nameaftr: "Broadcast"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Broadcaster"
    nameaftr: "Broadcaster"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Category"
    nameaftr: "Category"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Channel"
    nameaftr: "Channel"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Clip"
    nameaftr: "Clip"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "DAB"
    nameaftr: "DAB"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "DVB"
    nameaftr: "DVB"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Episode"
    nameaftr: "Episode"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "FM"
    nameaftr: "FM"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "FirstBroadcast"
    nameaftr: "FirstBroadcast"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Format"
    nameaftr: "Format"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Genre"
    nameaftr: "Genre"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "IPStream"
    nameaftr: "IPStream"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LW"
    nameaftr: "LW"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LocalRadio"
    nameaftr: "LocalRadio"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "MusicSegment"
    nameaftr: "MusicSegment"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NationalRadio"
    nameaftr: "NationalRadio"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "OriginalVersion"
    nameaftr: "OriginalVersion"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Outlet"
    nameaftr: "Outlet"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Person"
    nameaftr: "Person"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Place"
    nameaftr: "Place"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Programme"
    nameaftr: "Programme"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ProgrammeItem"
    nameaftr: "ProgrammeItem"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Radio"
    nameaftr: "Radio"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "RegionalRadio"
    nameaftr: "RegionalRadio"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "RepeatBroadcast"
    nameaftr: "RepeatBroadcast"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Season"
    nameaftr: "Season"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Segment"
    nameaftr: "Segment"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Series"
    nameaftr: "Series"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Service"
    nameaftr: "Service"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ShortenedVersion"
    nameaftr: "ShortenedVersion"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SpeechSegment"
    nameaftr: "SpeechSegment"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SignedVersion"
    nameaftr: "SignedVersion"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Subject"
    nameaftr: "Subject"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Subtitle"
    nameaftr: "Subtitle"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "TV"
    nameaftr: "TV"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Version"
    nameaftr: "Version"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Web"
    nameaftr: "Web"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "actor"
    nameaftr: "actor"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "anchor"
    nameaftr: "anchor"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "aspect_ratio"
    nameaftr: "aspect_ratio"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "author"
    nameaftr: "author"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "broadcast_of"
    nameaftr: "broadcast_of"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "broadcast_on"
    nameaftr: "broadcast_on"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "broadcaster"
    nameaftr: "broadcaster"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "channel"
    nameaftr: "channel"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "clip"
    nameaftr: "clip"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "commentator"
    nameaftr: "commentator"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "credit"
    nameaftr: "credit"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "director"
    nameaftr: "director"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "duration"
    nameaftr: "duration"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "episode"
    nameaftr: "episode"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "executive_producer"
    nameaftr: "executive_producer"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "format"
    nameaftr: "format"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "frequency"
    nameaftr: "frequency"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "genre"
    nameaftr: "genre"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "location"
    nameaftr: "location"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "long_synopsis"
    nameaftr: "long_synopsis"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "masterbrand"
    nameaftr: "masterbrand"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "medium_synopsis"
    nameaftr: "medium_synopsis"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "microsite"
    nameaftr: "microsite"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "news_reader"
    nameaftr: "news_reader"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "outlet"
    nameaftr: "outlet"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "parent_series"
    nameaftr: "parent_series"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "parent_service"
    nameaftr: "parent_service"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "participant"
    nameaftr: "participant"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "performer"
    nameaftr: "performer"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "person"
    nameaftr: "person"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "place"
    nameaftr: "place"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "position"
    nameaftr: "position"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "producer"
    nameaftr: "producer"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "schedule_date"
    nameaftr: "schedule_date"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "season_broadcast"
    nameaftr: "season_broadcast"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "series"
    nameaftr: "series"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "service"
    nameaftr: "service"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "short_synopsis"
    nameaftr: "short_synopsis"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sound_format"
    nameaftr: "sound_format"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "subject"
    nameaftr: "subject"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "subtitle_language"
    nameaftr: "subtitle_language"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "synopsis"
    nameaftr: "synopsis"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tag"
    nameaftr: "tag"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "text"
    nameaftr: "text"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "time"
    nameaftr: "time"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "track"
    nameaftr: "track"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "version"
    nameaftr: "version"
    classb4: "org.apache.any23.vocab.Programme"
    classAftr: "org.apache.any23.vocab.Programme"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Programme"
  classesB4: "org.apache.any23.vocab.Programme"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "commenter"
    nameaftr: "commenter"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "hasComment"
    nameaftr: "hasComment"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "hasFeedback"
    nameaftr: "hasFeedback"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "hasReview"
    nameaftr: "hasReview"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "maxRating"
    nameaftr: "maxRating"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "minRating"
    nameaftr: "minRating"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "positiveVotes"
    nameaftr: "positiveVotes"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rating"
    nameaftr: "rating"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "reviewer"
    nameaftr: "reviewer"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "text"
    nameaftr: "text"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "title"
    nameaftr: "title"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "totalVotes"
    nameaftr: "totalVotes"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "type"
    nameaftr: "type"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Comment"
    nameaftr: "Comment"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Feedback"
    nameaftr: "Feedback"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Review"
    nameaftr: "Review"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.Review"
    classAftr: "org.apache.any23.vocab.Review"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Review"
  classesB4: "org.apache.any23.vocab.Review"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "votes"
    nameaftr: "votes"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "count"
    nameaftr: "count"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "average"
    nameaftr: "average"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "worst"
    nameaftr: "worst"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "best"
    nameaftr: "best"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ReviewAggregate"
    nameaftr: "ReviewAggregate"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.ReviewAggregate"
    classAftr: "org.apache.any23.vocab.ReviewAggregate"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.ReviewAggregate"
  classesB4: "org.apache.any23.vocab.ReviewAggregate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "domain"
    nameaftr: "domain"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nesting"
    nameaftr: "nesting"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nesting_original"
    nameaftr: "nesting_original"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nesting_structured"
    nameaftr: "nesting_structured"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "size"
    nameaftr: "size"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "date"
    nameaftr: "date"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createClass"
    nameaftr: "createClass"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.SINDICE"
    classAftr: "org.apache.any23.vocab.SINDICE"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.SINDICE"
  classesB4: "org.apache.any23.vocab.SINDICE"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "additional_name"
    nameaftr: "additional_name"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "adr"
    nameaftr: "adr"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "agent"
    nameaftr: "agent"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "altitude"
    nameaftr: "altitude"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bday"
    nameaftr: "bday"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "category"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "class_"
    nameaftr: "class_"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "country_name"
    nameaftr: "country_name"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "email"
    nameaftr: "email"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "extended_address"
    nameaftr: "extended_address"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "family_name"
    nameaftr: "family_name"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "fax"
    nameaftr: "fax"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "fn"
    nameaftr: "fn"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "geo"
    nameaftr: "geo"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "given_name"
    nameaftr: "given_name"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "homeAdr"
    nameaftr: "homeAdr"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "homeTel"
    nameaftr: "homeTel"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "honorific_prefix"
    nameaftr: "honorific_prefix"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "honorific_suffix"
    nameaftr: "honorific_suffix"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "key"
    nameaftr: "key"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "label"
    nameaftr: "label"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "latitude"
    nameaftr: "latitude"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "locality"
    nameaftr: "locality"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "logo"
    nameaftr: "logo"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "longitude"
    nameaftr: "longitude"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mailer"
    nameaftr: "mailer"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mobileEmail"
    nameaftr: "mobileEmail"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mobileTel"
    nameaftr: "mobileTel"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "n"
    nameaftr: "n"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "nickname"
    nameaftr: "nickname"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "note"
    nameaftr: "note"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "org"
    nameaftr: "org"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "organization_name"
    nameaftr: "organization_name"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "organization_unit"
    nameaftr: "organization_unit"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "personalEmail"
    nameaftr: "personalEmail"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "photo"
    nameaftr: "photo"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "post_office_box"
    nameaftr: "post_office_box"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "postal_code"
    nameaftr: "postal_code"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "region"
    nameaftr: "region"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "rev"
    nameaftr: "rev"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "role"
    nameaftr: "role"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sort_string"
    nameaftr: "sort_string"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sound"
    nameaftr: "sound"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "street_address"
    nameaftr: "street_address"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tel"
    nameaftr: "tel"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "title"
    nameaftr: "title"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tz"
    nameaftr: "tz"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uid"
    nameaftr: "uid"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "unlabeledAdr"
    nameaftr: "unlabeledAdr"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "unlabeledEmail"
    nameaftr: "unlabeledEmail"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "unlabeledTel"
    nameaftr: "unlabeledTel"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "url"
    nameaftr: "url"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "workAdr"
    nameaftr: "workAdr"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "workEmail"
    nameaftr: "workEmail"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "workTel"
    nameaftr: "workTel"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Address"
    nameaftr: "Address"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "addressType"
    nameaftr: "addressType"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Telephone"
    nameaftr: "Telephone"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Location"
    nameaftr: "Location"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Name"
    nameaftr: "Name"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Organization"
    nameaftr: "Organization"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "VCard"
    nameaftr: "VCard"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.VCard"
    classAftr: "org.apache.any23.vocab.VCard"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VCard"
  classesB4: "org.apache.any23.vocab.VCard"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "namespace"
    nameaftr: "namespace"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "classes"
    nameaftr: "classes"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "properties"
    nameaftr: "properties"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "resourceToCommentMap"
    nameaftr: "resourceToCommentMap"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getNamespace"
    nameaftr: "getNamespace"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getClass"
    nameaftr: "getClass"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getProperty"
    nameaftr: "getProperty"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getPropertyCamelCase"
    nameaftr: "getPropertyCamelCase"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getClasses"
    nameaftr: "getClasses"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getProperties"
    nameaftr: "getProperties"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getComments"
    nameaftr: "getComments"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createClass"
    nameaftr: "createClass"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getProperty"
    nameaftr: "getProperty"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "defaultValue"
    nameaftr: "defaultValue"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "resource"
    nameaftr: "resource"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "newMap"
    nameaftr: "newMap"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "res"
    nameaftr: "res"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "prop"
    nameaftr: "prop"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "res"
    nameaftr: "res"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "res"
    nameaftr: "res"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "prop"
    nameaftr: "prop"
    classb4: "org.apache.any23.vocab.Vocabulary"
    classAftr: "org.apache.any23.vocab.Vocabulary"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Vocabulary"
  classesB4: "org.apache.any23.vocab.Vocabulary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "NAMESPACE"
    nameaftr: "NAMESPACE"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Adaption"
    nameaftr: "Adaption"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Animal_Intelligence"
    nameaftr: "Animal_Intelligence"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "BehaviouralPattern"
    nameaftr: "BehaviouralPattern"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Class"
    nameaftr: "Class"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Collection"
    nameaftr: "Collection"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "CommunicationAdaption"
    nameaftr: "CommunicationAdaption"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ConservationStatus"
    nameaftr: "ConservationStatus"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "EcosystemRole"
    nameaftr: "EcosystemRole"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Ecozone"
    nameaftr: "Ecozone"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ExtremesAdaptiation"
    nameaftr: "ExtremesAdaptiation"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Family"
    nameaftr: "Family"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "FeedingHabit"
    nameaftr: "FeedingHabit"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "FreshwaterHabitat"
    nameaftr: "FreshwaterHabitat"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Genus"
    nameaftr: "Genus"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Habitat"
    nameaftr: "Habitat"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Infraorder"
    nameaftr: "Infraorder"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Kingdom"
    nameaftr: "Kingdom"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Lifecycle"
    nameaftr: "Lifecycle"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LocomotionAdaption"
    nameaftr: "LocomotionAdaption"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "MarineHabitat"
    nameaftr: "MarineHabitat"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Morphology"
    nameaftr: "Morphology"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Order"
    nameaftr: "Order"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Phylum"
    nameaftr: "Phylum"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PredationStrategy"
    nameaftr: "PredationStrategy"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "RedListStatus"
    nameaftr: "RedListStatus"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ReproductionStrategy"
    nameaftr: "ReproductionStrategy"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SocialBehaviour"
    nameaftr: "SocialBehaviour"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Species"
    nameaftr: "Species"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Suborder"
    nameaftr: "Suborder"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Subspecies"
    nameaftr: "Subspecies"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Superclass"
    nameaftr: "Superclass"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Superfamily"
    nameaftr: "Superfamily"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Superorder"
    nameaftr: "Superorder"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "SurvivalStrategy"
    nameaftr: "SurvivalStrategy"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "TaxonName"
    nameaftr: "TaxonName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "TaxonRank"
    nameaftr: "TaxonRank"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "TerrestrialHabitat"
    nameaftr: "TerrestrialHabitat"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "Tribe"
    nameaftr: "Tribe"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "adaptation"
    nameaftr: "adaptation"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "clazz"
    nameaftr: "clazz"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "collection"
    nameaftr: "collection"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "conservationStatus"
    nameaftr: "conservationStatus"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "distributionMap"
    nameaftr: "distributionMap"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ecozone"
    nameaftr: "ecozone"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "family"
    nameaftr: "family"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "genus"
    nameaftr: "genus"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "growsIn"
    nameaftr: "growsIn"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "habitat"
    nameaftr: "habitat"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "infraorder"
    nameaftr: "infraorder"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "kingdom"
    nameaftr: "kingdom"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "livesIn"
    nameaftr: "livesIn"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "order"
    nameaftr: "order"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "phylum"
    nameaftr: "phylum"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "redListStatus"
    nameaftr: "redListStatus"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "species"
    nameaftr: "species"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "subspecies"
    nameaftr: "subspecies"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "suborder"
    nameaftr: "suborder"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superclass"
    nameaftr: "superclass"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superfamily"
    nameaftr: "superfamily"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superorder"
    nameaftr: "superorder"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tribe"
    nameaftr: "tribe"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "clazzName"
    nameaftr: "clazzName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "commonName"
    nameaftr: "commonName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "familyName"
    nameaftr: "familyName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "genusName"
    nameaftr: "genusName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "infraorderName"
    nameaftr: "infraorderName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "kingdomName"
    nameaftr: "kingdomName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "orderName"
    nameaftr: "orderName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "phylumName"
    nameaftr: "phylumName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "populationTrend"
    nameaftr: "populationTrend"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "scientificName"
    nameaftr: "scientificName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "shortDescription"
    nameaftr: "shortDescription"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "speciesName"
    nameaftr: "speciesName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "suborderName"
    nameaftr: "suborderName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "subspeciesName"
    nameaftr: "subspeciesName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superspeciesName"
    nameaftr: "superspeciesName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superclassName"
    nameaftr: "superclassName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superfamilyName"
    nameaftr: "superfamilyName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "superorderName"
    nameaftr: "superorderName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "taxonomicName"
    nameaftr: "taxonomicName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "threatDescription"
    nameaftr: "threatDescription"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "tribeName"
    nameaftr: "tribeName"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "yearAssessed"
    nameaftr: "yearAssessed"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createClass"
    nameaftr: "createClass"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.WO"
    classAftr: "org.apache.any23.vocab.WO"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.WO"
  classesB4: "org.apache.any23.vocab.WO"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "contact"
    nameaftr: "contact"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "acquaintance"
    nameaftr: "acquaintance"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "friend"
    nameaftr: "friend"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "met"
    nameaftr: "met"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "coWorker"
    nameaftr: "coWorker"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "colleague"
    nameaftr: "colleague"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "coResident"
    nameaftr: "coResident"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "neighbor"
    nameaftr: "neighbor"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "child"
    nameaftr: "child"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "parent"
    nameaftr: "parent"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "spouse"
    nameaftr: "spouse"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "kin"
    nameaftr: "kin"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "muse"
    nameaftr: "muse"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "crush"
    nameaftr: "crush"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "date"
    nameaftr: "date"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sweetheart"
    nameaftr: "sweetheart"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "me"
    nameaftr: "me"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "mePage"
    nameaftr: "mePage"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PeopleXFNProperties"
    nameaftr: "PeopleXFNProperties"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "HyperlinkXFNProperties"
    nameaftr: "HyperlinkXFNProperties"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getPropertyByLocalName"
    nameaftr: "getPropertyByLocalName"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getExtendedProperty"
    nameaftr: "getExtendedProperty"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "result"
    nameaftr: "result"
    classb4: "org.apache.any23.vocab.XFN"
    classAftr: "org.apache.any23.vocab.XFN"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XFN"
  classesB4: "org.apache.any23.vocab.XFN"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XHTML"
  classesB4: "org.apache.any23.vocab.XHTML"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "license"
    nameaftr: "license"
    classb4: "org.apache.any23.vocab.XHTML"
    classAftr: "org.apache.any23.vocab.XHTML"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XHTML"
  classesB4: "org.apache.any23.vocab.XHTML"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "meta"
    nameaftr: "meta"
    classb4: "org.apache.any23.vocab.XHTML"
    classAftr: "org.apache.any23.vocab.XHTML"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XHTML"
  classesB4: "org.apache.any23.vocab.XHTML"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "alternate"
    nameaftr: "alternate"
    classb4: "org.apache.any23.vocab.XHTML"
    classAftr: "org.apache.any23.vocab.XHTML"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XHTML"
  classesB4: "org.apache.any23.vocab.XHTML"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "stylesheet"
    nameaftr: "stylesheet"
    classb4: "org.apache.any23.vocab.XHTML"
    classAftr: "org.apache.any23.vocab.XHTML"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.XHTML"
  classesB4: "org.apache.any23.vocab.XHTML"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.WriterFactory"
  classesB4: "org.apache.any23.writer.WriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23"
  classesB4: "org.apache.any23.Any23"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23"
  classesB4: "org.apache.any23.Any23"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23"
  classesB4: "org.apache.any23.Any23"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23"
  classesB4: "org.apache.any23.Any23"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23"
  classesB4: "org.apache.any23.Any23"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23"
  classesB4: "org.apache.any23.Any23"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.MicrodataParser"
  classesB4: "org.apache.any23.cli.MicrodataParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.MicrodataParser.MicrodataParserDocumentSourceConverter"
  classesB4: "org.apache.any23.cli.MicrodataParser.MicrodataParserDocumentSourceConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.MimeDetector"
  classesB4: "org.apache.any23.cli.MimeDetector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.MimeDetector.MimeDetectorDocumentSourceConverter"
  classesB4: "org.apache.any23.cli.MimeDetector.MimeDetectorDocumentSourceConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.PluginVerifier"
  classesB4: "org.apache.any23.cli.PluginVerifier"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Rover"
  classesB4: "org.apache.any23.cli.Rover"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Rover"
  classesB4: "org.apache.any23.cli.Rover"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Rover"
  classesB4: "org.apache.any23.cli.Rover"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Rover.PrintStreamConverter"
  classesB4: "org.apache.any23.cli.Rover.PrintStreamConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.VocabPrinter"
  classesB4: "org.apache.any23.cli.VocabPrinter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.VocabPrinter.RDFFormatConverter"
  classesB4: "org.apache.any23.cli.VocabPrinter.RDFFormatConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExampleInputOutput"
  classesB4: "org.apache.any23.extractor.ExampleInputOutput"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExampleInputOutput"
  classesB4: "org.apache.any23.extractor.ExampleInputOutput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  classesB4: "org.apache.any23.extractor.ExtractionResultImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.ExtractionResultImpl"
    classAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  classesB4: "org.apache.any23.extractor.ExtractionResultImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.extractor.ExtractionResultImpl"
    classAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  classesB4: "org.apache.any23.extractor.ExtractionResultImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.ExtractionResultImpl"
    classAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  classesB4: "org.apache.any23.extractor.ExtractionResultImpl"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "row"
    nameaftr: "row"
    classb4: "org.apache.any23.extractor.ExtractionResultImpl"
    classAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  classesB4: "org.apache.any23.extractor.ExtractionResultImpl"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "col"
    nameaftr: "col"
    classb4: "org.apache.any23.extractor.ExtractionResultImpl"
    classAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImpl"
  classesB4: "org.apache.any23.extractor.ExtractionResultImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractorRegistryImpl"
  classesB4: "org.apache.any23.extractor.ExtractorRegistryImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtraction"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtraction"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtraction"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtraction"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtraction"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtraction"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.SingleDocumentExtraction"
    classAftr: "org.apache.any23.extractor.SingleDocumentExtraction"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtraction"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtraction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtraction.SingleExtractionReport"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtraction.SingleExtractionReport"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.TagSoupExtractionResult"
  classesB4: "org.apache.any23.extractor.TagSoupExtractionResult"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.TagSoupExtractionResult.ResourceRoot"
  classesB4: "org.apache.any23.extractor.TagSoupExtractionResult.ResourceRoot"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.TagSoupExtractionResult.PropertyPath"
  classesB4: "org.apache.any23.extractor.TagSoupExtractionResult.PropertyPath"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "processHeader"
    nameaftr: "processHeader"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "normalize"
    nameaftr: "normalize"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rowSubject"
    nameaftr: "rowSubject"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "rowSubject"
    nameaftr: "rowSubject"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "datatype"
    nameaftr: "datatype"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "headerURIs"
    nameaftr: "headerIRIs"
    classb4: "org.apache.any23.extractor.csv.CSVExtractor"
    classAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractor"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AdrExtractor"
  classesB4: "org.apache.any23.extractor.html.AdrExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "profile"
    nameaftr: "profile"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "prefixes"
    nameaftr: "prefixes"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extractProfile"
    nameaftr: "extractProfile"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getPrefixIfExists"
    nameaftr: "getPrefixIfExists"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "nameAsURI"
    nameaftr: "nameAsIRI"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getName"
    nameaftr: "getName"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
    classAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractor.JSONLDScript"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EntityBasedMicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.EntityBasedMicroformatExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.GeoExtractor"
  classesB4: "org.apache.any23.extractor.html.GeoExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractor"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "cal"
    nameaftr: "cal"
    classb4: "org.apache.any23.extractor.html.HCalendarExtractor"
    classAftr: "org.apache.any23.extractor.html.HCalendarExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractor"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.HCardExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.HCardExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.HCardExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "tel"
    nameaftr: "tel"
    classb4: "org.apache.any23.extractor.html.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.HCardExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "composed"
    nameaftr: "composed"
    classb4: "org.apache.any23.extractor.html.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.HCardExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "simple"
    nameaftr: "simple"
    classb4: "org.apache.any23.extractor.html.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.HCardExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.HCardExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HListingExtractor"
  classesB4: "org.apache.any23.extractor.html.HListingExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.HListingExtractor"
    classAftr: "org.apache.any23.extractor.html.HListingExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HListingExtractor"
  classesB4: "org.apache.any23.extractor.html.HListingExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HRecipeExtractor"
  classesB4: "org.apache.any23.extractor.html.HRecipeExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.HRecipeExtractor"
    classAftr: "org.apache.any23.extractor.html.HRecipeExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HRecipeExtractor"
  classesB4: "org.apache.any23.extractor.html.HRecipeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HResumeExtractor"
  classesB4: "org.apache.any23.extractor.html.HResumeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HReviewAggregateExtractor"
  classesB4: "org.apache.any23.extractor.html.HReviewAggregateExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HReviewExtractor"
  classesB4: "org.apache.any23.extractor.html.HReviewExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLDocument"
  classesB4: "org.apache.any23.extractor.html.HTMLDocument"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLDocument"
  classesB4: "org.apache.any23.extractor.html.HTMLDocument"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLDocument"
  classesB4: "org.apache.any23.extractor.html.HTMLDocument"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLDocument.TextField"
  classesB4: "org.apache.any23.extractor.html.HTMLDocument.TextField"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "profile"
    nameaftr: "profile"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "prefixes"
    nameaftr: "prefixes"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "extractProfile"
    nameaftr: "extractProfile"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getPrefixIfExists"
    nameaftr: "getPrefixIfExists"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpEquivAsURI"
    nameaftr: "httpEquivAsIRI"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "nameAsURI"
    nameaftr: "nameAsIRI"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpEquiv"
    nameaftr: "httpEquiv"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpEquiv"
    nameaftr: "getHttpEquiv"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getName"
    nameaftr: "getName"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpEquiv"
    nameaftr: "httpEquiv"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpEquiv"
    nameaftr: "httpEquiv"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpEquiv"
    nameaftr: "httpEquiv"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "name"
    nameaftr: "name"
    classb4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
    classAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractor.Meta"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HeadLinkExtractor"
  classesB4: "org.apache.any23.extractor.html.HeadLinkExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "href"
    nameaftr: "href"
    classb4: "org.apache.any23.extractor.html.HeadLinkExtractor"
    classAftr: "org.apache.any23.extractor.html.HeadLinkExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HeadLinkExtractor"
  classesB4: "org.apache.any23.extractor.html.HeadLinkExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.ICBMExtractor"
  classesB4: "org.apache.any23.extractor.html.ICBMExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "expand"
    nameaftr: "expand"
    classb4: "org.apache.any23.extractor.html.ICBMExtractor"
    classAftr: "org.apache.any23.extractor.html.ICBMExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.ICBMExtractor"
  classesB4: "org.apache.any23.extractor.html.ICBMExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.LicenseExtractor"
  classesB4: "org.apache.any23.extractor.html.LicenseExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.LicenseExtractor"
    classAftr: "org.apache.any23.extractor.html.LicenseExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.LicenseExtractor"
  classesB4: "org.apache.any23.extractor.html.LicenseExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.LicenseExtractor"
  classesB4: "org.apache.any23.extractor.html.LicenseExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "fixLink"
    nameaftr: "fixLink"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "fixLink"
    nameaftr: "fixLink"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "object"
    nameaftr: "object"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.MicroformatExtractor"
    classAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.MicroformatExtractor"
  classesB4: "org.apache.any23.extractor.html.MicroformatExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.SpeciesExtractor"
  classesB4: "org.apache.any23.extractor.html.SpeciesExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "resolvePropertyName"
    nameaftr: "resolvePropertyName"
    classb4: "org.apache.any23.extractor.html.SpeciesExtractor"
    classAftr: "org.apache.any23.extractor.html.SpeciesExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.SpeciesExtractor"
  classesB4: "org.apache.any23.extractor.html.SpeciesExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "resolveClassName"
    nameaftr: "resolveClassName"
    classb4: "org.apache.any23.extractor.html.SpeciesExtractor"
    classAftr: "org.apache.any23.extractor.html.SpeciesExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.SpeciesExtractor"
  classesB4: "org.apache.any23.extractor.html.SpeciesExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParser"
  classesB4: "org.apache.any23.extractor.html.TagSoupParser"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParser"
  classesB4: "org.apache.any23.extractor.html.TagSoupParser"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParser"
  classesB4: "org.apache.any23.extractor.html.TagSoupParser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParser"
  classesB4: "org.apache.any23.extractor.html.TagSoupParser"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParser"
  classesB4: "org.apache.any23.extractor.html.TagSoupParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParser.ElementLocation"
  classesB4: "org.apache.any23.extractor.html.TagSoupParser.ElementLocation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TitleExtractor"
  classesB4: "org.apache.any23.extractor.html.TitleExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
    classAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
    classAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
    classAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri1"
    nameaftr: "uri1"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri2"
    nameaftr: "uri2"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "link"
    nameaftr: "link"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "peopleProp"
    nameaftr: "peopleProp"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "hyperlinkProp"
    nameaftr: "hyperlinkProp"
    classb4: "org.apache.any23.extractor.html.XFNExtractor"
    classAftr: "org.apache.any23.extractor.html.XFNExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractor"
  classesB4: "org.apache.any23.extractor.html.XFNExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HAdrExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HAdrExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HCardExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.microformats2.HCardExtractor"
    classAftr: "org.apache.any23.extractor.html.microformats2.HCardExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HCardExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HCardExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HEntryExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HEntryExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.microformats2.HEntryExtractor"
    classAftr: "org.apache.any23.extractor.html.microformats2.HEntryExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HEntryExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HEntryExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HEventExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HEventExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.microformats2.HEventExtractor"
    classAftr: "org.apache.any23.extractor.html.microformats2.HEventExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HEventExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HEventExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HGeoExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HGeoExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HItemExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HItemExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.microformats2.HItemExtractor"
    classAftr: "org.apache.any23.extractor.html.microformats2.HItemExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HItemExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HItemExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HProductExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HProductExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.microformats2.HProductExtractor"
    classAftr: "org.apache.any23.extractor.html.microformats2.HProductExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HProductExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HProductExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HRecipeExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HRecipeExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.extractor.html.microformats2.HRecipeExtractor"
    classAftr: "org.apache.any23.extractor.html.microformats2.HRecipeExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HRecipeExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HRecipeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HResumeExtractor"
  classesB4: "org.apache.any23.extractor.html.microformats2.HResumeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.ItemPropValue"
  classesB4: "org.apache.any23.extractor.microdata.ItemPropValue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "MICRODATA_ITEM"
    nameaftr: "MICRODATA_ITEM"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
    classAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.BaseRDFExtractor"
  classesB4: "org.apache.any23.extractor.rdf.BaseRDFExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.JSONLDExtractor"
  classesB4: "org.apache.any23.extractor.rdf.JSONLDExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.NQuadsExtractor"
  classesB4: "org.apache.any23.extractor.rdf.NQuadsExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.NTriplesExtractor"
  classesB4: "org.apache.any23.extractor.rdf.NTriplesExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFHandlerAdapter"
  classesB4: "org.apache.any23.extractor.rdf.RDFHandlerAdapter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lineNo"
    nameaftr: "lineNo"
    classb4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
    classAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "colNo"
    nameaftr: "colNo"
    classb4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
    classAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lineNo"
    nameaftr: "lineNo"
    classb4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
    classAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "colNo"
    nameaftr: "colNo"
    classb4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
    classAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lineNo"
    nameaftr: "lineNo"
    classb4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
    classAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "colNo"
    nameaftr: "colNo"
    classb4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
    classAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.InternalParseErrorListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.ExtendedTurtleParser"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.ExtendedTurtleParser"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.ExtendedTurtleParser"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.ExtendedTurtleParser"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFParserFactory.ExtendedTurtleParser"
  classesB4: "org.apache.any23.extractor.rdf.RDFParserFactory.ExtendedTurtleParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.RDFXMLExtractor"
  classesB4: "org.apache.any23.extractor.rdf.RDFXMLExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.TriXExtractor"
  classesB4: "org.apache.any23.extractor.rdf.TriXExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.TurtleExtractor"
  classesB4: "org.apache.any23.extractor.rdf.TurtleExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Extractor"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Extractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getMapping"
    nameaftr: "getMapping"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getVocabulary"
    nameaftr: "getVocabulary"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getTypes"
    nameaftr: "getTypes"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getRels"
    nameaftr: "getRels"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getRevs"
    nameaftr: "getRevs"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getPredicate"
    nameaftr: "getPredicate"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "resolveCurieOrURIList"
    nameaftr: "resolveCIRIeOrIRIList"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "resolveURI"
    nameaftr: "resolveIRI"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "vocab"
    nameaftr: "vocab"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "types"
    nameaftr: "types"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "rels"
    nameaftr: "rels"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "revs"
    nameaftr: "revs"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predicates"
    nameaftr: "predicates"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "uri"
    nameaftr: "IRI"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "mapping"
    nameaftr: "mapping"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "result"
    nameaftr: "result"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "currentVocabulary"
    nameaftr: "currentVocabulary"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "curieMapping"
    nameaftr: "curieMapping"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Stack"
          }
        }
        params {
          simpleType {
            name: "URIMapping"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Stack"
          }
        }
        params {
          simpleType {
            name: "IRIMapping"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uriMappingStack"
    nameaftr: "IRIMappingStack"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.EvaluationContext"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.EvaluationContext"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri"
    nameaftr: "IRI"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uri"
    nameaftr: "IRI"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.PrefixMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.IncompleteTriple"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "prefix"
    nameaftr: "prefix"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "prefix"
    nameaftr: "prefix"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.Vocabulary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFaExtractor"
  classesB4: "org.apache.any23.extractor.rdfa.RDFaExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.XSLTStylesheet"
  classesB4: "org.apache.any23.extractor.rdfa.XSLTStylesheet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.QuadTemplate"
  classesB4: "org.apache.any23.extractor.xpath.QuadTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.xpath.QuadTemplate"
    classAftr: "org.apache.any23.extractor.xpath.QuadTemplate"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.QuadTemplate"
  classesB4: "org.apache.any23.extractor.xpath.QuadTemplate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.extractor.xpath.QuadTemplate"
    classAftr: "org.apache.any23.extractor.xpath.QuadTemplate"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.QuadTemplate"
  classesB4: "org.apache.any23.extractor.xpath.QuadTemplate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateGraph"
  classesB4: "org.apache.any23.extractor.xpath.TemplateGraph"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getValueInternal"
    nameaftr: "getValueInternal"
    classb4: "org.apache.any23.extractor.xpath.TemplateGraph"
    classAftr: "org.apache.any23.extractor.xpath.TemplateGraph"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateGraph"
  classesB4: "org.apache.any23.extractor.xpath.TemplateGraph"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateObject"
  classesB4: "org.apache.any23.extractor.xpath.TemplateObject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplatePredicate"
  classesB4: "org.apache.any23.extractor.xpath.TemplatePredicate"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getValueInternal"
    nameaftr: "getValueInternal"
    classb4: "org.apache.any23.extractor.xpath.TemplatePredicate"
    classAftr: "org.apache.any23.extractor.xpath.TemplatePredicate"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplatePredicate"
  classesB4: "org.apache.any23.extractor.xpath.TemplatePredicate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateSubject"
  classesB4: "org.apache.any23.extractor.xpath.TemplateSubject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  classesB4: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
    classAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  classesB4: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  classesB4: "org.apache.any23.extractor.xpath.TemplateXPathExtractionRuleImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.Term"
  classesB4: "org.apache.any23.extractor.xpath.Term"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  classesB4: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.XPathExtractor"
  classesB4: "org.apache.any23.extractor.xpath.XPathExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipeException"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipeException"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "predicates"
    nameaftr: "predicates"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "graphs"
    nameaftr: "graphs"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
    classAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  classesB4: "org.apache.any23.filter.ExtractionContextBlocker.ValvedTriplePipe"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
    classAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
    classAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
    classAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
    classAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFa"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
    classAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
    classAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
    classAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
    classAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  classesB4: "org.apache.any23.filter.IgnoreTitlesOfEmptyDocuments"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.http.DefaultHTTPClient"
  classesB4: "org.apache.any23.http.DefaultHTTPClient"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.http.DefaultHTTPClient"
  classesB4: "org.apache.any23.http.DefaultHTTPClient"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.http.DefaultHTTPClient"
  classesB4: "org.apache.any23.http.DefaultHTTPClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.http.HTTPClient"
  classesB4: "org.apache.any23.http.HTTPClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "fixLink"
    nameaftr: "fixLink"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "value"
    nameaftr: "value"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pre"
    nameaftr: "pre"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "pre"
    nameaftr: "pre"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createURI"
    nameaftr: "createIRI"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "resolveURI"
    nameaftr: "resolveIRI"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "fixURI"
    nameaftr: "fixIRI"
    classb4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
    classAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  classesB4: "org.apache.any23.rdf.Any23ValueFactoryWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.PopularPrefixes"
  classesB4: "org.apache.any23.rdf.PopularPrefixes"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.PopularPrefixes"
  classesB4: "org.apache.any23.rdf.PopularPrefixes"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.rdf.RDFUtils"
    classAftr: "org.apache.any23.rdf.RDFUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.rdf.RDFUtils"
    classAftr: "org.apache.any23.rdf.RDFUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "RDFFormat"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Optional"
          }
        }
        params {
          simpleType {
            name: "RDFFormat"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getFormatByExtension"
    nameaftr: "getFormatByExtension"
    classb4: "org.apache.any23.rdf.RDFUtils"
    classAftr: "org.apache.any23.rdf.RDFUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.rdf.RDFUtils"
    classAftr: "org.apache.any23.rdf.RDFUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.rdf.RDFUtils"
    classAftr: "org.apache.any23.rdf.RDFUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.rdf.RDFUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.source.ByteArrayDocumentSource"
  classesB4: "org.apache.any23.source.ByteArrayDocumentSource"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.source.ByteArrayDocumentSource"
  classesB4: "org.apache.any23.source.ByteArrayDocumentSource"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.source.ByteArrayDocumentSource"
  classesB4: "org.apache.any23.source.ByteArrayDocumentSource"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.source.ByteArrayDocumentSource"
  classesB4: "org.apache.any23.source.ByteArrayDocumentSource"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.source.ByteArrayDocumentSource"
  classesB4: "org.apache.any23.source.ByteArrayDocumentSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.source.FileDocumentSource"
  classesB4: "org.apache.any23.source.FileDocumentSource"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.source.FileDocumentSource"
  classesB4: "org.apache.any23.source.FileDocumentSource"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.source.FileDocumentSource"
  classesB4: "org.apache.any23.source.FileDocumentSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.source.HTTPDocumentSource"
  classesB4: "org.apache.any23.source.HTTPDocumentSource"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.source.HTTPDocumentSource"
  classesB4: "org.apache.any23.source.HTTPDocumentSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.source.MemCopyFactory"
  classesB4: "org.apache.any23.source.MemCopyFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.source.StringDocumentSource"
  classesB4: "org.apache.any23.source.StringDocumentSource"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.source.StringDocumentSource"
  classesB4: "org.apache.any23.source.StringDocumentSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DOMDocument"
  classesB4: "org.apache.any23.validator.DOMDocument"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultDOMDocument"
  classesB4: "org.apache.any23.validator.DefaultDOMDocument"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultDOMDocument"
  classesB4: "org.apache.any23.validator.DefaultDOMDocument"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultDOMDocument"
  classesB4: "org.apache.any23.validator.DefaultDOMDocument"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultDOMDocument"
  classesB4: "org.apache.any23.validator.DefaultDOMDocument"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidator"
  classesB4: "org.apache.any23.validator.DefaultValidator"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidator"
  classesB4: "org.apache.any23.validator.DefaultValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.Validator"
  classesB4: "org.apache.any23.validator.Validator"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.Validator"
  classesB4: "org.apache.any23.validator.Validator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.rule.AboutNotURIRule"
  classesB4: "org.apache.any23.validator.rule.AboutNotURIRule"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.rule.AboutNotURIRule"
  classesB4: "org.apache.any23.validator.rule.AboutNotURIRule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  classesB4: "org.apache.any23.vocab.RDFSchemaUtils"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "namespace"
    nameaftr: "namespace"
    classb4: "org.apache.any23.vocab.RDFSchemaUtils"
    classAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  classesB4: "org.apache.any23.vocab.RDFSchemaUtils"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "classes"
    nameaftr: "classes"
    classb4: "org.apache.any23.vocab.RDFSchemaUtils"
    classAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  classesB4: "org.apache.any23.vocab.RDFSchemaUtils"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "properties"
    nameaftr: "properties"
    classb4: "org.apache.any23.vocab.RDFSchemaUtils"
    classAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  classesB4: "org.apache.any23.vocab.RDFSchemaUtils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "comments"
    nameaftr: "comments"
    classb4: "org.apache.any23.vocab.RDFSchemaUtils"
    classAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.RDFSchemaUtils"
  classesB4: "org.apache.any23.vocab.RDFSchemaUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.BenchmarkTripleHandler"
    classAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.BenchmarkTripleHandler"
    classAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.BenchmarkTripleHandler"
    classAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.BenchmarkTripleHandler"
    classAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.BenchmarkTripleHandler.StatObject"
  classesB4: "org.apache.any23.writer.BenchmarkTripleHandler.StatObject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.CompositeTripleHandler"
    classAftr: "org.apache.any23.writer.CompositeTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.CompositeTripleHandler"
    classAftr: "org.apache.any23.writer.CompositeTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.CompositeTripleHandler"
    classAftr: "org.apache.any23.writer.CompositeTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.CompositeTripleHandler"
    classAftr: "org.apache.any23.writer.CompositeTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CompositeTripleHandler"
  classesB4: "org.apache.any23.writer.CompositeTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CountingTripleHandler"
  classesB4: "org.apache.any23.writer.CountingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.CountingTripleHandler"
    classAftr: "org.apache.any23.writer.CountingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CountingTripleHandler"
  classesB4: "org.apache.any23.writer.CountingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.CountingTripleHandler"
    classAftr: "org.apache.any23.writer.CountingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.CountingTripleHandler"
  classesB4: "org.apache.any23.writer.CountingTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.JSONWriter"
    classAftr: "org.apache.any23.writer.JSONWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.JSONWriter"
    classAftr: "org.apache.any23.writer.JSONWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.JSONWriter"
    classAftr: "org.apache.any23.writer.JSONWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.JSONWriter"
    classAftr: "org.apache.any23.writer.JSONWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Optional"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "language"
    nameaftr: "language"
    classb4: "org.apache.any23.writer.JSONWriter"
    classAftr: "org.apache.any23.writer.JSONWriter"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "datatype"
    nameaftr: "datatype"
    classb4: "org.apache.any23.writer.JSONWriter"
    classAftr: "org.apache.any23.writer.JSONWriter"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriter"
  classesB4: "org.apache.any23.writer.JSONWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriterFactory"
  classesB4: "org.apache.any23.writer.JSONWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.LoggingTripleHandler"
    classAftr: "org.apache.any23.writer.LoggingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.LoggingTripleHandler"
    classAftr: "org.apache.any23.writer.LoggingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.LoggingTripleHandler"
    classAftr: "org.apache.any23.writer.LoggingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.LoggingTripleHandler"
    classAftr: "org.apache.any23.writer.LoggingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.LoggingTripleHandler"
  classesB4: "org.apache.any23.writer.LoggingTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.NQuadsWriter"
  classesB4: "org.apache.any23.writer.NQuadsWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.NQuadsWriterFactory"
  classesB4: "org.apache.any23.writer.NQuadsWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.NTriplesWriter"
  classesB4: "org.apache.any23.writer.NTriplesWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.NTriplesWriterFactory"
  classesB4: "org.apache.any23.writer.NTriplesWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  classesB4: "org.apache.any23.writer.RDFWriterTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  classesB4: "org.apache.any23.writer.RDFWriterTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.RDFWriterTripleHandler"
    classAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  classesB4: "org.apache.any23.writer.RDFWriterTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.RDFWriterTripleHandler"
    classAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  classesB4: "org.apache.any23.writer.RDFWriterTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.RDFWriterTripleHandler"
    classAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  classesB4: "org.apache.any23.writer.RDFWriterTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "graph"
    nameaftr: "graph"
    classb4: "org.apache.any23.writer.RDFWriterTripleHandler"
    classAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFWriterTripleHandler"
  classesB4: "org.apache.any23.writer.RDFWriterTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFXMLWriter"
  classesB4: "org.apache.any23.writer.RDFXMLWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RDFXMLWriterFactory"
  classesB4: "org.apache.any23.writer.RDFXMLWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.ReportingTripleHandler"
    classAftr: "org.apache.any23.writer.ReportingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.ReportingTripleHandler"
    classAftr: "org.apache.any23.writer.ReportingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.ReportingTripleHandler"
    classAftr: "org.apache.any23.writer.ReportingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.ReportingTripleHandler"
    classAftr: "org.apache.any23.writer.ReportingTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.ReportingTripleHandler"
  classesB4: "org.apache.any23.writer.ReportingTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RepositoryWriter"
  classesB4: "org.apache.any23.writer.RepositoryWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.RepositoryWriter"
    classAftr: "org.apache.any23.writer.RepositoryWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RepositoryWriter"
  classesB4: "org.apache.any23.writer.RepositoryWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.RepositoryWriter"
    classAftr: "org.apache.any23.writer.RepositoryWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.RepositoryWriter"
  classesB4: "org.apache.any23.writer.RepositoryWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TriXWriter"
  classesB4: "org.apache.any23.writer.TriXWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TriXWriterFactory"
  classesB4: "org.apache.any23.writer.TriXWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TurtleWriter"
  classesB4: "org.apache.any23.writer.TurtleWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TurtleWriterFactory"
  classesB4: "org.apache.any23.writer.TurtleWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.URIListWriter"
  classesB4: "org.apache.any23.writer.URIListWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.URIListWriter"
    classAftr: "org.apache.any23.writer.URIListWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.URIListWriter"
  classesB4: "org.apache.any23.writer.URIListWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.URIListWriter"
    classAftr: "org.apache.any23.writer.URIListWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.URIListWriter"
  classesB4: "org.apache.any23.writer.URIListWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.URIListWriterFactory"
  classesB4: "org.apache.any23.writer.URIListWriterFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.Any23Test"
  classesB4: "org.apache.any23.Any23Test"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.Any23Test"
  classesB4: "org.apache.any23.Any23Test"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.SesameTest"
  classesB4: "org.apache.any23.SesameTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.SesameTest"
  classesB4: "org.apache.any23.SesameTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.RoverTest"
  classesB4: "org.apache.any23.cli.RoverTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionAPITest"
  classesB4: "org.apache.any23.extractor.ExtractionAPITest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.ExtractionAPITest"
    classAftr: "org.apache.any23.extractor.ExtractionAPITest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionAPITest"
  classesB4: "org.apache.any23.extractor.ExtractionAPITest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImplTest"
  classesB4: "org.apache.any23.extractor.ExtractionResultImplTest"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImplTest"
  classesB4: "org.apache.any23.extractor.ExtractionResultImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "TEST_URI"
    nameaftr: "TEST_IRI"
    classb4: "org.apache.any23.extractor.ExtractionResultImplTest"
    classAftr: "org.apache.any23.extractor.ExtractionResultImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResultImplTest"
  classesB4: "org.apache.any23.extractor.ExtractionResultImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.MockTripleHandler"
    classAftr: "org.apache.any23.extractor.MockTripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.MockTripleHandler"
  classesB4: "org.apache.any23.extractor.MockTripleHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
    classAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
    classAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
    classAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
    classAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "prop"
    nameaftr: "prop"
    classb4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
    classAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  classesB4: "org.apache.any23.extractor.SingleDocumentExtractionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.csv.CSVExtractorTest"
  classesB4: "org.apache.any23.extractor.csv.CSVExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.example.ExampleExtractor"
  classesB4: "org.apache.any23.extractor.example.ExampleExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.example.ExampleExtractor"
  classesB4: "org.apache.any23.extractor.example.ExampleExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.extractor.example.ExampleExtractor"
    classAftr: "org.apache.any23.extractor.example.ExampleExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.example.ExampleExtractor"
  classesB4: "org.apache.any23.extractor.example.ExampleExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "baseURI"
    nameaftr: "baseIRI"
    classb4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
    classAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  classesB4: "org.apache.any23.extractor.html.AbstractExtractorTestCase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.AdrExtractorTest"
  classesB4: "org.apache.any23.extractor.html.AdrExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractorTest"
  classesB4: "org.apache.any23.extractor.html.EmbeddedJSONLDExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "vcal"
    nameaftr: "vcal"
    classb4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
    classAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "vevent"
    nameaftr: "vevent"
    classb4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
    classAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "vjournal"
    nameaftr: "vjournal"
    classb4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
    classAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "vtodo"
    nameaftr: "vtodo"
    classb4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
    classAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HCalendarExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HCardExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HCardExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HListingExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HListingExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HRecipeExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HRecipeExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HResumeExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HResumeExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HReviewExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HReviewExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLFixture"
  classesB4: "org.apache.any23.extractor.html.HTMLFixture"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLFixture"
  classesB4: "org.apache.any23.extractor.html.HTMLFixture"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HTMLMetaExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HTMLMetaExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "externalLinkURI"
    nameaftr: "externalLinkIRI"
    classb4: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
    classAftr: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  classesB4: "org.apache.any23.extractor.html.HeadLinkExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.LicenseExtractorTest"
  classesB4: "org.apache.any23.extractor.html.LicenseExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ccBy"
    nameaftr: "ccBy"
    classb4: "org.apache.any23.extractor.html.LicenseExtractorTest"
    classAftr: "org.apache.any23.extractor.html.LicenseExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.LicenseExtractorTest"
  classesB4: "org.apache.any23.extractor.html.LicenseExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "apache"
    nameaftr: "apache"
    classb4: "org.apache.any23.extractor.html.LicenseExtractorTest"
    classAftr: "org.apache.any23.extractor.html.LicenseExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.LicenseExtractorTest"
  classesB4: "org.apache.any23.extractor.html.LicenseExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.RDFMergerTest"
  classesB4: "org.apache.any23.extractor.html.RDFMergerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.SpeciesExtractorTest"
  classesB4: "org.apache.any23.extractor.html.SpeciesExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TagSoupParserTest"
  classesB4: "org.apache.any23.extractor.html.TagSoupParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TitleExtractorTest"
  classesB4: "org.apache.any23.extractor.html.TitleExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.TurtleHTMLExtractorTest"
  classesB4: "org.apache.any23.extractor.html.TurtleHTMLExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  classesB4: "org.apache.any23.extractor.html.XFNExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bobsHomepage"
    nameaftr: "bobsHomepage"
    classb4: "org.apache.any23.extractor.html.XFNExtractorTest"
    classAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  classesB4: "org.apache.any23.extractor.html.XFNExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "alicesHomepage"
    nameaftr: "alicesHomepage"
    classb4: "org.apache.any23.extractor.html.XFNExtractorTest"
    classAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  classesB4: "org.apache.any23.extractor.html.XFNExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "charliesHomepage"
    nameaftr: "charliesHomepage"
    classb4: "org.apache.any23.extractor.html.XFNExtractorTest"
    classAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  classesB4: "org.apache.any23.extractor.html.XFNExtractorTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.XFNExtractorTest"
  classesB4: "org.apache.any23.extractor.html.XFNExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HAdrExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HAdrExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HCardExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HCardExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HEntryExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HEntryExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HEventExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HEventExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HGeoExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HGeoExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HItemExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HItemExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HProductExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HProductExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HRecipeExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HRecipeExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.html.microformats2.HResumeExtractorTest"
  classesB4: "org.apache.any23.extractor.html.microformats2.HResumeExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractorTest"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataExtractorTest.TestRDFHandler"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataExtractorTest.TestRDFHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.microdata.MicrodataParserTest"
  classesB4: "org.apache.any23.extractor.microdata.MicrodataParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  classesB4: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
    classAftr: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  classesB4: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
    classAftr: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  classesB4: "org.apache.any23.extractor.rdf.JSONLDExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.TurtleExtractorTest"
  classesB4: "org.apache.any23.extractor.rdf.TurtleExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.rdf.TurtleExtractorTest"
    classAftr: "org.apache.any23.extractor.rdf.TurtleExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdf.TurtleExtractorTest"
  classesB4: "org.apache.any23.extractor.rdf.TurtleExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.AbstractRDFaExtractorTestCase"
  classesB4: "org.apache.any23.extractor.rdfa.AbstractRDFaExtractorTestCase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.ExtractionExceptionTest"
  classesB4: "org.apache.any23.extractor.rdfa.ExtractionExceptionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11ExtractorTest"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11ExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11ParserTest"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11ParserTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11ParserTest"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11ParserTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFaExtractorTest"
  classesB4: "org.apache.any23.extractor.rdfa.RDFaExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractorRuleImplTest"
  classesB4: "org.apache.any23.extractor.xpath.TemplateXPathExtractorRuleImplTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractorRuleImplTest"
  classesB4: "org.apache.any23.extractor.xpath.TemplateXPathExtractorRuleImplTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.TemplateXPathExtractorRuleImplTest"
  classesB4: "org.apache.any23.extractor.xpath.TemplateXPathExtractorRuleImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  classesB4: "org.apache.any23.filter.ExtractionContextBlockerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "s"
    nameaftr: "s"
    classb4: "org.apache.any23.filter.ExtractionContextBlockerTest"
    classAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  classesB4: "org.apache.any23.filter.ExtractionContextBlockerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.filter.ExtractionContextBlockerTest"
    classAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  classesB4: "org.apache.any23.filter.ExtractionContextBlockerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "o"
    nameaftr: "o"
    classb4: "org.apache.any23.filter.ExtractionContextBlockerTest"
    classAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  classesB4: "org.apache.any23.filter.ExtractionContextBlockerTest"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  classesB4: "org.apache.any23.filter.ExtractionContextBlockerTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "docURI"
    nameaftr: "docIRI"
    classb4: "org.apache.any23.filter.ExtractionContextBlockerTest"
    classAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.ExtractionContextBlockerTest"
  classesB4: "org.apache.any23.filter.ExtractionContextBlockerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFaTest"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFaTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.filter.IgnoreAccidentalRDFaTest"
  classesB4: "org.apache.any23.filter.IgnoreAccidentalRDFaTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.Any23PluginManagerTest"
  classesB4: "org.apache.any23.plugin.Any23PluginManagerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.PrefixesTest"
  classesB4: "org.apache.any23.rdf.PrefixesTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.PrefixesTest"
  classesB4: "org.apache.any23.rdf.PrefixesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtilsTest"
  classesB4: "org.apache.any23.rdf.RDFUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.util.DiscoveryUtilsTest"
  classesB4: "org.apache.any23.util.DiscoveryUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidatorTest"
  classesB4: "org.apache.any23.validator.DefaultValidatorTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidatorTest"
  classesB4: "org.apache.any23.validator.DefaultValidatorTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidatorTest"
  classesB4: "org.apache.any23.validator.DefaultValidatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidatorTest.FakeRule"
  classesB4: "org.apache.any23.validator.DefaultValidatorTest.FakeRule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DefaultValidatorTest.FakeFix"
  classesB4: "org.apache.any23.validator.DefaultValidatorTest.FakeFix"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.RDFSchemaUtilsTest"
  classesB4: "org.apache.any23.vocab.RDFSchemaUtilsTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest"
  classesB4: "org.apache.any23.vocab.VocabularyTest"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "props"
    nameaftr: "props"
    classb4: "org.apache.any23.vocab.VocabularyTest"
    classAftr: "org.apache.any23.vocab.VocabularyTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest"
  classesB4: "org.apache.any23.vocab.VocabularyTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "propsList"
    nameaftr: "propsList"
    classb4: "org.apache.any23.vocab.VocabularyTest"
    classAftr: "org.apache.any23.vocab.VocabularyTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest"
  classesB4: "org.apache.any23.vocab.VocabularyTest"
  typeChange {
    dtB4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
          }
        }
        dim: 1
      }
    }
    dtAftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
          }
        }
        dim: 1
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "classes"
    nameaftr: "classes"
    classb4: "org.apache.any23.vocab.VocabularyTest"
    classAftr: "org.apache.any23.vocab.VocabularyTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest"
  classesB4: "org.apache.any23.vocab.VocabularyTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "propsList"
    nameaftr: "propsList"
    classb4: "org.apache.any23.vocab.VocabularyTest"
    classAftr: "org.apache.any23.vocab.VocabularyTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest"
  classesB4: "org.apache.any23.vocab.VocabularyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "property1"
    nameaftr: "property1"
    classb4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
    classAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "property2"
    nameaftr: "property2"
    classb4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
    classAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "property3"
    nameaftr: "property3"
    classb4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
    classAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "class1"
    nameaftr: "class1"
    classb4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
    classAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "class2"
    nameaftr: "class2"
    classb4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
    classAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "class3"
    nameaftr: "class3"
    classb4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
    classAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  classesB4: "org.apache.any23.vocab.VocabularyTest.TargetVocabulary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriterTest"
  classesB4: "org.apache.any23.writer.JSONWriterTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.JSONWriterTest"
    classAftr: "org.apache.any23.writer.JSONWriterTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriterTest"
  classesB4: "org.apache.any23.writer.JSONWriterTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.JSONWriterTest"
  classesB4: "org.apache.any23.writer.JSONWriterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.WriterRegistryTest"
  classesB4: "org.apache.any23.writer.WriterRegistryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.mime.NaiveMIMETypeDetector"
  classesB4: "org.apache.any23.mime.NaiveMIMETypeDetector"
  typeChange {
    dtB4 {
      simpleType {
        name: "RDFFormat"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Optional"
          }
        }
        params {
          simpleType {
            name: "RDFFormat"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "parserFormatForFileName"
    nameaftr: "parserFormatForFileName"
    classb4: "org.apache.any23.mime.NaiveMIMETypeDetector"
    classAftr: "org.apache.any23.mime.NaiveMIMETypeDetector"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.mime.NaiveMIMETypeDetector"
  classesB4: "org.apache.any23.mime.NaiveMIMETypeDetector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.mime.TikaMIMETypeDetector"
  classesB4: "org.apache.any23.mime.TikaMIMETypeDetector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.mime.TikaMIMETypeDetectorTest"
  classesB4: "org.apache.any23.mime.TikaMIMETypeDetectorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Crawler"
  classesB4: "org.apache.any23.cli.Crawler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Crawler.PatterConverter"
  classesB4: "org.apache.any23.cli.Crawler.PatterConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.CrawlerTest"
  classesB4: "org.apache.any23.cli.CrawlerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PAGE_CONTENT_DE_PROPERTY"
    nameaftr: "PAGE_CONTENT_DE_PROPERTY"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PAGE_CONTENT_AE_PROPERTY"
    nameaftr: "PAGE_CONTENT_AE_PROPERTY"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PAGE_CONTENT_LCE_PROPERTY"
    nameaftr: "PAGE_CONTENT_LCE_PROPERTY"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "PAGE_CONTENT_CE_PROPERTY"
    nameaftr: "PAGE_CONTENT_CE_PROPERTY"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "property"
    nameaftr: "property"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractor.ExtractionRule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "pageURI"
    nameaftr: "pageIRI"
    classb4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
    classAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  classesB4: "org.apache.any23.plugin.htmlscraper.HTMLScraperExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "cellTypeToType"
    nameaftr: "cellTypeToType"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "document"
    nameaftr: "document"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sheetURI"
    nameaftr: "sheetIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rowURI"
    nameaftr: "rowIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rowURI"
    nameaftr: "rowIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "sheetURI"
    nameaftr: "sheetIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "rowURI"
    nameaftr: "rowIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "cellURI"
    nameaftr: "cellIRI"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "cellType"
    nameaftr: "cellType"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "containsSheet"
    nameaftr: "containsSheet"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "containsRow"
    nameaftr: "containsRow"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "containsCell"
    nameaftr: "containsCell"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sheetName"
    nameaftr: "sheetName"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "firstRow"
    nameaftr: "firstRow"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastRow"
    nameaftr: "lastRow"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "firstCell"
    nameaftr: "firstCell"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lastCell"
    nameaftr: "lastCell"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cellValue"
    nameaftr: "cellValue"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "sheet"
    nameaftr: "sheet"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "row"
    nameaftr: "row"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "cell"
    nameaftr: "cell"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createResource"
    nameaftr: "createResource"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createProperty"
    nameaftr: "createProperty"
    classb4: "org.apache.any23.vocab.Excel"
    classAftr: "org.apache.any23.vocab.Excel"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.vocab.Excel"
  classesB4: "org.apache.any23.vocab.Excel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "type"
    nameaftr: "type"
    classb4: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
    classAftr: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  classesB4: "org.apache.any23.plugin.officescraper.ExcelExtractorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.Servlet"
  classesB4: "org.apache.any23.servlet.Servlet"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.Servlet"
  classesB4: "org.apache.any23.servlet.Servlet"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.Servlet"
  classesB4: "org.apache.any23.servlet.Servlet"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.Servlet"
  classesB4: "org.apache.any23.servlet.Servlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest"
  classesB4: "org.apache.any23.servlet.ServletTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.servlet.ServletTest.TestableServlet"
  classesB4: "org.apache.any23.servlet.ServletTest.TestableServlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.cli.Rover.ArgumentToIRIConverter"
  classesB4: "org.apache.any23.cli.Rover.ArgumentToURIConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "URI"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          simpleType {
            name: "IRI"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "map"
    nameaftr: "map"
    classb4: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
    classAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
  classesB4: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionParameters"
  classesB4: "org.apache.any23.extractor.ExtractionParameters"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.io.nquads.NQuadsWriterTest"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.rdf.RDFUtils"
  classesB4: "org.apache.any23.io.nquads.NQuadsWriterTest"
  refactoringType: "MOVE_OPERATION"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResult"
  classesB4: "org.apache.any23.extractor.ExtractionResult"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.ExtractionResult"
    classAftr: "org.apache.any23.extractor.ExtractionResult"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResult"
  classesB4: "org.apache.any23.extractor.ExtractionResult"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.extractor.ExtractionResult"
    classAftr: "org.apache.any23.extractor.ExtractionResult"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.ExtractionResult"
  classesB4: "org.apache.any23.extractor.ExtractionResult"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.extractor.ExtractionResult"
    classAftr: "org.apache.any23.extractor.ExtractionResult"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport"
  classesB4: "org.apache.any23.extractor.IssueReport"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "row"
    nameaftr: "row"
    classb4: "org.apache.any23.extractor.IssueReport"
    classAftr: "org.apache.any23.extractor.IssueReport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.IssueReport"
  classesB4: "org.apache.any23.extractor.IssueReport"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "col"
    nameaftr: "col"
    classb4: "org.apache.any23.extractor.IssueReport"
    classAftr: "org.apache.any23.extractor.IssueReport"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.source.DocumentSource"
  classesB4: "org.apache.any23.source.DocumentSource"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.TripleHandler"
    classAftr: "org.apache.any23.writer.TripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "p"
    nameaftr: "p"
    classb4: "org.apache.any23.writer.TripleHandler"
    classAftr: "org.apache.any23.writer.TripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "g"
    nameaftr: "g"
    classb4: "org.apache.any23.writer.TripleHandler"
    classAftr: "org.apache.any23.writer.TripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.apache.any23.writer.TripleHandler"
  classesB4: "org.apache.any23.writer.TripleHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "documentURI"
    nameaftr: "documentIRI"
    classb4: "org.apache.any23.writer.TripleHandler"
    classAftr: "org.apache.any23.writer.TripleHandler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  classesB4: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  classesB4: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  typeChange {
    dtB4 {
      simpleType {
        name: "URI"
      }
    }
    dtAftr {
      simpleType {
        name: "IRI"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uri"
    nameaftr: "uri"
    classb4: "org.apache.any23.extractor.xpath.XPathExtractionRule"
    classAftr: "org.apache.any23.extractor.xpath.XPathExtractionRule"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.apache.any23.http.HTTPClient"
  classesB4: "org.apache.any23.http.HTTPClient"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.apache.any23.validator.DOMDocument"
  classesB4: "org.apache.any23.validator.DOMDocument"
  refactoringType: "RENAME_METHOD"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.openrdf.rio.RDFFormat"
      typeOfType: DontKnow
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Optional"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "org.eclipse.rdf4j.rio.RDFFormat"
          typeOfType: DontKnow
        }
      }
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "org.openrdf.rio.RDFFormat"
        typeOfType: DontKnow
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Optional"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "org.eclipse.rdf4j.rio.RDFFormat"
            typeOfType: DontKnow
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.openrdf.rio.RDFFormat"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Optional"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "org.eclipse.rdf4j.rio.RDFFormat"
              typeOfType: DontKnow
            }
          }
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.openrdf.rio.RDFFormat"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Stack"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Stack"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
                  to: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Stack"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Stack"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "org.apache.any23.extractor.rdfa.RDFa11Parser.IRIMapping"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.any23.extractor.rdfa.RDFa11Parser.URIMapping"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Optional"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    aug {
      reuses {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      added {
        simpleType {
          name: "java.util.Optional"
          typeOfType: Jdk
        }
      }
    }
    kind: Aug
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Optional"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Optional"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Optional"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "URI"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "IRI"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "URI"
                  to: "IRI"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "URI"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "IRI"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "URI"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "IRI"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "URI"
        typeOfType: TypeVariable
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "URI"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "IRI"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "URI"
                  to: "IRI"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "URI"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "IRI"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "URI"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "IRI"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "URI"
        typeOfType: TypeVariable
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    arryTyp {
      name {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
      dim: 1
    }
  }
  aftr {
    arryTyp {
      name {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
      dim: 1
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "URI"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "IRI"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "URI"
                  to: "IRI"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "URI"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "IRI"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      arryTyp {
        name {
          simpleType {
            name: "URI"
            typeOfType: TypeVariable
          }
        }
        dim: 1
      }
    }
    aftr {
      arryTyp {
        name {
          simpleType {
            name: "IRI"
            typeOfType: TypeVariable
          }
        }
        dim: 1
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "URI"
        typeOfType: TypeVariable
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "URI"
      typeOfType: TypeVariable
    }
  }
  aftr {
    simpleType {
      name: "IRI"
      typeOfType: TypeVariable
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "URI"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "IRI"
              typeOfType: TypeVariable
            }
          }
          chng {
            from: "URI"
            to: "IRI"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "URI"
        typeOfType: TypeVariable
      }
    }
    aftr {
      simpleType {
        name: "IRI"
        typeOfType: TypeVariable
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "URI"
        typeOfType: TypeVariable
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "int"
      typeOfType: Internal
    }
  }
  aftr {
    prmtv {
      name: "long"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            prmtv {
              name: "int"
              typeOfType: Internal
            }
          }
          aftr {
            prmtv {
              name: "long"
              typeOfType: Internal
            }
          }
          chng {
            from: "int"
            to: "long"
          }
        }
      }
    }
    kind: Upd
    b4 {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
    aftr {
      prmtv {
        name: "long"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "int"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "long"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "URI"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "IRI"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "URI"
                  to: "IRI"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "URI"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "IRI"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "URI"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "IRI"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "URI"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "IRI"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "URI"
        typeOfType: TypeVariable
      }
    }
  }
}
project: "any23"
commit: "any23"
tooBig: false

refactorings {
  classesAftr: "org.apache.felix.scr.impl.BundleComponentActivatorTest"
  classesB4: "org.apache.felix.scr.impl.BundleComponentActivatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.I0"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.I0"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.AI1"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.AI1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.BI1"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.BI1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.CI1"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.CI1"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.Odd"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.Odd"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.Odder"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.Odder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.AnnotationTest.OddTest"
  classesB4: "org.apache.felix.scr.impl.inject.AnnotationTest.OddTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.apache.felix.scr.impl.inject.BindMethodTest"
  classesB4: "org.apache.felix.scr.impl.inject.BindMethodTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "felix"
commit: "felix"
tooBig: false

refactorings {
  classesAftr: "com.joliciel.jochre.search.web.Slf4jListener"
  classesB4: "com.joliciel.jochre.search.web.Log4jListener"
  refactoringType: "RENAME_CLASS"
}
refactorings {
  classesAftr: "com.joliciel.jochre.segmentation.SegmentationTest"
  classesB4: "com.joliciel.jochre.segmentation.SegmentationTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.segmentation.SegmentationTest"
    classAftr: "com.joliciel.jochre.segmentation.SegmentationTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.segmentation.SegmentationTest"
  classesB4: "com.joliciel.jochre.segmentation.SegmentationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.Jochre"
  classesB4: "com.joliciel.jochre.Jochre"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.Jochre"
    classAftr: "com.joliciel.jochre.Jochre"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.Jochre"
  classesB4: "com.joliciel.jochre.Jochre"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.Jochre.PdfImageUpdater"
  classesB4: "com.joliciel.jochre.Jochre.PdfImageUpdater"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.JochreServiceLocator"
  classesB4: "com.joliciel.jochre.JochreServiceLocator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.JochreServiceLocator"
    classAftr: "com.joliciel.jochre.JochreServiceLocator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.JochreServiceLocator"
  classesB4: "com.joliciel.jochre.JochreServiceLocator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.analyser.BadGuessCollector"
  classesB4: "com.joliciel.jochre.analyser.BadGuessCollector"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.analyser.BadGuessCollector"
    classAftr: "com.joliciel.jochre.analyser.BadGuessCollector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.analyser.BadGuessCollector"
  classesB4: "com.joliciel.jochre.analyser.BadGuessCollector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.analyser.BeamSearchImageAnalyser"
  classesB4: "com.joliciel.jochre.analyser.BeamSearchImageAnalyser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.analyser.BeamSearchImageAnalyser"
    classAftr: "com.joliciel.jochre.analyser.BeamSearchImageAnalyser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.analyser.BeamSearchImageAnalyser"
  classesB4: "com.joliciel.jochre.analyser.BeamSearchImageAnalyser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc"
  classesB4: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc"
    classAftr: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc"
  classesB4: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc.SplitMapper"
  classesB4: "com.joliciel.jochre.boundaries.BoundaryDaoJdbc.SplitMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.BoundaryServiceImpl"
  classesB4: "com.joliciel.jochre.boundaries.BoundaryServiceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.BoundaryServiceImpl"
    classAftr: "com.joliciel.jochre.boundaries.BoundaryServiceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.BoundaryServiceImpl"
  classesB4: "com.joliciel.jochre.boundaries.BoundaryServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.JochreMergeEventStream"
  classesB4: "com.joliciel.jochre.boundaries.JochreMergeEventStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.JochreMergeEventStream"
    classAftr: "com.joliciel.jochre.boundaries.JochreMergeEventStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.JochreMergeEventStream"
  classesB4: "com.joliciel.jochre.boundaries.JochreMergeEventStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.JochreSplitEventStream"
  classesB4: "com.joliciel.jochre.boundaries.JochreSplitEventStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.JochreSplitEventStream"
    classAftr: "com.joliciel.jochre.boundaries.JochreSplitEventStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.JochreSplitEventStream"
  classesB4: "com.joliciel.jochre.boundaries.JochreSplitEventStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.MergeEvaluatorImpl"
  classesB4: "com.joliciel.jochre.boundaries.MergeEvaluatorImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.MergeEvaluatorImpl"
    classAftr: "com.joliciel.jochre.boundaries.MergeEvaluatorImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.MergeEvaluatorImpl"
  classesB4: "com.joliciel.jochre.boundaries.MergeEvaluatorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.RecursiveShapeSplitter"
  classesB4: "com.joliciel.jochre.boundaries.RecursiveShapeSplitter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.RecursiveShapeSplitter"
    classAftr: "com.joliciel.jochre.boundaries.RecursiveShapeSplitter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.RecursiveShapeSplitter"
  classesB4: "com.joliciel.jochre.boundaries.RecursiveShapeSplitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.ShapeMergerImpl"
  classesB4: "com.joliciel.jochre.boundaries.ShapeMergerImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.ShapeMergerImpl"
    classAftr: "com.joliciel.jochre.boundaries.ShapeMergerImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.ShapeMergerImpl"
  classesB4: "com.joliciel.jochre.boundaries.ShapeMergerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl"
  classesB4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl"
    classAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl"
  classesB4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl.SplitCandidateValue"
  classesB4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImpl.SplitCandidateValue"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitEvaluatorImpl"
  classesB4: "com.joliciel.jochre.boundaries.SplitEvaluatorImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.SplitEvaluatorImpl"
    classAftr: "com.joliciel.jochre.boundaries.SplitEvaluatorImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitEvaluatorImpl"
  classesB4: "com.joliciel.jochre.boundaries.SplitEvaluatorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.BorderlineNeighboursFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.BorderlineNeighboursFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.features.BorderlineNeighboursFeature"
    classAftr: "com.joliciel.jochre.boundaries.features.BorderlineNeighboursFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.BorderlineNeighboursFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.BorderlineNeighboursFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.BoundaryFeatureServiceImpl"
  classesB4: "com.joliciel.jochre.boundaries.features.BoundaryFeatureServiceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.features.BoundaryFeatureServiceImpl"
    classAftr: "com.joliciel.jochre.boundaries.features.BoundaryFeatureServiceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.BoundaryFeatureServiceImpl"
  classesB4: "com.joliciel.jochre.boundaries.features.BoundaryFeatureServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.SlopeDifferenceFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.SlopeDifferenceFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.features.SlopeDifferenceFeature"
    classAftr: "com.joliciel.jochre.boundaries.features.SlopeDifferenceFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.SlopeDifferenceFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.SlopeDifferenceFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.TrueContourSlopeDifferenceFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.TrueContourSlopeDifferenceFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.features.TrueContourSlopeDifferenceFeature"
    classAftr: "com.joliciel.jochre.boundaries.features.TrueContourSlopeDifferenceFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.TrueContourSlopeDifferenceFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.TrueContourSlopeDifferenceFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.TwoPointSlopeDifferenceFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.TwoPointSlopeDifferenceFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.features.TwoPointSlopeDifferenceFeature"
    classAftr: "com.joliciel.jochre.boundaries.features.TwoPointSlopeDifferenceFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.features.TwoPointSlopeDifferenceFeature"
  classesB4: "com.joliciel.jochre.boundaries.features.TwoPointSlopeDifferenceFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.DocumentDaoJdbc"
  classesB4: "com.joliciel.jochre.doc.DocumentDaoJdbc"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.doc.DocumentDaoJdbc"
    classAftr: "com.joliciel.jochre.doc.DocumentDaoJdbc"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.DocumentDaoJdbc"
  classesB4: "com.joliciel.jochre.doc.DocumentDaoJdbc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.DocumentDaoJdbc.JochrePageMapper"
  classesB4: "com.joliciel.jochre.doc.DocumentDaoJdbc.JochrePageMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.DocumentDaoJdbc.JochreDocumentMapper"
  classesB4: "com.joliciel.jochre.doc.DocumentDaoJdbc.JochreDocumentMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.DocumentDaoJdbc.AuthorMapper"
  classesB4: "com.joliciel.jochre.doc.DocumentDaoJdbc.AuthorMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.ImageDocumentExtractorImpl"
  classesB4: "com.joliciel.jochre.doc.ImageDocumentExtractorImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.doc.ImageDocumentExtractorImpl"
    classAftr: "com.joliciel.jochre.doc.ImageDocumentExtractorImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.ImageDocumentExtractorImpl"
  classesB4: "com.joliciel.jochre.doc.ImageDocumentExtractorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.JochreDocumentGeneratorImpl"
  classesB4: "com.joliciel.jochre.doc.JochreDocumentGeneratorImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.doc.JochreDocumentGeneratorImpl"
    classAftr: "com.joliciel.jochre.doc.JochreDocumentGeneratorImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.JochreDocumentGeneratorImpl"
  classesB4: "com.joliciel.jochre.doc.JochreDocumentGeneratorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.JochreDocumentImpl"
  classesB4: "com.joliciel.jochre.doc.JochreDocumentImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.doc.JochreDocumentImpl"
    classAftr: "com.joliciel.jochre.doc.JochreDocumentImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.JochreDocumentImpl"
  classesB4: "com.joliciel.jochre.doc.JochreDocumentImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.JochrePageImpl"
  classesB4: "com.joliciel.jochre.doc.JochrePageImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.doc.JochrePageImpl"
    classAftr: "com.joliciel.jochre.doc.JochrePageImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.doc.JochrePageImpl"
  classesB4: "com.joliciel.jochre.doc.JochrePageImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc"
    classAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.ShapeMapper"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.ShapeMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.JochreImageMapper"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.JochreImageMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.RowOfShapesMapper"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.RowOfShapesMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.GroupOfShapesMapper"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.GroupOfShapesMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.ParagraphMapper"
  classesB4: "com.joliciel.jochre.graphics.GraphicsDaoJdbc.ParagraphMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusGroupReaderImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusGroupReaderImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.JochreCorpusGroupReaderImpl"
    classAftr: "com.joliciel.jochre.graphics.JochreCorpusGroupReaderImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusGroupReaderImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusGroupReaderImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusImageProcessorImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusImageProcessorImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.JochreCorpusImageProcessorImpl"
    classAftr: "com.joliciel.jochre.graphics.JochreCorpusImageProcessorImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusImageProcessorImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusImageProcessorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusImageReaderImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusImageReaderImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.JochreCorpusImageReaderImpl"
    classAftr: "com.joliciel.jochre.graphics.JochreCorpusImageReaderImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusImageReaderImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusImageReaderImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusShapeReaderImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusShapeReaderImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.JochreCorpusShapeReaderImpl"
    classAftr: "com.joliciel.jochre.graphics.JochreCorpusShapeReaderImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreCorpusShapeReaderImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreCorpusShapeReaderImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreImageImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreImageImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.JochreImageImpl"
    classAftr: "com.joliciel.jochre.graphics.JochreImageImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.JochreImageImpl"
  classesB4: "com.joliciel.jochre.graphics.JochreImageImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.RowOfShapesImpl"
  classesB4: "com.joliciel.jochre.graphics.RowOfShapesImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.RowOfShapesImpl"
    classAftr: "com.joliciel.jochre.graphics.RowOfShapesImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.RowOfShapesImpl"
  classesB4: "com.joliciel.jochre.graphics.RowOfShapesImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SegmenterImpl"
  classesB4: "com.joliciel.jochre.graphics.SegmenterImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.SegmenterImpl"
    classAftr: "com.joliciel.jochre.graphics.SegmenterImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SegmenterImpl"
  classesB4: "com.joliciel.jochre.graphics.SegmenterImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SegmenterImpl.Column"
  classesB4: "com.joliciel.jochre.graphics.SegmenterImpl.Column"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeFillerImpl"
  classesB4: "com.joliciel.jochre.graphics.ShapeFillerImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.ShapeFillerImpl"
    classAftr: "com.joliciel.jochre.graphics.ShapeFillerImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeFillerImpl"
  classesB4: "com.joliciel.jochre.graphics.ShapeFillerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeImpl"
  classesB4: "com.joliciel.jochre.graphics.ShapeImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.ShapeImpl"
    classAftr: "com.joliciel.jochre.graphics.ShapeImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeImpl"
  classesB4: "com.joliciel.jochre.graphics.ShapeImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SourceImageImpl"
  classesB4: "com.joliciel.jochre.graphics.SourceImageImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.SourceImageImpl"
    classAftr: "com.joliciel.jochre.graphics.SourceImageImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SourceImageImpl"
  classesB4: "com.joliciel.jochre.graphics.SourceImageImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.VectorizerImpl"
  classesB4: "com.joliciel.jochre.graphics.VectorizerImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.VectorizerImpl"
    classAftr: "com.joliciel.jochre.graphics.VectorizerImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.VectorizerImpl"
  classesB4: "com.joliciel.jochre.graphics.VectorizerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.WhiteAreaFinder"
  classesB4: "com.joliciel.jochre.graphics.WhiteAreaFinder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.WhiteAreaFinder"
    classAftr: "com.joliciel.jochre.graphics.WhiteAreaFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.WhiteAreaFinder"
  classesB4: "com.joliciel.jochre.graphics.WhiteAreaFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.WhiteAreaFinder.WhiteLine"
  classesB4: "com.joliciel.jochre.graphics.WhiteAreaFinder.WhiteLine"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.ChupchikLowerRightFeature"
  classesB4: "com.joliciel.jochre.graphics.features.ChupchikLowerRightFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.ChupchikLowerRightFeature"
    classAftr: "com.joliciel.jochre.graphics.features.ChupchikLowerRightFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.ChupchikLowerRightFeature"
  classesB4: "com.joliciel.jochre.graphics.features.ChupchikLowerRightFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.EmptySectorsBinaryFeature"
  classesB4: "com.joliciel.jochre.graphics.features.EmptySectorsBinaryFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.EmptySectorsBinaryFeature"
    classAftr: "com.joliciel.jochre.graphics.features.EmptySectorsBinaryFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.EmptySectorsBinaryFeature"
  classesB4: "com.joliciel.jochre.graphics.features.EmptySectorsBinaryFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature"
  classesB4: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature"
    classAftr: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature"
  classesB4: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature.HorizontalLineSegment"
  classesB4: "com.joliciel.jochre.graphics.features.InnerEmptyChupchikLowerLeftFeature.HorizontalLineSegment"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.LowerLefthandOpeningFeature"
  classesB4: "com.joliciel.jochre.graphics.features.LowerLefthandOpeningFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.LowerLefthandOpeningFeature"
    classAftr: "com.joliciel.jochre.graphics.features.LowerLefthandOpeningFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.LowerLefthandOpeningFeature"
  classesB4: "com.joliciel.jochre.graphics.features.LowerLefthandOpeningFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.LowerRighthandGapFeature"
  classesB4: "com.joliciel.jochre.graphics.features.LowerRighthandGapFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.LowerRighthandGapFeature"
    classAftr: "com.joliciel.jochre.graphics.features.LowerRighthandGapFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.LowerRighthandGapFeature"
  classesB4: "com.joliciel.jochre.graphics.features.LowerRighthandGapFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.OpeningOnBottomFeature"
  classesB4: "com.joliciel.jochre.graphics.features.OpeningOnBottomFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.OpeningOnBottomFeature"
    classAftr: "com.joliciel.jochre.graphics.features.OpeningOnBottomFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.OpeningOnBottomFeature"
  classesB4: "com.joliciel.jochre.graphics.features.OpeningOnBottomFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.OpeningOnTopFeature"
  classesB4: "com.joliciel.jochre.graphics.features.OpeningOnTopFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.OpeningOnTopFeature"
    classAftr: "com.joliciel.jochre.graphics.features.OpeningOnTopFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.OpeningOnTopFeature"
  classesB4: "com.joliciel.jochre.graphics.features.OpeningOnTopFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SectionBrightnessRatioFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SectionBrightnessRatioFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.SectionBrightnessRatioFeature"
    classAftr: "com.joliciel.jochre.graphics.features.SectionBrightnessRatioFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SectionBrightnessRatioFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SectionBrightnessRatioFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessFeature"
    classAftr: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessNoMarginsFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessNoMarginsFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessNoMarginsFeature"
    classAftr: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessNoMarginsFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessNoMarginsFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SectionRelativeBrightnessNoMarginsFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SmallChupchikRightNearTopFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SmallChupchikRightNearTopFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.SmallChupchikRightNearTopFeature"
    classAftr: "com.joliciel.jochre.graphics.features.SmallChupchikRightNearTopFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.SmallChupchikRightNearTopFeature"
  classesB4: "com.joliciel.jochre.graphics.features.SmallChupchikRightNearTopFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.ThinRowFeature"
  classesB4: "com.joliciel.jochre.graphics.features.ThinRowFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.ThinRowFeature"
    classAftr: "com.joliciel.jochre.graphics.features.ThinRowFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.ThinRowFeature"
  classesB4: "com.joliciel.jochre.graphics.features.ThinRowFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.UpperLefthandOpeningFeature"
  classesB4: "com.joliciel.jochre.graphics.features.UpperLefthandOpeningFeature"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.features.UpperLefthandOpeningFeature"
    classAftr: "com.joliciel.jochre.graphics.features.UpperLefthandOpeningFeature"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.features.UpperLefthandOpeningFeature"
  classesB4: "com.joliciel.jochre.graphics.features.UpperLefthandOpeningFeature"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lang.DefaultLinguistics"
  classesB4: "com.joliciel.jochre.lang.DefaultLinguistics"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.lang.DefaultLinguistics"
    classAftr: "com.joliciel.jochre.lang.DefaultLinguistics"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lang.DefaultLinguistics"
  classesB4: "com.joliciel.jochre.lang.DefaultLinguistics"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.JochreLetterEventStream"
  classesB4: "com.joliciel.jochre.letterGuesser.JochreLetterEventStream"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.letterGuesser.JochreLetterEventStream"
    classAftr: "com.joliciel.jochre.letterGuesser.JochreLetterEventStream"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.JochreLetterEventStream"
  classesB4: "com.joliciel.jochre.letterGuesser.JochreLetterEventStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.LetterGuesserImpl"
  classesB4: "com.joliciel.jochre.letterGuesser.LetterGuesserImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.letterGuesser.LetterGuesserImpl"
    classAftr: "com.joliciel.jochre.letterGuesser.LetterGuesserImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.LetterGuesserImpl"
  classesB4: "com.joliciel.jochre.letterGuesser.LetterGuesserImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.features.LetterFeatureServiceImpl"
  classesB4: "com.joliciel.jochre.letterGuesser.features.LetterFeatureServiceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.letterGuesser.features.LetterFeatureServiceImpl"
    classAftr: "com.joliciel.jochre.letterGuesser.features.LetterFeatureServiceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.features.LetterFeatureServiceImpl"
  classesB4: "com.joliciel.jochre.letterGuesser.features.LetterFeatureServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.features.LetterFeatureTesterImpl"
  classesB4: "com.joliciel.jochre.letterGuesser.features.LetterFeatureTesterImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.letterGuesser.features.LetterFeatureTesterImpl"
    classAftr: "com.joliciel.jochre.letterGuesser.features.LetterFeatureTesterImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.letterGuesser.features.LetterFeatureTesterImpl"
  classesB4: "com.joliciel.jochre.letterGuesser.features.LetterFeatureTesterImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.DefaultLexiconWrapper"
  classesB4: "com.joliciel.jochre.lexicon.DefaultLexiconWrapper"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.lexicon.DefaultLexiconWrapper"
    classAftr: "com.joliciel.jochre.lexicon.DefaultLexiconWrapper"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.DefaultLexiconWrapper"
  classesB4: "com.joliciel.jochre.lexicon.DefaultLexiconWrapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.LexiconErrorWriter"
  classesB4: "com.joliciel.jochre.lexicon.LexiconErrorWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.lexicon.LexiconErrorWriter"
    classAftr: "com.joliciel.jochre.lexicon.LexiconErrorWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.LexiconErrorWriter"
  classesB4: "com.joliciel.jochre.lexicon.LexiconErrorWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.LexiconErrorWriter.ErrorStatistics"
  classesB4: "com.joliciel.jochre.lexicon.LexiconErrorWriter.ErrorStatistics"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.MostLikelyWordChooserImpl"
  classesB4: "com.joliciel.jochre.lexicon.MostLikelyWordChooserImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.lexicon.MostLikelyWordChooserImpl"
    classAftr: "com.joliciel.jochre.lexicon.MostLikelyWordChooserImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.MostLikelyWordChooserImpl"
  classesB4: "com.joliciel.jochre.lexicon.MostLikelyWordChooserImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.TextFileLexicon"
  classesB4: "com.joliciel.jochre.lexicon.TextFileLexicon"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.lexicon.TextFileLexicon"
    classAftr: "com.joliciel.jochre.lexicon.TextFileLexicon"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.TextFileLexicon"
  classesB4: "com.joliciel.jochre.lexicon.TextFileLexicon"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.UnknownWordListWriter"
  classesB4: "com.joliciel.jochre.lexicon.UnknownWordListWriter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.lexicon.UnknownWordListWriter"
    classAftr: "com.joliciel.jochre.lexicon.UnknownWordListWriter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.lexicon.UnknownWordListWriter"
  classesB4: "com.joliciel.jochre.lexicon.UnknownWordListWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.AbbyyFineReader8Exporter"
  classesB4: "com.joliciel.jochre.output.AbbyyFineReader8Exporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.AbbyyFineReader8Exporter"
    classAftr: "com.joliciel.jochre.output.AbbyyFineReader8Exporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.AbbyyFineReader8Exporter"
  classesB4: "com.joliciel.jochre.output.AbbyyFineReader8Exporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.AbstractExporter"
  classesB4: "com.joliciel.jochre.output.AbstractExporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.AbstractExporter"
    classAftr: "com.joliciel.jochre.output.AbstractExporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.AbstractExporter"
  classesB4: "com.joliciel.jochre.output.AbstractExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.AltoXMLExporter"
  classesB4: "com.joliciel.jochre.output.AltoXMLExporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.AltoXMLExporter"
    classAftr: "com.joliciel.jochre.output.AltoXMLExporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.AltoXMLExporter"
  classesB4: "com.joliciel.jochre.output.AltoXMLExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.ImageExtractor"
  classesB4: "com.joliciel.jochre.output.ImageExtractor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.ImageExtractor"
    classAftr: "com.joliciel.jochre.output.ImageExtractor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.ImageExtractor"
  classesB4: "com.joliciel.jochre.output.ImageExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.JochrePageByPageExporter"
  classesB4: "com.joliciel.jochre.output.JochrePageByPageExporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.JochrePageByPageExporter"
    classAftr: "com.joliciel.jochre.output.JochrePageByPageExporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.JochrePageByPageExporter"
  classesB4: "com.joliciel.jochre.output.JochrePageByPageExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.JochreXMLExporter"
  classesB4: "com.joliciel.jochre.output.JochreXMLExporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.JochreXMLExporter"
    classAftr: "com.joliciel.jochre.output.JochreXMLExporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.JochreXMLExporter"
  classesB4: "com.joliciel.jochre.output.JochreXMLExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.MetaDataExporter"
  classesB4: "com.joliciel.jochre.output.MetaDataExporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.MetaDataExporter"
    classAftr: "com.joliciel.jochre.output.MetaDataExporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.MetaDataExporter"
  classesB4: "com.joliciel.jochre.output.MetaDataExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.TextExporter"
  classesB4: "com.joliciel.jochre.output.TextExporter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.TextExporter"
    classAftr: "com.joliciel.jochre.output.TextExporter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.TextExporter"
  classesB4: "com.joliciel.jochre.output.TextExporter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.TextGetterImpl"
  classesB4: "com.joliciel.jochre.output.TextGetterImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.TextGetterImpl"
    classAftr: "com.joliciel.jochre.output.TextGetterImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.TextGetterImpl"
  classesB4: "com.joliciel.jochre.output.TextGetterImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.pdf.PdfImageSaverImpl"
  classesB4: "com.joliciel.jochre.pdf.PdfImageSaverImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.pdf.PdfImageSaverImpl"
    classAftr: "com.joliciel.jochre.pdf.PdfImageSaverImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.pdf.PdfImageSaverImpl"
  classesB4: "com.joliciel.jochre.pdf.PdfImageSaverImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.pdf.PdfImageVisitorImpl"
  classesB4: "com.joliciel.jochre.pdf.PdfImageVisitorImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.pdf.PdfImageVisitorImpl"
    classAftr: "com.joliciel.jochre.pdf.PdfImageVisitorImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.pdf.PdfImageVisitorImpl"
  classesB4: "com.joliciel.jochre.pdf.PdfImageVisitorImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.security.SecurityDaoJdbc"
  classesB4: "com.joliciel.jochre.security.SecurityDaoJdbc"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.security.SecurityDaoJdbc"
    classAftr: "com.joliciel.jochre.security.SecurityDaoJdbc"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.security.SecurityDaoJdbc"
  classesB4: "com.joliciel.jochre.security.SecurityDaoJdbc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.security.SecurityDaoJdbc.UserMapper"
  classesB4: "com.joliciel.jochre.security.SecurityDaoJdbc.UserMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.security.SecurityDaoJdbc.ParametersMapper"
  classesB4: "com.joliciel.jochre.security.SecurityDaoJdbc.ParametersMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.stats.DBSCANClusterer"
  classesB4: "com.joliciel.jochre.stats.DBSCANClusterer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.stats.DBSCANClusterer"
    classAftr: "com.joliciel.jochre.stats.DBSCANClusterer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.stats.DBSCANClusterer"
  classesB4: "com.joliciel.jochre.stats.DBSCANClusterer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.stats.FScoreCalculator"
  classesB4: "com.joliciel.jochre.stats.FScoreCalculator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.stats.FScoreCalculator"
    classAftr: "com.joliciel.jochre.stats.FScoreCalculator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.stats.FScoreCalculator"
  classesB4: "com.joliciel.jochre.stats.FScoreCalculator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.RecursiveShapeSplitterTest"
  classesB4: "com.joliciel.jochre.boundaries.RecursiveShapeSplitterTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.RecursiveShapeSplitterTest"
    classAftr: "com.joliciel.jochre.boundaries.RecursiveShapeSplitterTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.RecursiveShapeSplitterTest"
  classesB4: "com.joliciel.jochre.boundaries.RecursiveShapeSplitterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImplTest"
  classesB4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImplTest"
    classAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.SplitCandidateFinderImplTest"
  classesB4: "com.joliciel.jochre.boundaries.SplitCandidateFinderImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.TrainingCorpusShapeSplitterTest"
  classesB4: "com.joliciel.jochre.boundaries.TrainingCorpusShapeSplitterTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.boundaries.TrainingCorpusShapeSplitterTest"
    classAftr: "com.joliciel.jochre.boundaries.TrainingCorpusShapeSplitterTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.boundaries.TrainingCorpusShapeSplitterTest"
  classesB4: "com.joliciel.jochre.boundaries.TrainingCorpusShapeSplitterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.LineDefinitionImplTest"
  classesB4: "com.joliciel.jochre.graphics.LineDefinitionImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.LineDefinitionImplTest"
    classAftr: "com.joliciel.jochre.graphics.LineDefinitionImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.LineDefinitionImplTest"
  classesB4: "com.joliciel.jochre.graphics.LineDefinitionImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.LineSegmentImplTest"
  classesB4: "com.joliciel.jochre.graphics.LineSegmentImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.LineSegmentImplTest"
    classAftr: "com.joliciel.jochre.graphics.LineSegmentImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.LineSegmentImplTest"
  classesB4: "com.joliciel.jochre.graphics.LineSegmentImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SegmenterImplTest"
  classesB4: "com.joliciel.jochre.graphics.SegmenterImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.SegmenterImplTest"
    classAftr: "com.joliciel.jochre.graphics.SegmenterImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.SegmenterImplTest"
  classesB4: "com.joliciel.jochre.graphics.SegmenterImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeFillerImplTest"
  classesB4: "com.joliciel.jochre.graphics.ShapeFillerImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.ShapeFillerImplTest"
    classAftr: "com.joliciel.jochre.graphics.ShapeFillerImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeFillerImplTest"
  classesB4: "com.joliciel.jochre.graphics.ShapeFillerImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeImplTest"
  classesB4: "com.joliciel.jochre.graphics.ShapeImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.ShapeImplTest"
    classAftr: "com.joliciel.jochre.graphics.ShapeImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.ShapeImplTest"
  classesB4: "com.joliciel.jochre.graphics.ShapeImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.VectorizerImplTest"
  classesB4: "com.joliciel.jochre.graphics.VectorizerImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.graphics.VectorizerImplTest"
    classAftr: "com.joliciel.jochre.graphics.VectorizerImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.graphics.VectorizerImplTest"
  classesB4: "com.joliciel.jochre.graphics.VectorizerImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.TextGetterImplTest"
  classesB4: "com.joliciel.jochre.output.TextGetterImplTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.output.TextGetterImplTest"
    classAftr: "com.joliciel.jochre.output.TextGetterImplTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.output.TextGetterImplTest"
  classesB4: "com.joliciel.jochre.output.TextGetterImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.test.QuickTest"
  classesB4: "com.joliciel.jochre.test.QuickTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.test.QuickTest"
    classAftr: "com.joliciel.jochre.test.QuickTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.test.QuickTest"
  classesB4: "com.joliciel.jochre.test.QuickTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest"
  classesB4: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest"
    classAftr: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest"
  classesB4: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest.MonitorableParentClass"
  classesB4: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest.MonitorableParentClass"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest.MonitorableChildClass"
  classesB4: "com.joliciel.jochre.util.MultiTaskProgressMonitorTest.MonitorableChildClass"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.occitan.JochreOccitan"
  classesB4: "com.joliciel.jochre.occitan.JochreOccitan"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.occitan.JochreOccitan"
    classAftr: "com.joliciel.jochre.occitan.JochreOccitan"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.occitan.JochreOccitan"
  classesB4: "com.joliciel.jochre.occitan.JochreOccitan"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexBuilderImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexBuilderImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreIndexBuilderImpl"
    classAftr: "com.joliciel.jochre.search.JochreIndexBuilderImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexBuilderImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexBuilderImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexBuilderImpl.AltoPageIndexer"
  classesB4: "com.joliciel.jochre.search.JochreIndexBuilderImpl.AltoPageIndexer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexDirectoryImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexDirectoryImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreIndexDirectoryImpl"
    classAftr: "com.joliciel.jochre.search.JochreIndexDirectoryImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexDirectoryImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexDirectoryImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexDocumentImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexDocumentImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreIndexDocumentImpl"
    classAftr: "com.joliciel.jochre.search.JochreIndexDocumentImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexDocumentImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexDocumentImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexSearcherImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexSearcherImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreIndexSearcherImpl"
    classAftr: "com.joliciel.jochre.search.JochreIndexSearcherImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexSearcherImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexSearcherImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexTermLister"
  classesB4: "com.joliciel.jochre.search.JochreIndexTermLister"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreIndexTermLister"
    classAftr: "com.joliciel.jochre.search.JochreIndexTermLister"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexTermLister"
  classesB4: "com.joliciel.jochre.search.JochreIndexTermLister"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexTermLister.JochreTerm"
  classesB4: "com.joliciel.jochre.search.JochreIndexTermLister.JochreTerm"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexWordImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexWordImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreIndexWordImpl"
    classAftr: "com.joliciel.jochre.search.JochreIndexWordImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreIndexWordImpl"
  classesB4: "com.joliciel.jochre.search.JochreIndexWordImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreQueryImpl"
  classesB4: "com.joliciel.jochre.search.JochreQueryImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreQueryImpl"
    classAftr: "com.joliciel.jochre.search.JochreQueryImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreQueryImpl"
  classesB4: "com.joliciel.jochre.search.JochreQueryImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreSearch"
  classesB4: "com.joliciel.jochre.search.JochreSearch"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreSearch"
    classAftr: "com.joliciel.jochre.search.JochreSearch"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreSearch"
  classesB4: "com.joliciel.jochre.search.JochreSearch"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreTextLayerAnalyser"
  classesB4: "com.joliciel.jochre.search.JochreTextLayerAnalyser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreTextLayerAnalyser"
    classAftr: "com.joliciel.jochre.search.JochreTextLayerAnalyser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreTextLayerAnalyser"
  classesB4: "com.joliciel.jochre.search.JochreTextLayerAnalyser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreTokeniser"
  classesB4: "com.joliciel.jochre.search.JochreTokeniser"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.JochreTokeniser"
    classAftr: "com.joliciel.jochre.search.JochreTokeniser"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.JochreTokeniser"
  classesB4: "com.joliciel.jochre.search.JochreTokeniser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.SearchServiceImpl"
  classesB4: "com.joliciel.jochre.search.SearchServiceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.SearchServiceImpl"
    classAftr: "com.joliciel.jochre.search.SearchServiceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.SearchServiceImpl"
  classesB4: "com.joliciel.jochre.search.SearchServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.alto.AltoReaderImpl"
  classesB4: "com.joliciel.jochre.search.alto.AltoReaderImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.alto.AltoReaderImpl"
    classAftr: "com.joliciel.jochre.search.alto.AltoReaderImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.alto.AltoReaderImpl"
  classesB4: "com.joliciel.jochre.search.alto.AltoReaderImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.alto.YiddishAltoStringFixer"
  classesB4: "com.joliciel.jochre.search.alto.YiddishAltoStringFixer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.alto.YiddishAltoStringFixer"
    classAftr: "com.joliciel.jochre.search.alto.YiddishAltoStringFixer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.alto.YiddishAltoStringFixer"
  classesB4: "com.joliciel.jochre.search.alto.YiddishAltoStringFixer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.feedback.FeedbackDAO"
    classAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO.WordMapper"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO.WordMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO.FeedbackRowMapper"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO.FeedbackRowMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO.SuggestionMapper"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO.SuggestionMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO.QueryMapper"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO.QueryMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackDAO.DocumentMapper"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackDAO.DocumentMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackServiceLocator"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackServiceLocator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.feedback.FeedbackServiceLocator"
    classAftr: "com.joliciel.jochre.search.feedback.FeedbackServiceLocator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.feedback.FeedbackServiceLocator"
  classesB4: "com.joliciel.jochre.search.feedback.FeedbackServiceLocator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.FixedSizeSnippetFinder"
  classesB4: "com.joliciel.jochre.search.highlight.FixedSizeSnippetFinder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.FixedSizeSnippetFinder"
    classAftr: "com.joliciel.jochre.search.highlight.FixedSizeSnippetFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.FixedSizeSnippetFinder"
  classesB4: "com.joliciel.jochre.search.highlight.FixedSizeSnippetFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.FullRowSnippetFinder"
  classesB4: "com.joliciel.jochre.search.highlight.FullRowSnippetFinder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.FullRowSnippetFinder"
    classAftr: "com.joliciel.jochre.search.highlight.FullRowSnippetFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.FullRowSnippetFinder"
  classesB4: "com.joliciel.jochre.search.highlight.FullRowSnippetFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.HighlightManagerImpl"
  classesB4: "com.joliciel.jochre.search.highlight.HighlightManagerImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.HighlightManagerImpl"
    classAftr: "com.joliciel.jochre.search.highlight.HighlightManagerImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.HighlightManagerImpl"
  classesB4: "com.joliciel.jochre.search.highlight.HighlightManagerImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.HighlightTerm"
  classesB4: "com.joliciel.jochre.search.highlight.HighlightTerm"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.HighlightTerm"
    classAftr: "com.joliciel.jochre.search.highlight.HighlightTerm"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.HighlightTerm"
  classesB4: "com.joliciel.jochre.search.highlight.HighlightTerm"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.ImageSnippet"
  classesB4: "com.joliciel.jochre.search.highlight.ImageSnippet"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.ImageSnippet"
    classAftr: "com.joliciel.jochre.search.highlight.ImageSnippet"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.ImageSnippet"
  classesB4: "com.joliciel.jochre.search.highlight.ImageSnippet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter"
  classesB4: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter"
    classAftr: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter"
  classesB4: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter.HighlightPassage"
  classesB4: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter.HighlightPassage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter.TermPhrase"
  classesB4: "com.joliciel.jochre.search.highlight.LuceneQueryHighlighter.TermPhrase"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.Snippet"
  classesB4: "com.joliciel.jochre.search.highlight.Snippet"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.Snippet"
    classAftr: "com.joliciel.jochre.search.highlight.Snippet"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.Snippet"
  classesB4: "com.joliciel.jochre.search.highlight.Snippet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.lexicon.InflectedFormFilter"
  classesB4: "com.joliciel.jochre.search.lexicon.InflectedFormFilter"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.lexicon.InflectedFormFilter"
    classAftr: "com.joliciel.jochre.search.lexicon.InflectedFormFilter"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.lexicon.InflectedFormFilter"
  classesB4: "com.joliciel.jochre.search.lexicon.InflectedFormFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.lexicon.LexiconServiceImpl"
  classesB4: "com.joliciel.jochre.search.lexicon.LexiconServiceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.lexicon.LexiconServiceImpl"
    classAftr: "com.joliciel.jochre.search.lexicon.LexiconServiceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.lexicon.LexiconServiceImpl"
  classesB4: "com.joliciel.jochre.search.lexicon.LexiconServiceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.lexicon.TextFileLexiconImpl"
  classesB4: "com.joliciel.jochre.search.lexicon.TextFileLexiconImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.lexicon.TextFileLexiconImpl"
    classAftr: "com.joliciel.jochre.search.lexicon.TextFileLexiconImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.lexicon.TextFileLexiconImpl"
  classesB4: "com.joliciel.jochre.search.lexicon.TextFileLexiconImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.SnippetTest"
  classesB4: "com.joliciel.jochre.search.highlight.SnippetTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.highlight.SnippetTest"
    classAftr: "com.joliciel.jochre.search.highlight.SnippetTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.highlight.SnippetTest"
  classesB4: "com.joliciel.jochre.search.highlight.SnippetTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.JochreSearchProperties"
  classesB4: "com.joliciel.jochre.search.web.JochreSearchProperties"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.web.JochreSearchProperties"
    classAftr: "com.joliciel.jochre.search.web.JochreSearchProperties"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.JochreSearchProperties"
  classesB4: "com.joliciel.jochre.search.web.JochreSearchProperties"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.JochreSearchServlet"
  classesB4: "com.joliciel.jochre.search.web.JochreSearchServlet"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.web.JochreSearchServlet"
    classAftr: "com.joliciel.jochre.search.web.JochreSearchServlet"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.JochreSearchServlet"
  classesB4: "com.joliciel.jochre.search.web.JochreSearchServlet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.JochreSetupListener"
  classesB4: "com.joliciel.jochre.search.web.JochreSetupListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.web.JochreSetupListener"
    classAftr: "com.joliciel.jochre.search.web.JochreSetupListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.JochreSetupListener"
  classesB4: "com.joliciel.jochre.search.web.JochreSetupListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.utils.pdf.AbstractPdfImageVisitor"
  classesB4: "com.joliciel.jochre.utils.pdf.AbstractPdfImageVisitor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.utils.pdf.AbstractPdfImageVisitor"
    classAftr: "com.joliciel.jochre.utils.pdf.AbstractPdfImageVisitor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.utils.pdf.AbstractPdfImageVisitor"
  classesB4: "com.joliciel.jochre.utils.pdf.AbstractPdfImageVisitor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.DocumentController"
  classesB4: "com.joliciel.jochre.web.DocumentController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.DocumentController"
    classAftr: "com.joliciel.jochre.web.DocumentController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.DocumentController"
  classesB4: "com.joliciel.jochre.web.DocumentController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.DocumentController.DocumentTreeModel"
  classesB4: "com.joliciel.jochre.web.DocumentController.DocumentTreeModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.DocumentController.DocumentTreeNodeRoot"
  classesB4: "com.joliciel.jochre.web.DocumentController.DocumentTreeNodeRoot"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.DocumentController.DocumentTreeNodeDoc"
  classesB4: "com.joliciel.jochre.web.DocumentController.DocumentTreeNodeDoc"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.DocumentController.DocumentTreeNodeImage"
  classesB4: "com.joliciel.jochre.web.DocumentController.DocumentTreeNodeImage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.FixTextWindowController"
  classesB4: "com.joliciel.jochre.web.FixTextWindowController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.FixTextWindowController"
    classAftr: "com.joliciel.jochre.web.FixTextWindowController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.FixTextWindowController"
  classesB4: "com.joliciel.jochre.web.FixTextWindowController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.HomeController"
  classesB4: "com.joliciel.jochre.web.HomeController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.HomeController"
    classAftr: "com.joliciel.jochre.web.HomeController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.HomeController"
  classesB4: "com.joliciel.jochre.web.HomeController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ImageController"
  classesB4: "com.joliciel.jochre.web.ImageController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.ImageController"
    classAftr: "com.joliciel.jochre.web.ImageController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ImageController"
  classesB4: "com.joliciel.jochre.web.ImageController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ImageController.ImageGridRowRenderer"
  classesB4: "com.joliciel.jochre.web.ImageController.ImageGridRowRenderer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ImageController.RowImageOnClickEventListener"
  classesB4: "com.joliciel.jochre.web.ImageController.RowImageOnClickEventListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ImageController.LetterLabelUpdater"
  classesB4: "com.joliciel.jochre.web.ImageController.LetterLabelUpdater"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.JochreProperties"
  classesB4: "com.joliciel.jochre.web.JochreProperties"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.JochreProperties"
    classAftr: "com.joliciel.jochre.web.JochreProperties"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.JochreProperties"
  classesB4: "com.joliciel.jochre.web.JochreProperties"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.LoginController"
  classesB4: "com.joliciel.jochre.web.LoginController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.LoginController"
    classAftr: "com.joliciel.jochre.web.LoginController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.LoginController"
  classesB4: "com.joliciel.jochre.web.LoginController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.MenuController"
  classesB4: "com.joliciel.jochre.web.MenuController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.MenuController"
    classAftr: "com.joliciel.jochre.web.MenuController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.MenuController"
  classesB4: "com.joliciel.jochre.web.MenuController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ProfileController"
  classesB4: "com.joliciel.jochre.web.ProfileController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.ProfileController"
    classAftr: "com.joliciel.jochre.web.ProfileController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.ProfileController"
  classesB4: "com.joliciel.jochre.web.ProfileController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.SplitController"
  classesB4: "com.joliciel.jochre.web.SplitController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.SplitController"
    classAftr: "com.joliciel.jochre.web.SplitController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.SplitController"
  classesB4: "com.joliciel.jochre.web.SplitController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.SplitController.ShapeImageOnClickEventListener"
  classesB4: "com.joliciel.jochre.web.SplitController.ShapeImageOnClickEventListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.SplitController.SplitOnClickEventListener"
  classesB4: "com.joliciel.jochre.web.SplitController.SplitOnClickEventListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.TextController"
  classesB4: "com.joliciel.jochre.web.TextController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.TextController"
    classAftr: "com.joliciel.jochre.web.TextController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.TextController"
  classesB4: "com.joliciel.jochre.web.TextController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.TextController.DocumentHtmlGenerator"
  classesB4: "com.joliciel.jochre.web.TextController.DocumentHtmlGenerator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.UpdateDocumentController"
  classesB4: "com.joliciel.jochre.web.UpdateDocumentController"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.web.UpdateDocumentController"
    classAftr: "com.joliciel.jochre.web.UpdateDocumentController"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.UpdateDocumentController"
  classesB4: "com.joliciel.jochre.web.UpdateDocumentController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.web.UpdateDocumentController.UpdateDocumentControllerModalListener"
  classesB4: "com.joliciel.jochre.web.UpdateDocumentController.UpdateDocumentControllerModalListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.JochreYiddish"
  classesB4: "com.joliciel.jochre.yiddish.JochreYiddish"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.JochreYiddish"
    classAftr: "com.joliciel.jochre.yiddish.JochreYiddish"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.JochreYiddish"
  classesB4: "com.joliciel.jochre.yiddish.JochreYiddish"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.YiddishMetaFetcher"
  classesB4: "com.joliciel.jochre.yiddish.YiddishMetaFetcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.YiddishMetaFetcher"
    classAftr: "com.joliciel.jochre.yiddish.YiddishMetaFetcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.YiddishMetaFetcher"
  classesB4: "com.joliciel.jochre.yiddish.YiddishMetaFetcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.YiddishWordFrequencyFinder"
  classesB4: "com.joliciel.jochre.yiddish.YiddishWordFrequencyFinder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.YiddishWordFrequencyFinder"
    classAftr: "com.joliciel.jochre.yiddish.YiddishWordFrequencyFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.YiddishWordFrequencyFinder"
  classesB4: "com.joliciel.jochre.yiddish.YiddishWordFrequencyFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader"
    classAftr: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader.HarkavyLexicalFormEntry"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.HarkavyLexiconReader.HarkavyLexicalFormEntry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.NameListReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.NameListReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.lexicons.NameListReader"
    classAftr: "com.joliciel.jochre.yiddish.lexicons.NameListReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.NameListReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.NameListReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.NameListReader.NameLexicalEntry"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.NameListReader.NameLexicalEntry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader"
    classAftr: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader.NiborskiLexicalFormEntry"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.NiborskiLexiconReader.NiborskiLexicalFormEntry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader"
    classAftr: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader.PlaceLexicalEntry"
  classesB4: "com.joliciel.jochre.yiddish.lexicons.PlaceListReader.PlaceLexicalEntry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.Slf4jListener"
  classesB4: "com.joliciel.jochre.search.web.Log4jListener"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "com.joliciel.jochre.search.web.Log4jListener"
    classAftr: "com.joliciel.jochre.search.web.Slf4jListener"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.joliciel.jochre.search.web.Slf4jListener"
  classesB4: "com.joliciel.jochre.search.web.Log4jListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "jochre"
commit: "jochre"
tooBig: false

refactorings {
  classesAftr: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  classesB4: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpclient"
    nameaftr: "httpClient"
    classb4: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
    classAftr: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  classesB4: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  classesB4: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "post"
    nameaftr: "post"
    classb4: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
    classAftr: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  classesB4: "com.scandilabs.apps.zohocrm.alerter.ApiTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
project: "scandilabs-apps"
commit: "scandilabs-apps"
tooBig: false

refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "AbstractHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpMethod"
    nameaftr: "getHttpMethod"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClientParams"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpParams"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpClientParams"
    nameaftr: "getHttpClientParams"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "AbstractHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      simpleType {
        name: "org.apache.http.HttpResponse"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "returnCode"
    nameaftr: "httpResponse"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheAbstractHttpInvoker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpMethod"
    nameaftr: "getHttpMethod"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "query"
    nameaftr: "query"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClientParams"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpParams"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpClientParams"
    nameaftr: "getHttpClientParams"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "query"
    nameaftr: "query"
    classb4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.ApacheHttpInvoker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpMethod"
    nameaftr: "getHttpMethod"
    classb4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClientParams"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpParams"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getHttpClientParams"
    nameaftr: "getHttpClientParams"
    classb4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createMethod"
    nameaftr: "createMethod"
    classb4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
    classAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.HttpInvoker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpClient"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.AbstractHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpClient"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.AbstractHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpClient"
            to: "org.apache.http.impl.client.AbstractHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpClient"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.AbstractHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpClient"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.AbstractHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpClient"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "int"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.HttpResponse"
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.HttpResponse"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "int"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "org.apache.http.HttpResponse"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpMethod"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpRequestBase"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpMethod"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpRequestBase"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpMethod"
            to: "org.apache.http.client.methods.HttpRequestBase"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpRequestBase"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpRequestBase"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.params.HttpClientParams"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.params.HttpParams"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.params.HttpClientParams"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.params.HttpParams"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.params.HttpClientParams"
            to: "org.apache.http.params.HttpParams"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.params.HttpClientParams"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.params.HttpParams"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.params.HttpClientParams"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.params.HttpParams"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.params.HttpClientParams"
        typeOfType: DontKnow
      }
    }
  }
}
project: "jagger"
commit: "jagger"
tooBig: false

refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.AbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.AbstractHttpInvoker"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.DefaultHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.DefaultHttpInvoker"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpClient"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpClient"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpEndpoint"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpEndpoint"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpQuery"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpQuery"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpResponse"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpResponse"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.SpringBasedHttpClient"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.SpringBasedHttpClient"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.engine.e1.aggregator.workload.WorkloadAggregator"
  classesB4: "com.griddynamics.jagger.engine.e1.aggregator.workload.WorkloadAggregator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.engine.e1.aggregator.workload.WorkloadAggregator.KernelProcessor"
  classesB4: "com.griddynamics.jagger.engine.e1.aggregator.workload.WorkloadAggregator.KernelProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.engine.e1.scenario.AbstractRateClockConfiguration"
  classesB4: "com.griddynamics.jagger.engine.e1.scenario.AbstractRateClockConfiguration"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.master.Master"
  classesB4: "com.griddynamics.jagger.master.Master"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.master.Master.StartWorkConditions"
  classesB4: "com.griddynamics.jagger.master.Master.StartWorkConditions"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.user.test.configurations.JTestDescription"
  classesB4: "com.griddynamics.jagger.user.test.configurations.JTestDescription"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.user.test.configurations.JTestDescription.Builder"
  classesB4: "com.griddynamics.jagger.user.test.configurations.JTestDescription.Builder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.user.test.configurations.JTestSuite"
  classesB4: "com.griddynamics.jagger.user.test.configurations.JTestSuite"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.user.test.configurations.JTestSuite.Builder"
  classesB4: "com.griddynamics.jagger.user.test.configurations.JTestSuite.Builder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.beanParsers.report.ReportDefinitionParser"
  classesB4: "com.griddynamics.jagger.xml.beanParsers.report.ReportDefinitionParser"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "ApplicationContext"
      }
    }
    dtAftr {
      simpleType {
        name: "AbstractXmlApplicationContext"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ctx"
    nameaftr: "ctx"
    classb4: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
    classAftr: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  refactoringType: "REPLACE_VARIABLE_WITH_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "ApplicationContext"
      }
    }
    dtAftr {
      simpleType {
        name: "AbstractXmlApplicationContext"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "rdbContext"
    nameaftr: "dbCtx"
    classb4: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
    classAftr: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerConfigurationTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "ApplicationContext"
      }
    }
    dtAftr {
      simpleType {
        name: "AbstractXmlApplicationContext"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "ctx"
    nameaftr: "ctx"
    classb4: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
    classAftr: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  refactoringType: "REPLACE_VARIABLE_WITH_ATTRIBUTE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "ApplicationContext"
      }
    }
    dtAftr {
      simpleType {
        name: "AbstractXmlApplicationContext"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "rdbContext"
    nameaftr: "dbCtx"
    classb4: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
    classAftr: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerInheritanceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerLoadTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerLoadTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerProvidersTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerProvidersTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.xml.JaggerReportTest"
  classesB4: "com.griddynamics.jagger.xml.JaggerReportTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.provider.EndpointsProvider_JaaS"
  classesB4: "com.griddynamics.jagger.test.jaas.provider.EndpointsProvider_JaaS"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_SessionIds"
  classesB4: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_SessionIds"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_SessionsList"
  classesB4: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_SessionsList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_TestNames"
  classesB4: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_TestNames"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_TestsList"
  classesB4: "com.griddynamics.jagger.test.jaas.provider.QueryProvider_TestsList"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.validator.BaseHttpResponseValidator"
  classesB4: "com.griddynamics.jagger.test.jaas.validator.BaseHttpResponseValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.validator.ResponseStatusValidator"
  classesB4: "com.griddynamics.jagger.test.jaas.validator.ResponseStatusValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.validator.SessionResponseContentValidator"
  classesB4: "com.griddynamics.jagger.test.jaas.validator.SessionResponseContentValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.validator.SessionsListResponseContentValidator"
  classesB4: "com.griddynamics.jagger.test.jaas.validator.SessionsListResponseContentValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.validator.TestResponseContentValidator"
  classesB4: "com.griddynamics.jagger.test.jaas.validator.TestResponseContentValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.test.jaas.validator.TestsListResponseContentValidator"
  classesB4: "com.griddynamics.jagger.test.jaas.validator.TestsListResponseContentValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.AbstractHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.AbstractHttpInvoker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.DefaultHttpInvoker"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.DefaultHttpInvoker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpClient"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpEndpoint"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpEndpoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpQuery"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpQuery"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.JHttpResponse"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.JHttpResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.invoker.v2.SpringBasedHttpClient"
  classesB4: "com.griddynamics.jagger.invoker.http.v2.SpringBasedHttpClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.springframework.context.ApplicationContext"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.springframework.context.support.AbstractXmlApplicationContext"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.springframework.context.ApplicationContext"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.springframework.context.support.AbstractXmlApplicationContext"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.springframework.context.ApplicationContext"
            to: "org.springframework.context.support.AbstractXmlApplicationContext"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.springframework.context.ApplicationContext"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.springframework.context.support.AbstractXmlApplicationContext"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.springframework.context.ApplicationContext"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.springframework.context.support.AbstractXmlApplicationContext"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.springframework.context.ApplicationContext"
        typeOfType: DontKnow
      }
    }
  }
}
project: "jagger"
commit: "jagger"
tooBig: false

refactorings {
  classesAftr: "com.griddynamics.jagger.coordinator.http.client.ExchangeClient"
  classesB4: "com.griddynamics.jagger.coordinator.http.client.ExchangeClient"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "com.griddynamics.jagger.coordinator.http.client.ExchangeClient"
    classAftr: "com.griddynamics.jagger.coordinator.http.client.ExchangeClient"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.coordinator.http.client.ExchangeClient"
  classesB4: "com.griddynamics.jagger.coordinator.http.client.ExchangeClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.agent.Agent"
  classesB4: "com.griddynamics.jagger.agent.Agent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.griddynamics.jagger.agent.Agent.ExchangerThread"
  classesB4: "com.griddynamics.jagger.agent.Agent.ExchangerThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "jagger"
commit: "jagger"
tooBig: false

refactorings {
  classesAftr: "org.libresonic.player.Logger"
  classesB4: "org.libresonic.player.Logger"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.libresonic.player.Logger"
  classesB4: "org.libresonic.player.Logger"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "category"
    nameaftr: "internalLogger"
    classb4: "org.libresonic.player.Logger"
    classAftr: "org.libresonic.player.Logger"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.libresonic.player.Logger"
  classesB4: "org.libresonic.player.Logger"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.libresonic.player.controller.HelpController"
  classesB4: "org.libresonic.player.controller.HelpController"
  refactoringType: "EXTRACT_VARIABLE"
}
refactorings {
  classesAftr: "org.libresonic.player.controller.HelpController"
  classesB4: "org.libresonic.player.controller.HelpController"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.libresonic.player.io.TranscodeInputStream"
  classesB4: "org.libresonic.player.io.TranscodeInputStream"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.libresonic.player.service.SettingsService"
  classesB4: "org.libresonic.player.service.SettingsService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.libresonic.player.service.SettingsService"
  classesB4: "org.libresonic.player.Logger"
  refactoringType: "MOVE_OPERATION"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
            }
          }
          chng {
            from: "java.lang.String"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
project: "subsonic"
commit: "subsonic"
tooBig: false

refactorings {
  classesAftr: "com.dotc.nova.events.AsyncEventEmitterTest"
  classesB4: "com.dotc.nova.events.AsyncEventEmitterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.dotc.nova.events.SyncEventEmitterTest"
  classesB4: "com.dotc.nova.events.SyncEventEmitterTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.dotc.nova.filesystem.FilesystemTest"
  classesB4: "com.dotc.nova.filesystem.FilesystemTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.dotc.nova.process.ProcessTest"
  classesB4: "com.dotc.nova.process.ProcessTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.dotc.nova.timers.TimersTest"
  classesB4: "com.dotc.nova.timers.TimersTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "nova"
commit: "nova"
tooBig: false

refactorings {
  classesAftr: "org.obiba.opal.core.identifiers.IdentifiersMaps"
  classesB4: "org.obiba.opal.core.identifiers.IdentifiersMaps"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.identifiers.IdentifiersMaps.IdentifiersMap"
  classesB4: "org.obiba.opal.core.identifiers.IdentifiersMaps.IdentifiersMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.CategoricalVariableSummary"
  classesB4: "org.obiba.opal.core.magma.math.CategoricalVariableSummary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.CategoricalVariableSummary.Frequency"
  classesB4: "org.obiba.opal.core.magma.math.CategoricalVariableSummary.Frequency"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.CategoricalVariableSummary.Builder"
  classesB4: "org.obiba.opal.core.magma.math.CategoricalVariableSummary.Builder"
  refactoringType: "INLINE_VARIABLE"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.CategoricalVariableSummary.Builder"
  classesB4: "org.obiba.opal.core.magma.math.CategoricalVariableSummary.Builder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.ContinuousVariableSummary"
  classesB4: "org.obiba.opal.core.magma.math.ContinuousVariableSummary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.ContinuousVariableSummary.Builder"
  classesB4: "org.obiba.opal.core.magma.math.ContinuousVariableSummary.Builder"
  refactoringType: "INLINE_VARIABLE"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.ContinuousVariableSummary.Builder"
  classesB4: "org.obiba.opal.core.magma.math.ContinuousVariableSummary.Builder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.DefaultVariableSummary"
  classesB4: "org.obiba.opal.core.magma.math.DefaultVariableSummary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.DefaultVariableSummary.Frequency"
  classesB4: "org.obiba.opal.core.magma.math.DefaultVariableSummary.Frequency"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.DefaultVariableSummary.Builder"
  classesB4: "org.obiba.opal.core.magma.math.DefaultVariableSummary.Builder"
  refactoringType: "INLINE_VARIABLE"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.DefaultVariableSummary.Builder"
  classesB4: "org.obiba.opal.core.magma.math.DefaultVariableSummary.Builder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.CategoricalVariableSummaryTest"
  classesB4: "org.obiba.opal.core.magma.math.CategoricalVariableSummaryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.magma.math.ContinuousVariableSummaryTest"
  classesB4: "org.obiba.opal.core.magma.math.ContinuousVariableSummaryTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.magma.ValueSetsResourceImpl"
  classesB4: "org.obiba.opal.web.magma.ValueSetsResourceImpl"
  refactoringType: "INLINE_VARIABLE"
}
refactorings {
  classesAftr: "org.obiba.opal.web.magma.ValueSetsResourceImpl"
  classesB4: "org.obiba.opal.web.magma.ValueSetsResourceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.magma.support.DefaultPagingVectorSourceImpl"
  classesB4: "org.obiba.opal.web.magma.support.DefaultPagingVectorSourceImpl"
  refactoringType: "INLINE_VARIABLE"
}
refactorings {
  classesAftr: "org.obiba.opal.web.magma.support.DefaultPagingVectorSourceImpl"
  classesB4: "org.obiba.opal.web.magma.support.DefaultPagingVectorSourceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.system.database.DatabaseResource"
  classesB4: "org.obiba.opal.web.system.database.DatabaseResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.service.OpalPrivateVariableEntityMap"
  classesB4: "org.obiba.opal.core.service.OpalPrivateVariableEntityMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.core.cfg.OpalViewPersistenceStrategyTest"
  classesB4: "org.obiba.opal.core.cfg.OpalViewPersistenceStrategyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter"
  classesB4: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter.Display"
  classesB4: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter.Display"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter.DeleteDatabaseCommand"
  classesB4: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter.DeleteDatabaseCommand"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter.ListDatabasesAuthorization"
  classesB4: "org.obiba.opal.web.gwt.app.client.administration.database.list.data.DataDatabasesPresenter.ListDatabasesAuthorization"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.bookmark.list.BookmarkListView"
  classesB4: "org.obiba.opal.web.gwt.app.client.bookmark.list.BookmarkListView"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter"
  classesB4: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.CompareErrorRequestCallback"
  classesB4: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.CompareErrorRequestCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.DatasourceCompareResourceCallback"
  classesB4: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.DatasourceCompareResourceCallback"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.TableEditionAuthorizer"
  classesB4: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.TableEditionAuthorizer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.Display"
  classesB4: "org.obiba.opal.web.gwt.app.client.magma.importvariables.presenter.ComparedDatasourcesReportStepPresenter.Display"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.r.MagmaAssignROperation"
  classesB4: "org.obiba.opal.r.MagmaAssignROperation"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.r.MagmaAssignROperation.MagmaRConverter"
  classesB4: "org.obiba.opal.r.MagmaAssignROperation.MagmaRConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.r.MagmaAssignROperation.AbstractMagmaRConverter"
  classesB4: "org.obiba.opal.r.MagmaAssignROperation.AbstractMagmaRConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.r.MagmaAssignROperation.ValueTableRConverter"
  classesB4: "org.obiba.opal.r.MagmaAssignROperation.ValueTableRConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.r.MagmaAssignROperation.ValueTableRConverter.VariableEntityValueSource"
  classesB4: "org.obiba.opal.r.MagmaAssignROperation.ValueTableRConverter.VariableEntityValueSource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.r.MagmaAssignROperation.VariableRConverter"
  classesB4: "org.obiba.opal.r.MagmaAssignROperation.VariableRConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.rest.client.magma.RestValueTable"
  classesB4: "org.obiba.opal.rest.client.magma.RestValueTable"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.obiba.opal.rest.client.magma.RestValueTable"
  classesB4: "org.obiba.opal.rest.client.magma.RestValueTable"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.rest.client.magma.RestValueTable.FederatedVariableEntityProvider"
  classesB4: "org.obiba.opal.rest.client.magma.RestValueTable.FederatedVariableEntityProvider"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.rest.client.magma.RestValueTable.LazyValueSet"
  classesB4: "org.obiba.opal.rest.client.magma.RestValueTable.LazyValueSet"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.rest.client.magma.RestValueTable.ValueSetTimestamps"
  classesB4: "org.obiba.opal.rest.client.magma.RestValueTable.ValueSetTimestamps"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.shell.reporting.ReportTemplateResourceTest"
  classesB4: "org.obiba.opal.web.shell.reporting.ReportTemplateResourceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.obiba.opal.web.shell.reporting.ReportTemplatesResourceTest"
  classesB4: "org.obiba.opal.web.shell.reporting.ReportTemplatesResourceTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "opal"
commit: "opal"
tooBig: false

refactorings {
  classesAftr: "botto.xmpp.TestBot"
  classesB4: "botto.xmpp.BotManagerTest.TestBot"
  refactoringType: "MOVE_CLASS"
}
refactorings {
  classesAftr: "botto.xmpp.BotManager"
  classesB4: "botto.xmpp.BotManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "botto.xmpp.ChannelRegistry"
  classesB4: "botto.xmpp.ChannelRegistry"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "botto.xmpp.ChannelRegistry.ChannelBot"
  classesB4: "botto.xmpp.ChannelRegistry.ChannelBot"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "botto.xmpp.BotManagerTest"
  classesB4: "botto.xmpp.BotManagerTest"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "botto.xmpp.BotManagerTest"
  classesB4: "botto.xmpp.BotManagerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "botto.xmpp.TestBot"
  classesB4: "botto.xmpp.BotManagerTest.TestBot"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "botto"
commit: "botto"
tooBig: false

refactorings {
  classesAftr: "com.totalchange.discodj.search.solr.SolrSearchPopulatorImplTests"
  classesB4: "com.totalchange.discodj.search.solr.SolrSearchPopulatorImplTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.totalchange.discodj.search.solr.SolrSearchProviderImplTests"
  classesB4: "com.totalchange.discodj.search.solr.SolrSearchProviderImplTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.totalchange.discodj.web.search.inject.IntegrationTestModule"
  classesB4: "com.totalchange.discodj.web.search.inject.IntegrationTestModule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "discodj"
commit: "discodj"
tooBig: false

refactorings {
  classesAftr: "pl.softech.gw.App"
  classesB4: "pl.softech.gw.App"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "pl.softech.gw.download.BytesReceivedEvent"
  classesB4: "pl.softech.gw.download.BytesReceivedEvent"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "all"
    nameaftr: "all"
    classb4: "pl.softech.gw.download.BytesReceivedEvent"
    classAftr: "pl.softech.gw.download.BytesReceivedEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "pl.softech.gw.download.BytesReceivedEvent"
  classesB4: "pl.softech.gw.download.BytesReceivedEvent"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAll"
    nameaftr: "getAll"
    classb4: "pl.softech.gw.download.BytesReceivedEvent"
    classAftr: "pl.softech.gw.download.BytesReceivedEvent"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "pl.softech.gw.download.BytesReceivedEvent"
  classesB4: "pl.softech.gw.download.BytesReceivedEvent"
  typeChange {
    dtB4 {
      prmtv {
        name: "int"
      }
    }
    dtAftr {
      prmtv {
        name: "long"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "all"
    nameaftr: "all"
    classb4: "pl.softech.gw.download.BytesReceivedEvent"
    classAftr: "pl.softech.gw.download.BytesReceivedEvent"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "pl.softech.gw.download.BytesReceivedEvent"
  classesB4: "pl.softech.gw.download.BytesReceivedEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "pl.softech.gw.download.ResourceDownloader"
  classesB4: "pl.softech.gw.download.ResourceDownloader"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "httpGet"
    classb4: "pl.softech.gw.download.ResourceDownloader"
    classAftr: "pl.softech.gw.download.ResourceDownloader"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "pl.softech.gw.download.ResourceDownloader"
  classesB4: "pl.softech.gw.download.ResourceDownloader"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "pl.softech.gw.download.ResourceDownloader"
  classesB4: "pl.softech.gw.download.ResourceDownloader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "int"
      typeOfType: Internal
    }
  }
  aftr {
    prmtv {
      name: "long"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            prmtv {
              name: "int"
              typeOfType: Internal
            }
          }
          aftr {
            prmtv {
              name: "long"
              typeOfType: Internal
            }
          }
          chng {
            from: "int"
            to: "long"
          }
        }
      }
    }
    kind: Upd
    b4 {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
    aftr {
      prmtv {
        name: "long"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "int"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "long"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "int"
        typeOfType: Internal
      }
    }
  }
}
project: "gw-ide"
commit: "gw-ide"
tooBig: false

refactorings {
  classesAftr: "org.pentaho.pms.schema.security.SecurityService"
  classesB4: "org.pentaho.pms.schema.security.SecurityService"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.pms.schema.security.SecurityService"
    classAftr: "org.pentaho.pms.schema.security.SecurityService"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.pms.schema.security.SecurityService"
  classesB4: "org.pentaho.pms.schema.security.SecurityService"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "pentaho-metadata"
commit: "pentaho-metadata"
tooBig: false

refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "CloseableHttpClient"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpClient"
    nameaftr: "httpClient"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createGetMethod"
    nameaftr: "createGetRequest"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpMethod"
    nameaftr: "httpRequest"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "PostMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpPost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpMethod"
    nameaftr: "httpRequest"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpUriRequest"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpMethod"
    nameaftr: "httpRequest"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "String"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "httpMethod"
    nameaftr: "responseBody"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpRequestBase"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "httpMethod"
    nameaftr: "httpRequest"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getRequest"
    classb4: "org.craftercms.engine.http.impl.HttpProxyImpl"
    classAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "org.craftercms.engine.http.impl.HttpProxyImpl"
  classesB4: "org.craftercms.engine.http.impl.HttpProxyImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpClient"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.CloseableHttpClient"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpClient"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.CloseableHttpClient"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "HttpClient"
            to: "org.apache.http.impl.client.CloseableHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpClient"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.CloseableHttpClient"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpClient"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.CloseableHttpClient"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpClient"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpMethod"
    }
  }
  aftr {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpMethod"
            }
          }
          aftr {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpMethod"
            to: "java.lang.String"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    aftr {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.PostMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpPost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.PostMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpPost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.PostMethod"
            to: "org.apache.http.client.methods.HttpPost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpPost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.PostMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpPost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.PostMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpMethod"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpUriRequest"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpMethod"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpUriRequest"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpMethod"
            to: "org.apache.http.client.methods.HttpUriRequest"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpUriRequest"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpUriRequest"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "HttpMethod"
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpRequestBase"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "HttpMethod"
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpRequestBase"
              typeOfType: Jdk
            }
          }
          chng {
            from: "HttpMethod"
            to: "org.apache.http.client.methods.HttpRequestBase"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpRequestBase"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "HttpMethod"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpRequestBase"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "HttpMethod"
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "engine"
commit: "engine"
tooBig: false

refactorings {
  classesAftr: "org.apache.camel.component.lumberjack.io.LumberjackFrameDecoder"
  classesB4: "org.apache.camel.component.lumberjack.io.LumberjackFrameDecoder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "camel"
commit: "camel"
tooBig: false

refactorings {
  classesAftr: "org.jdbi.v3.BeanMapperTest"
  classesB4: "org.jdbi.v3.BeanMapperTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.FieldMapperTest"
  classesB4: "org.jdbi.v3.FieldMapperTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.TestClasspathStatementLocator"
  classesB4: "org.jdbi.v3.TestClasspathStatementLocator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.TestPlugins"
  classesB4: "org.jdbi.v3.TestPlugins"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.TestTransactionsAutoCommit"
  classesB4: "org.jdbi.v3.TestTransactionsAutoCommit"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject"
  classesB4: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.Spiffy"
  classesB4: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.Spiffy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.TransactionStuff"
  classesB4: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.TransactionStuff"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.ExternalSql"
  classesB4: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.ExternalSql"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.CrashingMapper"
  classesB4: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.CrashingMapper"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.HandleTracker"
  classesB4: "org.jdbi.v3.sqlobject.TestOnDemandSqlObject.HandleTracker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "jdbi"
commit: "jdbi"
tooBig: false

refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "entries"
    nameaftr: "entries"
    classb4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "entries"
    nameaftr: "entries"
    classb4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "entries"
    nameaftr: "entries"
    classb4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  typeChange {
    dtB4 {
      simpleType {
        name: "Entry"
      }
    }
    dtAftr {
      simpleType {
        name: "Record"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "entry"
    nameaftr: "record"
    classb4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.UpdateTrackerWebserviceLib"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystem"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  typeChange {
    dtB4 {
      simpleType {
        name: "String"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "entryPid"
    nameaftr: "records"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.HibernateUtils"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.HibernateUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  typeChange {
    dtB4 {
      simpleType {
        name: "Date"
      }
    }
    dtAftr {
      simpleType {
        name: "Timestamp"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "date"
    nameaftr: "date"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  refactoringType: "RENAME_METHOD"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  typeChange {
    dtB4 {
      simpleType {
        name: "Date"
      }
    }
    dtAftr {
      simpleType {
        name: "Timestamp"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "date"
    nameaftr: "date"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  refactoringType: "INLINE_OPERATION"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  refactoringType: "RENAME_VARIABLE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerBackend"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStore"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStore"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "lookup"
    nameaftr: "lookup"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStore"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStore"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStore"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStore"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "lookup"
    nameaftr: "lookup"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "entries"
    nameaftr: "entries"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystemTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystemTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "results"
    nameaftr: "results"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystemTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystemTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystemTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.UpdateTrackingSystemTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list2"
    nameaftr: "list2"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list3"
    nameaftr: "list3"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list2"
    nameaftr: "list2"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "inactive"
    nameaftr: "inactive"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "deleted"
    nameaftr: "deleted"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "inactive"
    nameaftr: "inactive"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "deleted"
    nameaftr: "deleted"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Entry"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Record"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "list"
    nameaftr: "list"
    classb4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
    classAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.UpdateTrackerPersistentStoreTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "MOVE_ATTRIBUTE"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "MOVE_OPERATION"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "MOVE_OPERATION"
}
refactorings {
  classesAftr: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
  classesB4: "dk.statsbiblioteket.doms.updatetracker.improved.database.DomsObject"
  refactoringType: "MOVE_OPERATION"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
                  to: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
              typeOfType: Internal
            }
          }
          chng {
            from: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
            to: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Entry"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.util.Date"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "java.sql.Timestamp"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.util.Date"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.sql.Timestamp"
              typeOfType: Jdk
            }
          }
          chng {
            from: "java.util.Date"
            to: "java.sql.Timestamp"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.util.Date"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "java.sql.Timestamp"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.Date"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.sql.Timestamp"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.util.Date"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.lang.String"
      typeOfType: Jdk
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Set"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Set"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.Set"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "dk.statsbiblioteket.doms.updatetracker.improved.database.Record"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.String"
        typeOfType: Jdk
      }
    }
  }
}
project: "doms-update-tracker"
commit: "doms-update-tracker"
tooBig: false

refactorings {
  classesAftr: "org.pentaho.runtime.test.network.impl.GatewayConnectivityTestImpl"
  classesB4: "org.pentaho.runtime.test.network.impl.GatewayConnectivityTestImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.runtime.test.network.impl.GatewayConnectivityTestImplTest"
  classesB4: "org.pentaho.runtime.test.network.impl.GatewayConnectivityTestImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "method"
    nameaftr: "method"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.HttpClientFactory"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.HttpClientFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.GetMethodFactory"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.GetMethodFactory"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "create"
    nameaftr: "create"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.GetMethodFactory"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.GetMethodFactory"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.GetMethodFactory"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInput.GetMethodFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputMetaTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputMetaTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "getMethod"
    nameaftr: "getMethod"
    classb4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
    classAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  classesB4: "org.pentaho.di.trans.steps.couchdbinput.CouchDbInputTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
project: "big-data-plugin"
commit: "big-data-plugin"
tooBig: false

refactorings {
  classesAftr: "org.jboss.elasticsearch.river.sysinfo.SourceClientREST"
  classesB4: "org.jboss.elasticsearch.river.sysinfo.SourceClientREST"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jboss.elasticsearch.river.sysinfo.SourceClientRESTTest"
  classesB4: "org.jboss.elasticsearch.river.sysinfo.SourceClientRESTTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Answer"
          }
        }
        params {
          simpleType {
            name: "Integer"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Answer"
          }
        }
        params {
          simpleType {
            name: "HttpResponse"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "prepareOKAnswerWithAssertions"
    nameaftr: "prepareOKAnswerWithAssertions"
    classb4: "org.jboss.elasticsearch.river.sysinfo.SourceClientRESTTest"
    classAftr: "org.jboss.elasticsearch.river.sysinfo.SourceClientRESTTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "org.jboss.elasticsearch.river.sysinfo.SourceClientRESTTest"
  classesB4: "org.jboss.elasticsearch.river.sysinfo.SourceClientRESTTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "org.mockito.stubbing.Answer"
          typeOfType: DontKnow
        }
      }
      params {
        simpleType {
          name: "java.lang.Integer"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "org.mockito.stubbing.Answer"
          typeOfType: DontKnow
        }
      }
      params {
        simpleType {
          name: "org.apache.http.HttpResponse"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "java.lang.Integer"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "org.apache.http.HttpResponse"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "java.lang.Integer"
                  to: "org.apache.http.HttpResponse"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "java.lang.Integer"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.HttpResponse"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "org.mockito.stubbing.Answer"
            typeOfType: DontKnow
          }
        }
        params {
          simpleType {
            name: "java.lang.Integer"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "org.mockito.stubbing.Answer"
            typeOfType: DontKnow
          }
        }
        params {
          simpleType {
            name: "org.apache.http.HttpResponse"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Integer"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.HttpResponse"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Integer"
        typeOfType: Jdk
      }
    }
  }
}
project: "elasticsearch-river-sysinfo"
commit: "elasticsearch-river-sysinfo"
tooBig: false

refactorings {
  classesAftr: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  classesB4: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  classesB4: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOGGER"
    classb4: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
    classAftr: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  classesB4: "org.jasig.cas.client.authentication.AttributePrincipalImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.authentication.AuthenticationFilter"
  classesB4: "org.jasig.cas.client.authentication.AuthenticationFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.authentication.DefaultGatewayResolverImpl"
  classesB4: "org.jasig.cas.client.authentication.DefaultGatewayResolverImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.authentication.Saml11AuthenticationFilter"
  classesB4: "org.jasig.cas.client.authentication.Saml11AuthenticationFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.jaas.CasLoginModule"
  classesB4: "org.jasig.cas.client.jaas.CasLoginModule"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.jaas.CasLoginModule"
  classesB4: "org.jasig.cas.client.jaas.CasLoginModule"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "logger"
    classb4: "org.jasig.cas.client.jaas.CasLoginModule"
    classAftr: "org.jasig.cas.client.jaas.CasLoginModule"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.jaas.CasLoginModule"
  classesB4: "org.jasig.cas.client.jaas.CasLoginModule"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  classesB4: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  classesB4: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "logger"
    classb4: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
    classAftr: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  classesB4: "org.jasig.cas.client.proxy.Cas20ProxyRetriever"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"
  classesB4: "org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl.ProxyGrantingTicketHolder"
  classesB4: "org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl.ProxyGrantingTicketHolder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.proxy.ProxyRetriever"
  classesB4: "org.jasig.cas.client.proxy.ProxyRetriever"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  classesB4: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  classesB4: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "logger"
    classb4: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
    classAftr: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  classesB4: "org.jasig.cas.client.session.HashMapBackedSessionMappingStorage"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.session.SingleSignOutHandler"
  classesB4: "org.jasig.cas.client.session.SingleSignOutHandler"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.session.SingleSignOutHandler"
  classesB4: "org.jasig.cas.client.session.SingleSignOutHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "logger"
    classb4: "org.jasig.cas.client.session.SingleSignOutHandler"
    classAftr: "org.jasig.cas.client.session.SingleSignOutHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.session.SingleSignOutHandler"
  classesB4: "org.jasig.cas.client.session.SingleSignOutHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.util.AbstractCasFilter"
  classesB4: "org.jasig.cas.client.util.AbstractCasFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.util.AbstractConfigurationFilter"
  classesB4: "org.jasig.cas.client.util.AbstractConfigurationFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  classesB4: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  classesB4: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "logger"
    classb4: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
    classAftr: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  classesB4: "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "java-cas-client"
commit: "java-cas-client"
tooBig: false

refactorings {
  classesAftr: "com.timmattison.crypto.ecc.interfaces.ECCCurve"
  classesB4: "com.timmattison.crypto.ecc.interfaces.ECCCurve"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.timmattison.crypto.ecc.interfaces.ECCFieldElement"
  classesB4: "com.timmattison.crypto.ecc.interfaces.ECCFieldElement"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.timmattison.ecc.serialization.ECSerializationTests"
  classesB4: "com.timmattison.ecc.serialization.ECSerializationTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "brick-rope"
commit: "brick-rope"
tooBig: false

refactorings {
  classesAftr: "org.graylog2.restclient.lib.ApiClientImpl"
  classesB4: "org.graylog2.restclient.lib.ApiClientImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.lib.ApiClientImpl.ApiRequestBuilder"
  classesB4: "org.graylog2.restclient.lib.ApiClientImpl.ApiRequestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.SavedSearch"
  classesB4: "org.graylog2.restclient.models.SavedSearch"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.SavedSearch.Factory"
  classesB4: "org.graylog2.restclient.models.SavedSearch.Factory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.ApiRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.ApiRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.ChangePasswordRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.ChangePasswordRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.ChangeUserRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.ChangeUserRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.SystemJobTriggerRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.SystemJobTriggerRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.accounts.LdapSettingsRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.accounts.LdapSettingsRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.alarmcallbacks.CreateAlarmCallbackRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.alarmcallbacks.CreateAlarmCallbackRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.alerts.CreateAlertConditionRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.alerts.CreateAlertConditionRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.dashboards.AddWidgetRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.dashboards.AddWidgetRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.dashboards.CreateDashboardRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.dashboards.CreateDashboardRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.outputs.OutputLaunchRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.outputs.OutputLaunchRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.requests.streams.CreateStreamRequest"
  classesB4: "org.graylog2.restclient.models.api.requests.streams.CreateStreamRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.AvailableOutputSummary"
  classesB4: "org.graylog2.restclient.models.api.responses.AvailableOutputSummary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.HistogramResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.HistogramResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.MessageSummaryResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.MessageSummaryResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.SearchResultResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.SearchResultResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.SystemOverviewResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.SystemOverviewResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.accounts.LdapSettingsResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.accounts.LdapSettingsResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.metrics.MetricsListItem"
  classesB4: "org.graylog2.restclient.models.api.responses.metrics.MetricsListItem"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.system.InputTypeSummaryResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.system.InputTypeSummaryResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.responses.system.UserResponse"
  classesB4: "org.graylog2.restclient.models.api.responses.system.UserResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.restclient.models.api.results.DateHistogramResult"
  classesB4: "org.graylog2.restclient.models.api.results.DateHistogramResult"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "graylog2-server"
commit: "graylog2-server"
tooBig: false

refactorings {
  classesAftr: "org.graylog2.plugins.PluginInstaller"
  classesB4: "org.graylog2.plugins.PluginInstaller"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.rest.resources.count.CountResource"
  classesB4: "org.graylog2.rest.resources.count.CountResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.rest.resources.messages.MessageResource"
  classesB4: "org.graylog2.rest.resources.messages.MessageResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.rest.resources.search.SearchResource"
  classesB4: "org.graylog2.rest.resources.search.SearchResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.graylog2.rest.resources.system.SystemResource"
  classesB4: "org.graylog2.rest.resources.system.SystemResource"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "graylog2-server"
commit: "graylog2-server"
tooBig: false

refactorings {
  classesAftr: "com.norconex.commons.lang.config.ConfigurationUtil"
  classesB4: "com.norconex.commons.lang.config.ConfigurationUtil"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "RENAME_PARAMETER"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "ProxyHost"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpHost"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "proxyHost"
    nameaftr: "proxy"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "HttpClient"
      }
    }
    dtAftr {
      simpleType {
        name: "DefaultHttpClient"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "client"
    nameaftr: "client"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  typeChange {
    dtB4 {
      simpleType {
        name: "GetMethod"
      }
    }
    dtAftr {
      simpleType {
        name: "HttpGet"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "call"
    nameaftr: "call"
    classb4: "com.norconex.commons.lang.url.URLStreamer"
    classAftr: "com.norconex.commons.lang.url.URLStreamer"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "com.norconex.commons.lang.url.URLStreamer"
  classesB4: "com.norconex.commons.lang.url.URLStreamer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.ProxyHost"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.HttpHost"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.ProxyHost"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.HttpHost"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.ProxyHost"
            to: "org.apache.http.HttpHost"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.ProxyHost"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.HttpHost"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.ProxyHost"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.HttpHost"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.ProxyHost"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.methods.GetMethod"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.client.methods.HttpGet"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.methods.GetMethod"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.client.methods.HttpGet"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.methods.GetMethod"
            to: "org.apache.http.client.methods.HttpGet"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.client.methods.HttpGet"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.methods.GetMethod"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.client.methods.HttpGet"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.methods.GetMethod"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.httpclient.HttpClient"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "org.apache.http.impl.client.DefaultHttpClient"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.httpclient.HttpClient"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "org.apache.http.impl.client.DefaultHttpClient"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.apache.commons.httpclient.HttpClient"
            to: "org.apache.http.impl.client.DefaultHttpClient"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "org.apache.http.impl.client.DefaultHttpClient"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.apache.commons.httpclient.HttpClient"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.http.impl.client.DefaultHttpClient"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.httpclient.HttpClient"
        typeOfType: DontKnow
      }
    }
  }
}
project: "commons"
commit: "commons"
tooBig: false

refactorings {
  classesAftr: "org.owfs.jowfsclient.OwfsClient"
  classesB4: "org.owfs.jowfsclient.OwfsClient"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.OwfsClientFactory"
  classesB4: "org.owfs.jowfsclient.OwfsClientFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.internal.OwfsClientImpl"
  classesB4: "org.owfs.jowfsclient.internal.OwfsClientImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.internal.regularfs.OwfsClientRegularFs"
  classesB4: "org.owfs.jowfsclient.internal.regularfs.OwfsClientRegularFs"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.TestNGGroups"
  classesB4: "org.owfs.jowfsclient.TestNGGroups"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientDS2408InputTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientDS2408InputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.owfs.jowfsclient.integration.OwfsClientDS2408InputTest"
    classAftr: "org.owfs.jowfsclient.integration.OwfsClientDS2408InputTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientDS2408InputTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientDS2408InputTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientDS2408OutputTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientDS2408OutputTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.owfs.jowfsclient.integration.OwfsClientDS2408OutputTest"
    classAftr: "org.owfs.jowfsclient.integration.OwfsClientDS2408OutputTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientDS2408OutputTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientDS2408OutputTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
    classAftr: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  refactoringType: "EXTRACT_OPERATION"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientListingTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientTest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "log"
    nameaftr: "log"
    classb4: "org.owfs.jowfsclient.integration.OwfsClientTest"
    classAftr: "org.owfs.jowfsclient.integration.OwfsClientTest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.internal.HeaderTest"
  classesB4: "org.owfs.jowfsclient.internal.HeaderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.internal.OwfsClientThreadSafeImplTest"
  classesB4: "org.owfs.jowfsclient.internal.OwfsClientThreadSafeImplTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.internal.RequestPacketTest"
  classesB4: "org.owfs.jowfsclient.internal.RequestPacketTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientTest"
  refactoringType: "EXTRACT_AND_MOVE_OPERATION"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientTest"
  refactoringType: "EXTRACT_AND_MOVE_OPERATION"
}
refactorings {
  classesAftr: "org.owfs.jowfsclient.integration.OwfsClientTest"
  classesB4: "org.owfs.jowfsclient.integration.OwfsClientTest"
  refactoringType: "EXTRACT_AND_MOVE_OPERATION"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "jowfsclient"
commit: "jowfsclient"
tooBig: false

refactorings {
  classesAftr: "edu.uchicago.xrootd4j.AtlasAuthorizationHandler"
  classesB4: "edu.uchicago.xrootd4j.AtlasAuthorizationHandler"
  refactoringType: "RENAME_ATTRIBUTE"
}
refactorings {
  classesAftr: "edu.uchicago.xrootd4j.AtlasAuthorizationHandler"
  classesB4: "edu.uchicago.xrootd4j.AtlasAuthorizationHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
project: "plugins"
commit: "plugins"
tooBig: false

refactorings {
  classesAftr: "quickml.data.Instance"
  classesB4: "quickml.data.Instance"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.data.InstanceImpl"
  classesB4: "quickml.data.InstanceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "label"
    nameaftr: "label"
    classb4: "quickml.data.InstanceImpl"
    classAftr: "quickml.data.InstanceImpl"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.data.InstanceImpl"
  classesB4: "quickml.data.InstanceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getLabel"
    nameaftr: "getLabel"
    classb4: "quickml.data.InstanceImpl"
    classAftr: "quickml.data.InstanceImpl"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.data.InstanceImpl"
  classesB4: "quickml.data.InstanceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "label"
    nameaftr: "label"
    classb4: "quickml.data.InstanceImpl"
    classAftr: "quickml.data.InstanceImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.data.InstanceImpl"
  classesB4: "quickml.data.InstanceImpl"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "label"
    nameaftr: "label"
    classb4: "quickml.data.InstanceImpl"
    classAftr: "quickml.data.InstanceImpl"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.data.InstanceImpl"
  classesB4: "quickml.data.InstanceImpl"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.data.InstanceWithAttributesMap"
  classesB4: "quickml.data.InstanceWithAttributesMap"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.data.NegativeWeightsFilter"
  classesB4: "quickml.data.NegativeWeightsFilter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "filterNegativeWeights"
    nameaftr: "filterNegativeWeights"
    classb4: "quickml.data.NegativeWeightsFilter"
    classAftr: "quickml.data.NegativeWeightsFilter"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.data.NegativeWeightsFilter"
  classesB4: "quickml.data.NegativeWeightsFilter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.data.NegativeWeightsFilter"
    classAftr: "quickml.data.NegativeWeightsFilter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.data.NegativeWeightsFilter"
  classesB4: "quickml.data.NegativeWeightsFilter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Predicate"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Predicate"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predicate"
    nameaftr: "predicate"
    classb4: "quickml.data.NegativeWeightsFilter"
    classAftr: "quickml.data.NegativeWeightsFilter"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.data.NegativeWeightsFilter"
  classesB4: "quickml.data.NegativeWeightsFilter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.data.NegativeWeightsFilter"
    classAftr: "quickml.data.NegativeWeightsFilter"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.data.NegativeWeightsFilter"
  classesB4: "quickml.data.NegativeWeightsFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.experiments.TrainingDataGenerator2"
  classesB4: "quickml.experiments.TrainingDataGenerator2"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createTrainingData"
    nameaftr: "createTrainingData"
    classb4: "quickml.experiments.TrainingDataGenerator2"
    classAftr: "quickml.experiments.TrainingDataGenerator2"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.experiments.TrainingDataGenerator2"
  classesB4: "quickml.experiments.TrainingDataGenerator2"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.experiments.TrainingDataGenerator2"
    classAftr: "quickml.experiments.TrainingDataGenerator2"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.experiments.TrainingDataGenerator2"
  classesB4: "quickml.experiments.TrainingDataGenerator2"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.experiments.TrainingDataGenerator2"
    classAftr: "quickml.experiments.TrainingDataGenerator2"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.experiments.TrainingDataGenerator2"
  classesB4: "quickml.experiments.TrainingDataGenerator2"
  typeChange {
    dtB4 {
      prmtv {
        name: "double"
      }
    }
    dtAftr {
      simpleType {
        name: "Double"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "clickClassification"
    nameaftr: "clickClassification"
    classb4: "quickml.experiments.TrainingDataGenerator2"
    classAftr: "quickml.experiments.TrainingDataGenerator2"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.experiments.TrainingDataGenerator2"
  classesB4: "quickml.experiments.TrainingDataGenerator2"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.PredictiveModelBuilder"
  classesB4: "quickml.supervised.PredictiveModelBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.PredictiveModelBuilderFactory"
  classesB4: "quickml.supervised.PredictiveModelBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createLabelPredictionWeights"
    nameaftr: "createLabelPredictionWeights"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createLabelPredictionWeightsWithoutAttributes"
    nameaftr: "createLabelPredictionWeightsWithoutAttributes"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeight"
    nameaftr: "labelPredictionWeight"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeight"
    nameaftr: "labelPredictionWeight"
    classb4: "quickml.supervised.Utils"
    classAftr: "quickml.supervised.Utils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.Utils"
  classesB4: "quickml.supervised.Utils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trueTrainingSet"
    nameaftr: "trueTrainingSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "falseTrainingSet"
    nameaftr: "falseTrainingSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingSet"
    nameaftr: "trainingSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "generifiedTrainingData"
    nameaftr: "generifiedTrainingData"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trueTrainingSet"
    nameaftr: "trueTrainingSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "falseTrainingSet"
    nameaftr: "falseTrainingSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "supportingDataSet"
    nameaftr: "supportingDataSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "inSet"
    nameaftr: "inSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "outSet"
    nameaftr: "outSet"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.GreaterThanThresholdPredicate"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder.GreaterThanThresholdPredicate"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "input"
    nameaftr: "input"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder.GreaterThanThresholdPredicate"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.GreaterThanThresholdPredicate"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.GreaterThanThresholdPredicate"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder.GreaterThanThresholdPredicate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.LessThanEqualThresholdPredicate"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder.LessThanEqualThresholdPredicate"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "input"
    nameaftr: "input"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilder.LessThanEqualThresholdPredicate"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.LessThanEqualThresholdPredicate"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.LessThanEqualThresholdPredicate"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder.LessThanEqualThresholdPredicate"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilder.ScoreValuePair"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilder.ScoreValuePair"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderFactory"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Branch"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Predicate"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Predicate"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getInPredicate"
    nameaftr: "getInPredicate"
    classb4: "quickml.supervised.classifier.decisionTree.tree.Branch"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Branch"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Predicate"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Predicate"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getOutPredicate"
    nameaftr: "getOutPredicate"
    classb4: "quickml.supervised.classifier.decisionTree.tree.Branch"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Branch"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "input"
    nameaftr: "input"
    classb4: "quickml.supervised.classifier.decisionTree.tree.Branch"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Branch"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "input"
    nameaftr: "input"
    classb4: "quickml.supervised.classifier.decisionTree.tree.Branch"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Branch"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Branch"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.ClassificationCounter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Leaf"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Leaf"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.tree.Leaf"
    classAftr: "quickml.supervised.classifier.decisionTree.tree.Leaf"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.tree.Leaf"
  classesB4: "quickml.supervised.classifier.decisionTree.tree.Leaf"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "downsampledTrainingData"
    nameaftr: "downsampledTrainingData"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterator"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingDataIterator"
    nameaftr: "trainingDataIterator"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.RandomDroppingInstanceFilter"
  classesB4: "quickml.supervised.classifier.downsampling.RandomDroppingInstanceFilter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "Instance"
    nameaftr: "Instance"
    classb4: "quickml.supervised.classifier.downsampling.RandomDroppingInstanceFilter"
    classAftr: "quickml.supervised.classifier.downsampling.RandomDroppingInstanceFilter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.RandomDroppingInstanceFilter"
  classesB4: "quickml.supervised.classifier.downsampling.RandomDroppingInstanceFilter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
    classAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
    classAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
    classAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderFactory"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "splitTrainingData"
    nameaftr: "splitTrainingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "splitTrainingData"
    nameaftr: "splitTrainingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "allData"
    nameaftr: "allData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "cleanSupportingData"
    nameaftr: "cleanSupportingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "splitTrainingData"
    nameaftr: "splitTrainingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "ArrayList"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "splitTrainingData"
    nameaftr: "splitTrainingData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "allData"
    nameaftr: "allData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "splitData"
    nameaftr: "splitData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "crossData"
    nameaftr: "crossData"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "reweightTrainingData"
    nameaftr: "reweightTrainingData"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "sortedData"
    nameaftr: "sortedData"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "newData"
    nameaftr: "newData"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingDataList"
    nameaftr: "trainingDataList"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingDataList"
    nameaftr: "trainingDataList"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilderFactory1"
    nameaftr: "wrappedBuilderFactory1"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilderFactory2"
    nameaftr: "wrappedBuilderFactory2"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilderBuilder1"
    nameaftr: "wrappedBuilderBuilder1"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModelBuilder"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "Classifier"
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilderBuilder2"
    nameaftr: "wrappedBuilderBuilder2"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedModelBuilder1"
    nameaftr: "wrappedModelBuilder1"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedModelBuilder2"
    nameaftr: "wrappedModelBuilder2"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedModelBuilder1"
    nameaftr: "wrappedModelBuilder1"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "Classifier"
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedModelBuilder2"
    nameaftr: "wrappedModelBuilder2"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "stage1Data"
    nameaftr: "stage1Data"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "stage2Data"
    nameaftr: "stage2Data"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "validationData"
    nameaftr: "validationData"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "stage1Data"
    nameaftr: "stage1Data"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "stage2Data"
    nameaftr: "stage2Data"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "validationData"
    nameaftr: "validationData"
    classb4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
    classAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  classesB4: "quickml.supervised.classifier.twoStageModel.TwoStageModelBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.AttributesHashSplitter"
  classesB4: "quickml.supervised.crossValidation.AttributesHashSplitter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.AttributesHashSplitter"
    classAftr: "quickml.supervised.crossValidation.AttributesHashSplitter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.AttributesHashSplitter"
  classesB4: "quickml.supervised.crossValidation.AttributesHashSplitter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.ClassifierOutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.ClassifierOutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValLossFunction"
    nameaftr: "crossValLossFunction"
    classb4: "quickml.supervised.crossValidation.ClassifierOutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.ClassifierOutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.ClassifierOutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.ClassifierOutOfTimeCrossValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.ClassifierStationaryCrossValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.CrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createCrossValidator"
    nameaftr: "createCrossValidator"
    classb4: "quickml.supervised.crossValidation.CrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.CrossValidatorBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.CrossValidatorBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.LabelConverter"
  classesB4: "quickml.supervised.crossValidation.LabelConverter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "allTrainingData"
    nameaftr: "allTrainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "trainingDataToAddToPredictiveModel"
    nameaftr: "trainingDataToAddToPredictiveModel"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "validationSet"
    nameaftr: "validationSet"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "crossValLossFunction"
    nameaftr: "crossValLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "DateTimeExtractor"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "DateTimeExtractor"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "dateTimeExtractor"
    nameaftr: "dateTimeExtractor"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValLossFunction"
    nameaftr: "crossValLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rawTrainingData"
    nameaftr: "rawTrainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rawTrainingData"
    nameaftr: "rawTrainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "multiLossFunction"
    nameaftr: "multiLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAttributeImportances"
    nameaftr: "getAttributeImportances"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rawTrainingData"
    nameaftr: "rawTrainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rawTrainingData"
    nameaftr: "rawTrainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rawTrainingData"
    nameaftr: "rawTrainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "convertedValSet"
    nameaftr: "convertedValSet"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "convertedValSet"
    nameaftr: "convertedValSet"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "attributeToLossMap"
    nameaftr: "attributeToLossMap"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "multiLossFunction"
    nameaftr: "multiLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "multiLossFunction"
    nameaftr: "multiLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Comparator"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Comparator"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "comparator"
    nameaftr: "comparator"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "o1"
    nameaftr: "o1"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "o2"
    nameaftr: "o2"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator.TestDateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator.TestDateTimeExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator.TestDateTimeExtractor"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator.TestDateTimeExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidator.TestDateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidator.TestDateTimeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "crossValLossFunction"
    nameaftr: "crossValLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createCrossValidator"
    nameaftr: "createCrossValidator"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValLossFunction"
    nameaftr: "crossValLossFunction"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "allTrainingData"
    nameaftr: "allTrainingData"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "allTrainingData"
    nameaftr: "allTrainingData"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "multiLossFunction"
    nameaftr: "multiLossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAttributeImportances"
    nameaftr: "getAttributeImportances"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "allTrainingData"
    nameaftr: "allTrainingData"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "data"
    nameaftr: "data"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "attributeToLossMap"
    nameaftr: "attributeToLossMap"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "multiLossFunction"
    nameaftr: "multiLossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "multiLossFunction"
    nameaftr: "multiLossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "training"
    nameaftr: "training"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "R"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "validation"
    nameaftr: "validation"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidator.DataSplit"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "createCrossValidator"
    nameaftr: "createCrossValidator"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
    classAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  classesB4: "quickml.supervised.crossValidation.StationaryCrossValidatorBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierRMSECrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierRMSECrossValLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierRMSECrossValLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierRMSECrossValLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierRMSECrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierRMSECrossValLossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "label"
    nameaftr: "label"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getLabel"
    nameaftr: "getLabel"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "label"
    nameaftr: "label"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedLossFunction"
    nameaftr: "wrappedLossFunction"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedLossFunction"
    nameaftr: "wrappedLossFunction"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedLossFunction"
    nameaftr: "wrappedLossFunction"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "correctLabelPredictionWeights"
    nameaftr: "correctLabelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "uncorrectedLabelPredictionsWeights"
    nameaftr: "uncorrectedLabelPredictionsWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "correctedLabelPredictionWeights"
    nameaftr: "correctedLabelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getCorrectedLabelPredictionWeight"
    nameaftr: "getCorrectedLabelPredictionWeight"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeight"
    nameaftr: "labelPredictionWeight"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.NegativeInstanceCorrectionFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "mergeByBestLosses"
    nameaftr: "mergeByBestLosses"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "MultiLossFunctionWithModelConfigurations"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "other"
    nameaftr: "other"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "primaryLossFunction"
    nameaftr: "primaryLossFunction"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValLossFunction"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "lossFunction"
    nameaftr: "lossFunction"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.NonWeightedAUCCrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.NonWeightedAUCCrossValLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.NonWeightedAUCCrossValLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.NonWeightedAUCCrossValLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.NonWeightedAUCCrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.NonWeightedAUCCrossValLossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.OnlineClassifierCVLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.OnlineClassifierCVLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.OnlineClassifierCVLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.OnlineClassifierCVLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.OnlineClassifierCVLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.OnlineClassifierCVLossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.RealValuedFunctionMSELossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.RealValuedFunctionMSELossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Double"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "Double"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.RealValuedFunctionMSELossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.RealValuedFunctionMSELossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.RealValuedFunctionMSELossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.RealValuedFunctionMSELossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.SingleVariableRealValuedFunctionMSECVLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.SingleVariableRealValuedFunctionMSECVLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Double"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "Double"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.SingleVariableRealValuedFunctionMSECVLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.SingleVariableRealValuedFunctionMSECVLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.SingleVariableRealValuedFunctionMSECVLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.SingleVariableRealValuedFunctionMSECVLossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction.AUCPoint"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction.AUCPoint"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction.AUCData"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunction.AUCData"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.MapDateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.MapDateTimeExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.dateTimeExtractors.MapDateTimeExtractor"
    classAftr: "quickml.supervised.crossValidation.dateTimeExtractors.MapDateTimeExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.MapDateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.MapDateTimeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.SimpleDateFormatExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.SimpleDateFormatExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.dateTimeExtractors.SimpleDateFormatExtractor"
    classAftr: "quickml.supervised.crossValidation.dateTimeExtractors.SimpleDateFormatExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.SimpleDateFormatExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.SimpleDateFormatExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.TestDateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.TestDateTimeExtractor"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.dateTimeExtractors.TestDateTimeExtractor"
    classAftr: "quickml.supervised.crossValidation.dateTimeExtractors.TestDateTimeExtractor"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.dateTimeExtractors.TestDateTimeExtractor"
  classesB4: "quickml.supervised.crossValidation.dateTimeExtractors.TestDateTimeExtractor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.AttributesEnrichStrategy"
  classesB4: "quickml.supervised.featureEngineering.AttributesEnrichStrategy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilder"
    nameaftr: "wrappedBuilder"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "enrichedTrainingData"
    nameaftr: "enrichedTrainingData"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "PredictiveModel"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "wrappedBuilderBuilder"
    nameaftr: "wrappedBuilderBuilder"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.InstanceEnricher"
  classesB4: "quickml.supervised.featureEngineering.InstanceEnricher"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "apply"
    nameaftr: "apply"
    classb4: "quickml.supervised.featureEngineering.InstanceEnricher"
    classAftr: "quickml.supervised.featureEngineering.InstanceEnricher"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.InstanceEnricher"
  classesB4: "quickml.supervised.featureEngineering.InstanceEnricher"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.featureEngineering.InstanceEnricher"
    classAftr: "quickml.supervised.featureEngineering.InstanceEnricher"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.InstanceEnricher"
  classesB4: "quickml.supervised.featureEngineering.InstanceEnricher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.attributeCombiner.AttributeCombiningEnrichStrategy"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.attributeCombiner.AttributeCombiningEnrichStrategy"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.enrichStrategies.attributeCombiner.AttributeCombiningEnrichStrategy"
    classAftr: "quickml.supervised.featureEngineering.enrichStrategies.attributeCombiner.AttributeCombiningEnrichStrategy"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.attributeCombiner.AttributeCombiningEnrichStrategy"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.attributeCombiner.AttributeCombiningEnrichStrategy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy"
    classAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy.ProbCounter"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategy.ProbCounter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "overallBestAttributesWithLosses"
    nameaftr: "overallBestAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bestNAttributesWithLosses"
    nameaftr: "bestNAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidatorBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidatorBuilder"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValidatorBuilder"
    nameaftr: "crossValidatorBuilder"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValLossFunctionMap"
    nameaftr: "crossValLossFunctionMap"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "updateAttributesUsedInTrainingAndBestAttributes"
    nameaftr: "updateAttributesUsedInTrainingAndBestAttributes"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "attributesWithLosses"
    nameaftr: "attributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "crossValidator"
    nameaftr: "crossValidator"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "overallBestAttributesWithLosses"
    nameaftr: "overallBestAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Optional"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Map"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Optional"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Map"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
                params {
                  simpleType {
                    name: "PredictionMap"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "bestNAttributesWithLosses"
    nameaftr: "bestNAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "overallBestAttributesWithLosses"
    nameaftr: "overallBestAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "overallBestAttributesWithLosses"
    nameaftr: "overallBestAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "bestNAttributesWithLosses"
    nameaftr: "bestNAttributesWithLosses"
    classb4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
    classAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  classesB4: "quickml.supervised.inspection.AttributeImportanceFinder.AttributeImportanceFinderSummary"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeWithLossComparator"
  classesB4: "quickml.supervised.inspection.AttributeWithLossComparator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Pair"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Pair"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "o1"
    nameaftr: "o1"
    classb4: "quickml.supervised.inspection.AttributeWithLossComparator"
    classAftr: "quickml.supervised.inspection.AttributeWithLossComparator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeWithLossComparator"
  classesB4: "quickml.supervised.inspection.AttributeWithLossComparator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Pair"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Pair"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "MultiLossFunctionWithModelConfigurations"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "o2"
    nameaftr: "o2"
    classb4: "quickml.supervised.inspection.AttributeWithLossComparator"
    classAftr: "quickml.supervised.inspection.AttributeWithLossComparator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.AttributeWithLossComparator"
  classesB4: "quickml.supervised.inspection.AttributeWithLossComparator"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSampler"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSampler"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSampler"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSampler"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSampler"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSampler"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSampler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSampler"
    classAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSampler"
  classesB4: "quickml.supervised.inspection.NumericDistributionSampler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "crossValidator"
    nameaftr: "crossValidator"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValidator"
    nameaftr: "crossValidator"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValidator"
    nameaftr: "crossValidator"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "P"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "crossValidator"
    nameaftr: "crossValidator"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer.ObjectWithLoss"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer.ObjectWithLoss"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.FixedOrderRecommender"
  classesB4: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.FixedOrderRecommender"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "Object"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "values"
    nameaftr: "values"
    classb4: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.FixedOrderRecommender"
    classAftr: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.FixedOrderRecommender"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.FixedOrderRecommender"
  classesB4: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.FixedOrderRecommender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.MonotonicConvergenceRecommender"
  classesB4: "quickml.supervised.predictiveModelOptimizer.fieldValueRecommenders.MonotonicConvergenceRecommender"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  classesB4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                      }
                    }
                    dim: 1
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                      }
                    }
                    dim: 1
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
    classAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  classesB4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                      }
                    }
                    dim: 1
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                      }
                    }
                    dim: 1
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
    classAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  classesB4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                      }
                    }
                    dim: 1
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                      }
                    }
                    dim: 1
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
    classAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  classesB4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilderFactory"
  classesB4: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilderFactory"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "readCsv"
    nameaftr: "readCsv"
    classb4: "quickml.utlities.CSVToInstanceReader"
    classAftr: "quickml.utlities.CSVToInstanceReader"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "readCsvFromReader"
    nameaftr: "readCsvFromReader"
    classb4: "quickml.utlities.CSVToInstanceReader"
    classAftr: "quickml.utlities.CSVToInstanceReader"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getInstancesFromReader"
    nameaftr: "getInstancesFromReader"
    classb4: "quickml.utlities.CSVToInstanceReader"
    classAftr: "quickml.utlities.CSVToInstanceReader"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      simpleType {
        name: "InstanceImpl"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "instanceConverter"
    nameaftr: "instanceConverter"
    classb4: "quickml.utlities.CSVToInstanceReader"
    classAftr: "quickml.utlities.CSVToInstanceReader"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.utlities.CSVToInstanceReader"
    classAftr: "quickml.utlities.CSVToInstanceReader"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.utlities.CSVToInstanceReader"
    classAftr: "quickml.utlities.CSVToInstanceReader"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.CSVToInstanceReader"
  classesB4: "quickml.utlities.CSVToInstanceReader"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.utlities.InstancesToCsvWriter"
  classesB4: "quickml.utlities.InstancesToCsvWriter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.utlities.InstancesToCsvWriter"
    classAftr: "quickml.utlities.InstancesToCsvWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.InstancesToCsvWriter"
  classesB4: "quickml.utlities.InstancesToCsvWriter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.utlities.InstancesToCsvWriter"
    classAftr: "quickml.utlities.InstancesToCsvWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.InstancesToCsvWriter"
  classesB4: "quickml.utlities.InstancesToCsvWriter"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.utlities.InstancesToCsvWriter"
    classAftr: "quickml.utlities.InstancesToCsvWriter"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.utlities.InstancesToCsvWriter"
  classesB4: "quickml.utlities.InstancesToCsvWriter"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "loadDiabetesDataset"
    nameaftr: "loadDiabetesDataset"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "loadIrisDataset"
    nameaftr: "loadIrisDataset"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "loadMoboDataset"
    nameaftr: "loadMoboDataset"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "diaInstances"
    nameaftr: "diaInstances"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "moboInstances"
    nameaftr: "moboInstances"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.Benchmarks"
    classAftr: "quickml.Benchmarks"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.Benchmarks"
  classesB4: "quickml.Benchmarks"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.PredictiveAccuracyTests"
  classesB4: "quickml.PredictiveAccuracyTests"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "irisDataset"
    nameaftr: "irisDataset"
    classb4: "quickml.PredictiveAccuracyTests"
    classAftr: "quickml.PredictiveAccuracyTests"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.PredictiveAccuracyTests"
  classesB4: "quickml.PredictiveAccuracyTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.ReadMeExample"
  classesB4: "quickml.ReadMeExample"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.ReadMeExample"
    classAftr: "quickml.ReadMeExample"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.ReadMeExample"
  classesB4: "quickml.ReadMeExample"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.AdvertisingInstances"
  classesB4: "quickml.supervised.AdvertisingInstances"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAdvertisingInstances"
    nameaftr: "getAdvertisingInstances"
    classb4: "quickml.supervised.AdvertisingInstances"
    classAftr: "quickml.supervised.AdvertisingInstances"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.AdvertisingInstances"
  classesB4: "quickml.supervised.AdvertisingInstances"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "advertisingInstances"
    nameaftr: "advertisingInstances"
    classb4: "quickml.supervised.AdvertisingInstances"
    classAftr: "quickml.supervised.AdvertisingInstances"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.AdvertisingInstances"
  classesB4: "quickml.supervised.AdvertisingInstances"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.AdvertisingInstancesTest"
  classesB4: "quickml.supervised.AdvertisingInstancesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.AdvertisingInstancesTest"
    classAftr: "quickml.supervised.AdvertisingInstancesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.AdvertisingInstancesTest"
  classesB4: "quickml.supervised.AdvertisingInstancesTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "lastInstance"
    nameaftr: "lastInstance"
    classb4: "quickml.supervised.AdvertisingInstancesTest"
    classAftr: "quickml.supervised.AdvertisingInstancesTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.AdvertisingInstancesTest"
  classesB4: "quickml.supervised.AdvertisingInstancesTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  classesB4: "quickml.supervised.classifier.TreeBuilderTestUtils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getInstances"
    nameaftr: "getInstances"
    classb4: "quickml.supervised.classifier.TreeBuilderTestUtils"
    classAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  classesB4: "quickml.supervised.classifier.TreeBuilderTestUtils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getIntegerInstances"
    nameaftr: "getIntegerInstances"
    classb4: "quickml.supervised.classifier.TreeBuilderTestUtils"
    classAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  classesB4: "quickml.supervised.classifier.TreeBuilderTestUtils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.TreeBuilderTestUtils"
    classAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  classesB4: "quickml.supervised.classifier.TreeBuilderTestUtils"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.TreeBuilderTestUtils"
    classAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.TreeBuilderTestUtils"
  classesB4: "quickml.supervised.classifier.TreeBuilderTestUtils"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Set"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instancesTrain"
    nameaftr: "instancesTrain"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instancesTest"
    nameaftr: "instancesTest"
    classb4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
    classAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  classesB4: "quickml.supervised.classifier.decisionTree.TreeBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest.simpleTest.thenAnswer"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest.simpleTest.thenAnswer"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest.simpleTest.thenAnswer"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest.simpleTest.thenAnswer"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "data"
    nameaftr: "data"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "newInstances"
    nameaftr: "newInstances"
    classb4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
    classAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest.SamePredictionPredictiveModel"
  classesB4: "quickml.supervised.classifier.downsampling.DownsamplingClassifierBuilderTest.SamePredictionPredictiveModel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
    classAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instancesTrain"
    nameaftr: "instancesTrain"
    classb4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
    classAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instancesTest"
    nameaftr: "instancesTest"
    classb4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
    classAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  classesB4: "quickml.supervised.classifier.randomForest.RandomForestBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest"
    classAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.splitOnAttribute.SplitOnAttributeClassifierBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
    classAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  classesB4: "quickml.supervised.classifier.temporallyWeightClassifier.TemporallyReweightedClassifierBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  classesB4: "quickml.supervised.crossValidation.CrossValidatorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getInstances"
    nameaftr: "getInstances"
    classb4: "quickml.supervised.crossValidation.CrossValidatorTest"
    classAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  classesB4: "quickml.supervised.crossValidation.CrossValidatorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.crossValidation.CrossValidatorTest"
    classAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  classesB4: "quickml.supervised.crossValidation.CrossValidatorTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.crossValidation.CrossValidatorTest"
    classAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidatorTest"
  classesB4: "quickml.supervised.crossValidation.CrossValidatorTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorTests"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorTests"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorTests"
    classAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorTests"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorTests"
  classesB4: "quickml.supervised.crossValidation.OutOfTimeCrossValidatorTests"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MSECrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MSECrossValLossFunctionTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.MSECrossValLossFunctionTest"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MSECrossValLossFunctionTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.MSECrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.MSECrossValLossFunctionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance"
    nameaftr: "instance"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance2"
    nameaftr: "instance2"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Instance"
          }
        }
        params {
          simpleType {
            name: "AttributesMap"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instance3"
    nameaftr: "instance3"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
            params {
              simpleType {
                name: "PredictionMap"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.WeightedAUCCrossValLossFunctionTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestAEBS"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestAEBS"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestAEBS"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestAEBS"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestAEBS"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestAEBS"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPMBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPMBuilder"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPMBuilder"
    classAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPMBuilder"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPMBuilder"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPMBuilder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPM"
  classesB4: "quickml.supervised.featureEngineering.FeatureEngineeringPredictiveModelBuilderTest.TestPM"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategyTest"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategyTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategyTest"
    classAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategyTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategyTest"
  classesB4: "quickml.supervised.featureEngineering.enrichStrategies.probabilityInjector.ProbabilityEnrichStrategyTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getInstances"
    nameaftr: "getInstances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getNewInstances"
    nameaftr: "getNewInstances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.CategoricalDistributionSamplerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getInstances"
    nameaftr: "getInstances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getNewInstances"
    nameaftr: "getNewInstances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
    classAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  classesB4: "quickml.supervised.inspection.NumericDistributionSamplerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              simpleType {
                name: "AttributesMap"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          simpleType {
            name: "TrainingInstance"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "instances"
    nameaftr: "instances"
    classb4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest"
    classAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest"
  classesB4: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizerTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "setUp"
    nameaftr: "setUp"
    classb4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
    classAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
    classAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
    classAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "Double"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "CrossValidator"
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "Double"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "crossValidator"
    nameaftr: "crossValidator"
    classb4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
    classAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelOptimizer"
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "Double"
          }
        }
        params {
          simpleType {
            name: "RidgeLinearModel"
          }
        }
        params {
          simpleType {
            name: "RidgeLinearModelBuilder"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelOptimizer"
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "Double"
          }
        }
        params {
          simpleType {
            name: "RidgeLinearModel"
          }
        }
        params {
          simpleType {
            name: "RidgeLinearModelBuilder"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "predictiveModelOptimizer"
    nameaftr: "predictiveModelOptimizer"
    classb4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
    classAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Instance"
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                  }
                }
                dim: 1
              }
            }
            params {
              simpleType {
                name: "Serializable"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
    classAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  classesB4: "quickml.supervised.regressionModel.RidgeRegressionBuilderTest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "quickml.data.Instance"
  classesB4: "quickml.data.Instance"
  typeChange {
    dtB4 {
      simpleType {
        name: "Serializable"
      }
    }
    dtAftr {
      simpleType {
        name: "L"
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getLabel"
    nameaftr: "getLabel"
    classb4: "quickml.data.Instance"
    classAftr: "quickml.data.Instance"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilder"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilder"
    nameaftr: "predictiveModelBuilder"
    classb4: "quickml.supervised.crossValidation.CrossValidator"
    classAftr: "quickml.supervised.crossValidation.CrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "allTrainingData"
    nameaftr: "allTrainingData"
    classb4: "quickml.supervised.crossValidation.CrossValidator"
    classAftr: "quickml.supervised.crossValidation.CrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "Pair"
              }
            }
            params {
              simpleType {
                name: "String"
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "MultiLossFunctionWithModelConfigurations"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
                params {
                  simpleType {
                    name: "P"
                  }
                }
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getAttributeImportances"
    nameaftr: "getAttributeImportances"
    classb4: "quickml.supervised.crossValidation.CrossValidator"
    classAftr: "quickml.supervised.crossValidation.CrossValidator"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "PredictiveModelBuilderFactory"
          }
        }
        params {
          simpleType {
            name: "R"
          }
        }
        params {
          simpleType {
            name: "L"
          }
        }
        params {
          simpleType {
            name: "PM"
          }
        }
        params {
          simpleType {
            name: "PMB"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "predictiveModelBuilderFactory"
    nameaftr: "predictiveModelBuilderFactory"
    classb4: "quickml.supervised.crossValidation.CrossValidator"
    classAftr: "quickml.supervised.crossValidation.CrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "R"
                  }
                }
                params {
                  simpleType {
                    name: "L"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "rawTrainingData"
    nameaftr: "rawTrainingData"
    classb4: "quickml.supervised.crossValidation.CrossValidator"
    classAftr: "quickml.supervised.crossValidation.CrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.CrossValidator"
  classesB4: "quickml.supervised.crossValidation.CrossValidator"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Map"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "CrossValLossFunction"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "lossFunctions"
    nameaftr: "lossFunctions"
    classb4: "quickml.supervised.crossValidation.CrossValidator"
    classAftr: "quickml.supervised.crossValidation.CrossValidator"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "List"
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "LabelPredictionWeight"
              }
            }
            params {
              simpleType {
                name: "L"
              }
            }
            params {
              simpleType {
                name: "P"
              }
            }
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeights"
    nameaftr: "labelPredictionWeights"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_RETURN_TYPE"
    nameb4: "getCorrectedLabelPredictionWeight"
    nameaftr: "getCorrectedLabelPredictionWeight"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  }
  refactoringType: "CHANGE_RETURN_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  classesB4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "LabelPredictionWeight"
          }
        }
        params {
          simpleType {
            name: "Serializable"
          }
        }
        params {
          simpleType {
            name: "PredictionMap"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "labelPredictionWeight"
    nameaftr: "labelPredictionWeight"
    classb4: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
    classAftr: "quickml.supervised.crossValidation.crossValLossFunctions.LossFunctionCorrectedForDownsampling.CorrectionFunction"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
refactorings {
  classesAftr: "quickml.supervised.featureEngineering.AttributesEnrichStrategy"
  classesB4: "quickml.supervised.featureEngineering.AttributesEnrichStrategy"
  typeChange {
    dtB4 {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "Iterable"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "Instance"
                  }
                }
                params {
                  simpleType {
                    name: "AttributesMap"
                  }
                }
                params {
                  simpleType {
                    name: "Serializable"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    refactoringType: "CHANGE_PARAMETER_TYPE"
    nameb4: "trainingData"
    nameaftr: "trainingData"
    classb4: "quickml.supervised.featureEngineering.AttributesEnrichStrategy"
    classAftr: "quickml.supervised.featureEngineering.AttributesEnrichStrategy"
  }
  refactoringType: "CHANGE_PARAMETER_TYPE"
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PMB"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PMB"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "PM"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "PM"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param:2 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "PMB"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "PM"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "PMB"
                  to: "PM"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "PMB"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "PM"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PMB"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "PM"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PMB"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PMB"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PMB"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PMB"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PMB"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PMB"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "PM"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "PMB"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PMB"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "R"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "R"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "P"
                  to: "L"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                      aftr {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                      chng {
                        from: "quickml.data.PredictionMap"
                        to: "java.io.Serializable"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          kind: Repl
          b4 {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param:2 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                enh {
                  reuses {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  removed {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  removed {
                    simpleType {
                      name: "quickml.supervised.PredictiveModelBuilder"
                      typeOfType: Internal
                    }
                  }
                  removed {
                    wildCrd {
                      bound {
                        simpleType {
                          name: "quickml.supervised.classifier.Classifier"
                          typeOfType: Internal
                        }
                      }
                      supOrext: "super"
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.PredictiveModelBuilder"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      wildCrd {
                        bound {
                          simpleType {
                            name: "quickml.supervised.classifier.Classifier"
                            typeOfType: Internal
                          }
                        }
                        supOrext: "super"
                      }
                    }
                  }
                }
                aftr {
                  simpleType {
                    name: "quickml.supervised.classifier.Classifier"
                    typeOfType: Internal
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModelBuilder"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    wildCrd {
                      bound {
                        simpleType {
                          name: "quickml.supervised.classifier.Classifier"
                          typeOfType: Internal
                        }
                      }
                      supOrext: "super"
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              wildCrd {
                bound {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.PredictiveModelBuilder"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      wildCrd {
                        bound {
                          simpleType {
                            name: "quickml.supervised.classifier.Classifier"
                            typeOfType: Internal
                          }
                        }
                        supOrext: "super"
                      }
                    }
                  }
                }
                supOrext: "super"
              }
            }
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
              params {
                wildCrd {
                  bound {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModelBuilder"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        wildCrd {
                          bound {
                            simpleType {
                              name: "quickml.supervised.classifier.Classifier"
                              typeOfType: Internal
                            }
                          }
                          supOrext: "super"
                        }
                      }
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
              params {
                wildCrd {
                  bound {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModelBuilder"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                      params {
                        wildCrd {
                          bound {
                            simpleType {
                              name: "quickml.supervised.classifier.Classifier"
                              typeOfType: Internal
                            }
                          }
                          supOrext: "super"
                        }
                      }
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "quickml.supervised.classifier.Classifier"
                typeOfType: Internal
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModelBuilder"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "quickml.supervised.classifier.Classifier"
                        typeOfType: Internal
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "quickml.supervised.classifier.Classifier"
                typeOfType: Internal
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModelBuilder"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "quickml.supervised.classifier.Classifier"
                        typeOfType: Internal
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.supervised.classifier.Classifier"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
    nameSpaceRemoved {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceRemoved {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
    }
    nameSpaceRemoved {
      typeOfType: "Internal"
      dt {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
          params {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModelBuilder"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    wildCrd {
                      bound {
                        simpleType {
                          name: "quickml.supervised.classifier.Classifier"
                          typeOfType: Internal
                        }
                      }
                      supOrext: "super"
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
          params {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModelBuilder"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                  params {
                    wildCrd {
                      bound {
                        simpleType {
                          name: "quickml.supervised.classifier.Classifier"
                          typeOfType: Internal
                        }
                      }
                      supOrext: "super"
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      wildCrd {
        bound {
          simpleType {
            name: "quickml.supervised.classifier.Classifier"
            typeOfType: Internal
          }
        }
        supOrext: "super"
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.AttributesMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.supervised.PredictiveModelBuilder"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "quickml.supervised.classifier.Classifier"
                typeOfType: Internal
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModelBuilder"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  wildCrd {
                    bound {
                      simpleType {
                        name: "quickml.supervised.classifier.Classifier"
                        typeOfType: Internal
                      }
                    }
                    supOrext: "super"
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "com.google.common.base.Predicate"
          typeOfType: DontKnow
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "com.google.common.base.Predicate"
          typeOfType: DontKnow
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "com.google.common.base.Predicate"
            typeOfType: DontKnow
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "R"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "com.google.common.base.Predicate"
            typeOfType: DontKnow
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "R"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.dateTimeExtractors.DateTimeExtractor"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
      params {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
      params {
        wildCrd {
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          kind: Repl
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param:2 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                enh {
                  added {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModel"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                    }
                  }
                }
                kind: Enh
                b4 {
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.PredictiveModel"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                wildCrd {
                  bound {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModel"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                    }
                  }
                  supOrext: "super"
                }
              }
              params {
                wildCrd {
                  supOrext: "super"
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                wildCrd {
                  bound {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModel"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                    }
                  }
                  supOrext: "super"
                }
              }
              params {
                wildCrd {
                  supOrext: "super"
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModel"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModel"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModel"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModel"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          params {
            wildCrd {
              supOrext: "super"
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          params {
            wildCrd {
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      wildCrd {
        bound {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.PredictiveModel"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
        supOrext: "super"
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModel"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
        params {
          wildCrd {
            supOrext: "super"
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidator"
          typeOfType: Internal
        }
      }
      params {
        arryTyp {
          name {
            prmtv {
              name: "double"
              typeOfType: Internal
            }
          }
          dim: 1
        }
      }
      params {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidator"
          typeOfType: Internal
        }
      }
      params {
        arryTyp {
          name {
            prmtv {
              name: "double"
              typeOfType: Internal
            }
          }
          dim: 1
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "java.lang.Double"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "java.lang.Double"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidator"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
              params {
                simpleType {
                  name: "java.lang.Double"
                  typeOfType: Jdk
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidator"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "java.lang.Double"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidator"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidator"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Double"
        typeOfType: Jdk
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          kind: Repl
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                wildCrd {
                  bound {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModel"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                wildCrd {
                  bound {
                    paramType {
                      name {
                        simpleType {
                          name: "quickml.supervised.PredictiveModel"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.AttributesMap"
                          typeOfType: Internal
                        }
                      }
                      params {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModel"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModel"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.PredictiveModel"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      wildCrd {
        bound {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.PredictiveModel"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
        supOrext: "super"
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.PredictiveModel"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.ArrayList"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.ArrayList"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.ArrayList"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.ArrayList"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.data.Instance"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.data.Instance"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PMB"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilderFactory"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PMB"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "PM"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "PM"
                  to: "L"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param:2 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "PMB"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "PM"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "PMB"
                  to: "PM"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "PMB"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PM"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PMB"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilderFactory"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PM"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PMB"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PMB"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PMB"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PMB"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PMB"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilderFactory"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PMB"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "PM"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "PMB"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilderFactory"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PMB"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "quickml.data.PredictionMap"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "java.util.ArrayList"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "java.util.ArrayList"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "java.util.ArrayList"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "java.util.ArrayList"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "java.util.ArrayList"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "java.util.ArrayList"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "java.lang.Double"
                          typeOfType: Jdk
                        }
                      }
                      aftr {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                      chng {
                        from: "java.lang.Double"
                        to: "java.io.Serializable"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "java.lang.Double"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.lang.Double"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      simpleType {
                        name: "java.lang.Double"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.lang.Double"
                  typeOfType: Jdk
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "java.lang.Double"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.lang.Double"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
            params {
              simpleType {
                name: "java.lang.Double"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Double"
        typeOfType: Jdk
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Comparator"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Comparator"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Comparator"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "R"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Comparator"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "R"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "com.google.common.base.Optional"
          typeOfType: DontKnow
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "com.google.common.base.Optional"
          typeOfType: DontKnow
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param:1 "
              value {
                upd {
                  syntypchng {
                    key: "Param:0 "
                    value {
                      upd {
                        syntypchng {
                          key: "Name"
                          value {
                            kind: Chng
                            b4 {
                              simpleType {
                                name: "quickml.data.PredictionMap"
                                typeOfType: Internal
                              }
                            }
                            aftr {
                              simpleType {
                                name: "java.io.Serializable"
                                typeOfType: Jdk
                              }
                            }
                            chng {
                              from: "quickml.data.PredictionMap"
                              to: "java.io.Serializable"
                            }
                          }
                        }
                      }
                      kind: Upd
                      b4 {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                      aftr {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                    }
                  }
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.PredictionMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.PredictionMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.lang.String"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.lang.String"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "com.google.common.base.Optional"
            typeOfType: DontKnow
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.lang.String"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "com.google.common.base.Optional"
            typeOfType: DontKnow
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.lang.String"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "P"
                          typeOfType: TypeVariable
                        }
                      }
                      aftr {
                        simpleType {
                          name: "L"
                          typeOfType: TypeVariable
                        }
                      }
                      chng {
                        from: "P"
                        to: "L"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidator"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidator"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "P"
                  to: "L"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidator"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidator"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidator"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidator"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            arryTyp {
                              name {
                                prmtv {
                                  name: "double"
                                  typeOfType: Internal
                                }
                              }
                              dim: 1
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            arryTyp {
                              name {
                                prmtv {
                                  name: "double"
                                  typeOfType: Internal
                                }
                              }
                              dim: 1
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      arryTyp {
                        name {
                          prmtv {
                            name: "double"
                            typeOfType: Internal
                          }
                        }
                        dim: 1
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      arryTyp {
                        name {
                          prmtv {
                            name: "double"
                            typeOfType: Internal
                          }
                        }
                        dim: 1
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    arryTyp {
                      name {
                        prmtv {
                          name: "double"
                          typeOfType: Internal
                        }
                      }
                      dim: 1
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    arryTyp {
                      name {
                        prmtv {
                          name: "double"
                          typeOfType: Internal
                        }
                      }
                      dim: 1
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                        typeOfType: Internal
                      }
                    }
                    dim: 1
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  arryTyp {
                    name {
                      prmtv {
                        name: "double"
                        typeOfType: Internal
                      }
                    }
                    dim: 1
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          kind: Repl
          b4 {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                wildCrd {
                  bound {
                    simpleType {
                      name: "quickml.supervised.classifier.Classifier"
                      typeOfType: Internal
                    }
                  }
                  supOrext: "super"
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "quickml.supervised.classifier.Classifier"
                typeOfType: Internal
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "quickml.supervised.classifier.Classifier"
                typeOfType: Internal
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        wildCrd {
          bound {
            simpleType {
              name: "quickml.supervised.classifier.Classifier"
              typeOfType: Internal
            }
          }
          supOrext: "super"
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            wildCrd {
              bound {
                simpleType {
                  name: "quickml.supervised.classifier.Classifier"
                  typeOfType: Internal
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      wildCrd {
        bound {
          simpleType {
            name: "quickml.supervised.classifier.Classifier"
            typeOfType: Internal
          }
        }
        supOrext: "super"
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          wildCrd {
            bound {
              simpleType {
                name: "quickml.supervised.classifier.Classifier"
                typeOfType: Internal
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                      aftr {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                      chng {
                        from: "quickml.data.PredictionMap"
                        to: "java.io.Serializable"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.TrainingInstance"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          kind: Repl
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            simpleType {
              name: "quickml.TrainingInstance"
              typeOfType: Internal
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.TrainingInstance"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.TrainingInstance"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    prmtv {
      name: "double"
      typeOfType: Internal
    }
  }
  aftr {
    simpleType {
      name: "java.lang.Double"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      prmtv {
        name: "double"
        typeOfType: Internal
      }
    }
    aftr {
      simpleType {
        name: "java.lang.Double"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        prmtv {
          name: "double"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: true
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      prmtv {
        name: "double"
        typeOfType: Internal
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.data.Instance"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.data.Instance"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Iterator"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.AttributesMap"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.AttributesMap"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Iterator"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.AttributesMap"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "P"
                  to: "L"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "org.javatuples.Pair"
          typeOfType: DontKnow
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "org.javatuples.Pair"
          typeOfType: DontKnow
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "P"
                          typeOfType: TypeVariable
                        }
                      }
                      aftr {
                        simpleType {
                          name: "L"
                          typeOfType: TypeVariable
                        }
                      }
                      chng {
                        from: "P"
                        to: "L"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "org.javatuples.Pair"
            typeOfType: DontKnow
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "org.javatuples.Pair"
            typeOfType: DontKnow
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "quickml.data.PredictionMap"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidatorBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.data.Instance"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    simpleType {
      name: "quickml.data.InstanceImpl"
      typeOfType: Internal
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      simpleType {
        name: "quickml.data.InstanceImpl"
        typeOfType: Internal
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.InstanceImpl"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "org.javatuples.Pair"
              typeOfType: DontKnow
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "org.javatuples.Pair"
              typeOfType: DontKnow
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param:1 "
              value {
                upd {
                  syntypchng {
                    key: "Param:0 "
                    value {
                      upd {
                        syntypchng {
                          key: "Name"
                          value {
                            kind: Chng
                            b4 {
                              simpleType {
                                name: "P"
                                typeOfType: TypeVariable
                              }
                            }
                            aftr {
                              simpleType {
                                name: "L"
                                typeOfType: TypeVariable
                              }
                            }
                            chng {
                              from: "P"
                              to: "L"
                            }
                          }
                        }
                      }
                      kind: Upd
                      b4 {
                        simpleType {
                          name: "P"
                          typeOfType: TypeVariable
                        }
                      }
                      aftr {
                        simpleType {
                          name: "L"
                          typeOfType: TypeVariable
                        }
                      }
                    }
                  }
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "L"
                            typeOfType: TypeVariable
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "P"
                              typeOfType: TypeVariable
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "L"
                              typeOfType: TypeVariable
                            }
                          }
                          params {
                            simpleType {
                              name: "P"
                              typeOfType: TypeVariable
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "org.javatuples.Pair"
                  typeOfType: DontKnow
                }
              }
              params {
                simpleType {
                  name: "java.lang.String"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "P"
                      typeOfType: TypeVariable
                    }
                  }
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "org.javatuples.Pair"
                  typeOfType: DontKnow
                }
              }
              params {
                simpleType {
                  name: "java.lang.String"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                  params {
                    simpleType {
                      name: "P"
                      typeOfType: TypeVariable
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "org.javatuples.Pair"
                typeOfType: DontKnow
              }
            }
            params {
              simpleType {
                name: "java.lang.String"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "org.javatuples.Pair"
                typeOfType: DontKnow
              }
            }
            params {
              simpleType {
                name: "java.lang.String"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                params {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "L"
                            typeOfType: TypeVariable
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "R"
                              typeOfType: TypeVariable
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "R"
                              typeOfType: TypeVariable
                            }
                          }
                          params {
                            simpleType {
                              name: "L"
                              typeOfType: TypeVariable
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "R"
                      typeOfType: TypeVariable
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "R"
                      typeOfType: TypeVariable
                    }
                  }
                  params {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "R"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "R"
                    typeOfType: TypeVariable
                  }
                }
                params {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Map"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "P"
                          typeOfType: TypeVariable
                        }
                      }
                      aftr {
                        simpleType {
                          name: "L"
                          typeOfType: TypeVariable
                        }
                      }
                      chng {
                        from: "P"
                        to: "L"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Map"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      arryTyp {
                        name {
                          prmtv {
                            name: "double"
                            typeOfType: Internal
                          }
                        }
                        dim: 1
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      arryTyp {
                        name {
                          prmtv {
                            name: "double"
                            typeOfType: Internal
                          }
                        }
                        dim: 1
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                    typeOfType: Internal
                  }
                }
                dim: 1
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              arryTyp {
                name {
                  prmtv {
                    name: "double"
                    typeOfType: Internal
                  }
                }
                dim: 1
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                      aftr {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                      chng {
                        from: "quickml.data.PredictionMap"
                        to: "java.io.Serializable"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
            params {
              simpleType {
                name: "quickml.data.PredictionMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.ClassifierMSECrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.Set"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.Set"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.Set"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.Set"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param:0 "
              value {
                upd {
                  syntypchng {
                    key: "Name"
                    value {
                      kind: Chng
                      b4 {
                        simpleType {
                          name: "P"
                          typeOfType: TypeVariable
                        }
                      }
                      aftr {
                        simpleType {
                          name: "L"
                          typeOfType: TypeVariable
                        }
                      }
                      chng {
                        from: "P"
                        to: "L"
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "P"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
            params {
              simpleType {
                name: "P"
                typeOfType: TypeVariable
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.LabelPredictionWeight"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "org.javatuples.Pair"
              typeOfType: DontKnow
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "org.javatuples.Pair"
              typeOfType: DontKnow
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
          params {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param:1 "
              value {
                upd {
                  syntypchng {
                    key: "Param:0 "
                    value {
                      upd {
                        syntypchng {
                          key: "Name"
                          value {
                            kind: Chng
                            b4 {
                              simpleType {
                                name: "quickml.data.PredictionMap"
                                typeOfType: Internal
                              }
                            }
                            aftr {
                              simpleType {
                                name: "java.io.Serializable"
                                typeOfType: Jdk
                              }
                            }
                            chng {
                              from: "quickml.data.PredictionMap"
                              to: "java.io.Serializable"
                            }
                          }
                        }
                      }
                      kind: Upd
                      b4 {
                        simpleType {
                          name: "quickml.data.PredictionMap"
                          typeOfType: Internal
                        }
                      }
                      aftr {
                        simpleType {
                          name: "java.io.Serializable"
                          typeOfType: Jdk
                        }
                      }
                    }
                  }
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "java.io.Serializable"
                            typeOfType: Jdk
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.PredictionMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "java.io.Serializable"
                              typeOfType: Jdk
                            }
                          }
                          params {
                            simpleType {
                              name: "quickml.data.PredictionMap"
                              typeOfType: Internal
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.PredictionMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "org.javatuples.Pair"
                  typeOfType: DontKnow
                }
              }
              params {
                simpleType {
                  name: "java.lang.String"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "org.javatuples.Pair"
                  typeOfType: DontKnow
                }
              }
              params {
                simpleType {
                  name: "java.lang.String"
                  typeOfType: Jdk
                }
              }
              params {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                  params {
                    simpleType {
                      name: "quickml.data.PredictionMap"
                      typeOfType: Internal
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "org.javatuples.Pair"
                typeOfType: DontKnow
              }
            }
            params {
              simpleType {
                name: "java.lang.String"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "org.javatuples.Pair"
                typeOfType: DontKnow
              }
            }
            params {
              simpleType {
                name: "java.lang.String"
                typeOfType: Jdk
              }
            }
            params {
              paramType {
                name {
                  simpleType {
                    name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                params {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.MultiLossFunctionWithModelConfigurations"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "P"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "P"
                  to: "L"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "P"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "P"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "P"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "P"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "P"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.PredictiveModelBuilder"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "R"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
      params {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "PM"
                    typeOfType: TypeVariable
                  }
                }
                aftr {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
                chng {
                  from: "PM"
                  to: "L"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "L"
                typeOfType: TypeVariable
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PM"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.PredictiveModelBuilder"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "PM"
                  typeOfType: TypeVariable
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "L"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "PM"
          typeOfType: TypeVariable
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.PredictiveModelBuilder"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "PM"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "PM"
        typeOfType: TypeVariable
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.PredictiveModelBuilder"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
        params {
          simpleType {
            name: "PM"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "java.io.Serializable"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "L"
      typeOfType: TypeVariable
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
          chng {
            from: "java.io.Serializable"
            to: "L"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "java.io.Serializable"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "L"
        typeOfType: TypeVariable
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.io.Serializable"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
          typeOfType: Internal
        }
      }
      params {
        arryTyp {
          name {
            prmtv {
              name: "double"
              typeOfType: Internal
            }
          }
          dim: 1
        }
      }
      params {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
          typeOfType: Internal
        }
      }
      params {
        arryTyp {
          name {
            prmtv {
              name: "double"
              typeOfType: Internal
            }
          }
          dim: 1
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "java.lang.Double"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "java.lang.Double"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param:2 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.lang.Double"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
                  to: "java.lang.Double"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param:3 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
                    typeOfType: Internal
                  }
                }
                chng {
                  from: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
                  to: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
              typeOfType: Internal
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
              params {
                simpleType {
                  name: "java.lang.Double"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
                  typeOfType: Internal
                }
              }
              params {
                arryTyp {
                  name {
                    prmtv {
                      name: "double"
                      typeOfType: Internal
                    }
                  }
                  dim: 1
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "java.lang.Double"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Double"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
          typeOfType: Internal
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
              typeOfType: Internal
            }
          }
          params {
            arryTyp {
              name {
                prmtv {
                  name: "double"
                  typeOfType: Internal
                }
              }
              dim: 1
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.Double"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Double"
        typeOfType: Jdk
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.predictiveModelOptimizer.PredictiveModelOptimizer"
            typeOfType: Internal
          }
        }
        params {
          arryTyp {
            name {
              prmtv {
                name: "double"
                typeOfType: Internal
              }
            }
            dim: 1
          }
        }
        params {
          simpleType {
            name: "java.lang.Double"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModel"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.supervised.regressionModel.LinearRegression.RidgeLinearModelBuilder"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidator"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.CrossValidator"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.AttributesMap"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:1 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "quickml.data.PredictionMap"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidator"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.CrossValidator"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidator"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.CrossValidator"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.CrossValidator"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.Object"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "java.lang.Iterable"
                    typeOfType: Jdk
                  }
                }
                aftr {
                  simpleType {
                    name: "java.util.List"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "java.lang.Iterable"
                  to: "java.util.List"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "java.lang.Iterable"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "java.util.List"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.Object"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "java.lang.Iterable"
        typeOfType: Jdk
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.lang.Iterable"
          typeOfType: Jdk
        }
      }
      params {
        wildCrd {
          bound {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "R"
                  typeOfType: TypeVariable
                }
              }
              params {
                simpleType {
                  name: "L"
                  typeOfType: TypeVariable
                }
              }
            }
          }
          supOrext: "super"
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Bound"
              value {
                upd {
                  syntypchng {
                    key: "Param "
                    value {
                      enh {
                        added {
                          simpleType {
                            name: "L"
                            typeOfType: TypeVariable
                          }
                        }
                      }
                      kind: Enh
                      b4 {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "R"
                              typeOfType: TypeVariable
                            }
                          }
                        }
                      }
                      aftr {
                        paramType {
                          name {
                            simpleType {
                              name: "quickml.data.Instance"
                              typeOfType: Internal
                            }
                          }
                          params {
                            simpleType {
                              name: "R"
                              typeOfType: TypeVariable
                            }
                          }
                          params {
                            simpleType {
                              name: "L"
                              typeOfType: TypeVariable
                            }
                          }
                        }
                      }
                    }
                  }
                }
                kind: Upd
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "R"
                        typeOfType: TypeVariable
                      }
                    }
                    params {
                      simpleType {
                        name: "L"
                        typeOfType: TypeVariable
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "R"
                      typeOfType: TypeVariable
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
          aftr {
            wildCrd {
              bound {
                paramType {
                  name {
                    simpleType {
                      name: "quickml.data.Instance"
                      typeOfType: Internal
                    }
                  }
                  params {
                    simpleType {
                      name: "R"
                      typeOfType: TypeVariable
                    }
                  }
                  params {
                    simpleType {
                      name: "L"
                      typeOfType: TypeVariable
                    }
                  }
                }
              }
              supOrext: "super"
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "R"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.lang.Iterable"
            typeOfType: Jdk
          }
        }
        params {
          wildCrd {
            bound {
              paramType {
                name {
                  simpleType {
                    name: "quickml.data.Instance"
                    typeOfType: Internal
                  }
                }
                params {
                  simpleType {
                    name: "R"
                    typeOfType: TypeVariable
                  }
                }
                params {
                  simpleType {
                    name: "L"
                    typeOfType: TypeVariable
                  }
                }
              }
            }
            supOrext: "super"
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "R"
              typeOfType: TypeVariable
            }
          }
          params {
            simpleType {
              name: "L"
              typeOfType: TypeVariable
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "TypeVariable"
      dt {
        simpleType {
          name: "L"
          typeOfType: TypeVariable
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "R"
            typeOfType: TypeVariable
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
          typeOfType: Internal
        }
      }
      params {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Name"
              value {
                kind: Chng
                b4 {
                  simpleType {
                    name: "quickml.data.PredictionMap"
                    typeOfType: Internal
                  }
                }
                aftr {
                  simpleType {
                    name: "java.io.Serializable"
                    typeOfType: Jdk
                  }
                }
                chng {
                  from: "quickml.data.PredictionMap"
                  to: "java.io.Serializable"
                }
              }
            }
          }
          kind: Upd
          b4 {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
          aftr {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
      syntypchng {
        key: "Param "
        value {
          enh {
            added {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
          kind: Enh
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
              params {
                simpleType {
                  name: "quickml.data.PredictionMap"
                  typeOfType: Internal
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "java.io.Serializable"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        simpleType {
          name: "quickml.data.PredictionMap"
          typeOfType: Internal
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "quickml.data.PredictionMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "quickml.data.PredictionMap"
        typeOfType: Internal
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.supervised.crossValidation.crossValLossFunctions.CrossValLossFunction"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.PredictionMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "com.google.common.base.Predicate"
          typeOfType: DontKnow
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "com.google.common.base.Predicate"
          typeOfType: DontKnow
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "com.google.common.base.Predicate"
            typeOfType: DontKnow
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "com.google.common.base.Predicate"
            typeOfType: DontKnow
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.List"
          typeOfType: Jdk
        }
      }
      params {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Param:0 "
        value {
          upd {
            syntypchng {
              key: "Param "
              value {
                enh {
                  added {
                    simpleType {
                      name: "java.io.Serializable"
                      typeOfType: Jdk
                    }
                  }
                }
                kind: Enh
                b4 {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                  }
                }
                aftr {
                  paramType {
                    name {
                      simpleType {
                        name: "quickml.data.Instance"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "quickml.data.AttributesMap"
                        typeOfType: Internal
                      }
                    }
                    params {
                      simpleType {
                        name: "java.io.Serializable"
                        typeOfType: Jdk
                      }
                    }
                  }
                }
              }
            }
          }
          kind: Upd
          b4 {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
            }
          }
          aftr {
            paramType {
              name {
                simpleType {
                  name: "quickml.data.Instance"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "quickml.data.AttributesMap"
                  typeOfType: Internal
                }
              }
              params {
                simpleType {
                  name: "java.io.Serializable"
                  typeOfType: Jdk
                }
              }
            }
          }
        }
      }
    }
    kind: Upd
    b4 {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
          }
        }
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.List"
            typeOfType: Jdk
          }
        }
        params {
          paramType {
            name {
              simpleType {
                name: "quickml.data.Instance"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "quickml.data.AttributesMap"
                typeOfType: Internal
              }
            }
            params {
              simpleType {
                name: "java.io.Serializable"
                typeOfType: Jdk
              }
            }
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Internal"
      dt {
        paramType {
          name {
            simpleType {
              name: "quickml.data.Instance"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "quickml.data.AttributesMap"
              typeOfType: Internal
            }
          }
          params {
            simpleType {
              name: "java.io.Serializable"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
    nameSpaceAdded {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.io.Serializable"
          typeOfType: Jdk
        }
      }
    }
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      paramType {
        name {
          simpleType {
            name: "quickml.data.Instance"
            typeOfType: Internal
          }
        }
        params {
          simpleType {
            name: "quickml.data.AttributesMap"
            typeOfType: Internal
          }
        }
      }
    }
  }
}
project: "quickdt"
commit: "quickdt"
tooBig: false

refactorings {
  classesAftr: "org.craft.atom.io.AbstractIoHandler"
  classesB4: "org.craft.atom.io.AbstractIoHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.io.AbstractIoHandler"
    classAftr: "org.craft.atom.io.AbstractIoHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.io.AbstractIoHandler"
  classesB4: "org.craft.atom.io.AbstractIoHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.lock.Redis24DLock"
  classesB4: "org.craft.atom.lock.Redis24DLock"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.lock.Redis24DLock"
    classAftr: "org.craft.atom.lock.Redis24DLock"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.lock.Redis24DLock"
  classesB4: "org.craft.atom.lock.Redis24DLock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.lock.Redis26DLock"
  classesB4: "org.craft.atom.lock.Redis26DLock"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.lock.Redis26DLock"
    classAftr: "org.craft.atom.lock.Redis26DLock"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.lock.Redis26DLock"
  classesB4: "org.craft.atom.lock.Redis26DLock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.lock.ShardedRedis24DLock"
  classesB4: "org.craft.atom.lock.ShardedRedis24DLock"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.lock.ShardedRedis24DLock"
    classAftr: "org.craft.atom.lock.ShardedRedis24DLock"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.lock.ShardedRedis24DLock"
  classesB4: "org.craft.atom.lock.ShardedRedis24DLock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.lock.ShardedRedis26DLock"
  classesB4: "org.craft.atom.lock.ShardedRedis26DLock"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.lock.ShardedRedis26DLock"
    classAftr: "org.craft.atom.lock.ShardedRedis26DLock"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.lock.ShardedRedis26DLock"
  classesB4: "org.craft.atom.lock.ShardedRedis26DLock"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptor"
  classesB4: "org.craft.atom.nio.NioAcceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioAcceptor"
    classAftr: "org.craft.atom.nio.NioAcceptor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptor"
  classesB4: "org.craft.atom.nio.NioAcceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptor.AcceptThread"
  classesB4: "org.craft.atom.nio.NioAcceptor.AcceptThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioByteChannelEvent"
  classesB4: "org.craft.atom.nio.NioByteChannelEvent"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioByteChannelEvent"
    classAftr: "org.craft.atom.nio.NioByteChannelEvent"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioByteChannelEvent"
  classesB4: "org.craft.atom.nio.NioByteChannelEvent"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioChannelIdleTimer"
  classesB4: "org.craft.atom.nio.NioChannelIdleTimer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioChannelIdleTimer"
    classAftr: "org.craft.atom.nio.NioChannelIdleTimer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioChannelIdleTimer"
  classesB4: "org.craft.atom.nio.NioChannelIdleTimer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioChannelIdleTimer.NioChannelIdleListener"
  classesB4: "org.craft.atom.nio.NioChannelIdleTimer.NioChannelIdleListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioConnector"
  classesB4: "org.craft.atom.nio.NioConnector"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioConnector"
    classAftr: "org.craft.atom.nio.NioConnector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioConnector"
  classesB4: "org.craft.atom.nio.NioConnector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher"
  classesB4: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher"
    classAftr: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher"
  classesB4: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher.Worker"
  classesB4: "org.craft.atom.nio.NioOrderedThreadPoolChannelEventDispatcher.Worker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioProcessor"
  classesB4: "org.craft.atom.nio.NioProcessor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioProcessor"
    classAftr: "org.craft.atom.nio.NioProcessor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioProcessor"
  classesB4: "org.craft.atom.nio.NioProcessor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioProcessor.ProcessThread"
  classesB4: "org.craft.atom.nio.NioProcessor.ProcessThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.api.NioTcpAcceptor"
  classesB4: "org.craft.atom.nio.api.NioTcpAcceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.api.NioTcpAcceptor"
    classAftr: "org.craft.atom.nio.api.NioTcpAcceptor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.api.NioTcpAcceptor"
  classesB4: "org.craft.atom.nio.api.NioTcpAcceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.api.NioTcpConnector"
  classesB4: "org.craft.atom.nio.api.NioTcpConnector"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.api.NioTcpConnector"
    classAftr: "org.craft.atom.nio.api.NioTcpConnector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.api.NioTcpConnector"
  classesB4: "org.craft.atom.nio.api.NioTcpConnector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.api.NioTcpConnector.ConnectThread"
  classesB4: "org.craft.atom.nio.api.NioTcpConnector.ConnectThread"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.api.NioTcpConnector.ConnectionCall"
  classesB4: "org.craft.atom.nio.api.NioTcpConnector.ConnectionCall"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.spi.AbstractNioChannelEventDispatcher"
  classesB4: "org.craft.atom.nio.spi.AbstractNioChannelEventDispatcher"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.spi.AbstractNioChannelEventDispatcher"
    classAftr: "org.craft.atom.nio.spi.AbstractNioChannelEventDispatcher"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.spi.AbstractNioChannelEventDispatcher"
  classesB4: "org.craft.atom.nio.spi.AbstractNioChannelEventDispatcher"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptorHandler"
  classesB4: "org.craft.atom.nio.NioAcceptorHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioAcceptorHandler"
    classAftr: "org.craft.atom.nio.NioAcceptorHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptorHandler"
  classesB4: "org.craft.atom.nio.NioAcceptorHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptorNapHandler"
  classesB4: "org.craft.atom.nio.NioAcceptorNapHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioAcceptorNapHandler"
    classAftr: "org.craft.atom.nio.NioAcceptorNapHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioAcceptorNapHandler"
  classesB4: "org.craft.atom.nio.NioAcceptorNapHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioConnectorHandler"
  classesB4: "org.craft.atom.nio.NioConnectorHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.NioConnectorHandler"
    classAftr: "org.craft.atom.nio.NioConnectorHandler"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.NioConnectorHandler"
  classesB4: "org.craft.atom.nio.NioConnectorHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioBufferSizePredictor"
  classesB4: "org.craft.atom.nio.TestNioBufferSizePredictor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.TestNioBufferSizePredictor"
    classAftr: "org.craft.atom.nio.TestNioBufferSizePredictor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioBufferSizePredictor"
  classesB4: "org.craft.atom.nio.TestNioBufferSizePredictor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioByteBuffer"
  classesB4: "org.craft.atom.nio.TestNioByteBuffer"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.TestNioByteBuffer"
    classAftr: "org.craft.atom.nio.TestNioByteBuffer"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioByteBuffer"
  classesB4: "org.craft.atom.nio.TestNioByteBuffer"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioTcpAcceptor"
  classesB4: "org.craft.atom.nio.TestNioTcpAcceptor"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.TestNioTcpAcceptor"
    classAftr: "org.craft.atom.nio.TestNioTcpAcceptor"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioTcpAcceptor"
  classesB4: "org.craft.atom.nio.TestNioTcpAcceptor"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioTcpConnector"
  classesB4: "org.craft.atom.nio.TestNioTcpConnector"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.nio.TestNioTcpConnector"
    classAftr: "org.craft.atom.nio.TestNioTcpConnector"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.nio.TestNioTcpConnector"
  classesB4: "org.craft.atom.nio.TestNioTcpConnector"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.model.HttpRequest"
  classesB4: "org.craft.atom.protocol.http.model.HttpRequest"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.protocol.http.model.HttpRequest"
    classAftr: "org.craft.atom.protocol.http.model.HttpRequest"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.model.HttpRequest"
  classesB4: "org.craft.atom.protocol.http.model.HttpRequest"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.model.HttpResponse"
  classesB4: "org.craft.atom.protocol.http.model.HttpResponse"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.protocol.http.model.HttpResponse"
    classAftr: "org.craft.atom.protocol.http.model.HttpResponse"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.model.HttpResponse"
  classesB4: "org.craft.atom.protocol.http.model.HttpResponse"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.TestHttpCookieDecoder"
  classesB4: "org.craft.atom.protocol.http.TestHttpCookieDecoder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.protocol.http.TestHttpCookieDecoder"
    classAftr: "org.craft.atom.protocol.http.TestHttpCookieDecoder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.TestHttpCookieDecoder"
  classesB4: "org.craft.atom.protocol.http.TestHttpCookieDecoder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.TestHttpParameterDecoder"
  classesB4: "org.craft.atom.protocol.http.TestHttpParameterDecoder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.protocol.http.TestHttpParameterDecoder"
    classAftr: "org.craft.atom.protocol.http.TestHttpParameterDecoder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.TestHttpParameterDecoder"
  classesB4: "org.craft.atom.protocol.http.TestHttpParameterDecoder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.TestHttpRequestDecoder"
  classesB4: "org.craft.atom.protocol.http.TestHttpRequestDecoder"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.protocol.http.TestHttpRequestDecoder"
    classAftr: "org.craft.atom.protocol.http.TestHttpRequestDecoder"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.http.TestHttpRequestDecoder"
  classesB4: "org.craft.atom.protocol.http.TestHttpRequestDecoder"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.ssl.TestSslCodec"
  classesB4: "org.craft.atom.protocol.ssl.TestSslCodec"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.protocol.ssl.TestSslCodec"
    classAftr: "org.craft.atom.protocol.ssl.TestSslCodec"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.ssl.TestSslCodec"
  classesB4: "org.craft.atom.protocol.ssl.TestSslCodec"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.ssl.TestSslCodec.TestIoHandler"
  classesB4: "org.craft.atom.protocol.ssl.TestSslCodec.TestIoHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.protocol.ssl.TestSslCodec.NioSslHandshakeHandler"
  classesB4: "org.craft.atom.protocol.ssl.TestSslCodec.NioSslHandshakeHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.redis.DefaultMasterSlaveRedis"
  classesB4: "org.craft.atom.redis.DefaultMasterSlaveRedis"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.redis.DefaultMasterSlaveRedis"
    classAftr: "org.craft.atom.redis.DefaultMasterSlaveRedis"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.redis.DefaultMasterSlaveRedis"
  classesB4: "org.craft.atom.redis.DefaultMasterSlaveRedis"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TimingWheel"
  classesB4: "org.craft.atom.util.schedule.TimingWheel"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.util.schedule.TimingWheel"
    classAftr: "org.craft.atom.util.schedule.TimingWheel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TimingWheel"
  classesB4: "org.craft.atom.util.schedule.TimingWheel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TimingWheel.TickWorker"
  classesB4: "org.craft.atom.util.schedule.TimingWheel.TickWorker"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TimingWheel.Slot"
  classesB4: "org.craft.atom.util.schedule.TimingWheel.Slot"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TestTimingWheel"
  classesB4: "org.craft.atom.util.schedule.TestTimingWheel"
  typeChange {
    dtB4 {
      simpleType {
        name: "Log"
      }
    }
    dtAftr {
      simpleType {
        name: "Logger"
      }
    }
    refactoringType: "CHANGE_ATTRIBUTE_TYPE"
    nameb4: "LOG"
    nameaftr: "LOG"
    classb4: "org.craft.atom.util.schedule.TestTimingWheel"
    classAftr: "org.craft.atom.util.schedule.TestTimingWheel"
  }
  refactoringType: "CHANGE_ATTRIBUTE_TYPE"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TestTimingWheel"
  classesB4: "org.craft.atom.util.schedule.TestTimingWheel"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "org.craft.atom.util.schedule.TestTimingWheel.TestExpirationListener"
  classesB4: "org.craft.atom.util.schedule.TestTimingWheel.TestExpirationListener"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.apache.commons.logging.Log"
      typeOfType: Jdk
    }
  }
  aftr {
    simpleType {
      name: "org.slf4j.Logger"
      typeOfType: DontKnow
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.apache.commons.logging.Log"
              typeOfType: Jdk
            }
          }
          aftr {
            simpleType {
              name: "org.slf4j.Logger"
              typeOfType: DontKnow
            }
          }
          chng {
            from: "org.apache.commons.logging.Log"
            to: "org.slf4j.Logger"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
    aftr {
      simpleType {
        name: "org.slf4j.Logger"
        typeOfType: DontKnow
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "org.apache.commons.logging.Log"
          typeOfType: Jdk
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.slf4j.Logger"
          typeOfType: DontKnow
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.apache.commons.logging.Log"
        typeOfType: Jdk
      }
    }
  }
}
project: "craft-atom"
commit: "craft-atom"
tooBig: false

refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseManager"
  classesB4: "edu.mit.civic.clavin.server.ParseManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "HashMap"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "results"
    nameaftr: "results"
    classb4: "edu.mit.civic.clavin.server.ParseManager"
    classAftr: "edu.mit.civic.clavin.server.ParseManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseManager"
  classesB4: "edu.mit.civic.clavin.server.ParseManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      simpleType {
        name: "ArrayList"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "locationList"
    nameaftr: "locationList"
    classb4: "edu.mit.civic.clavin.server.ParseManager"
    classAftr: "edu.mit.civic.clavin.server.ParseManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseManager"
  classesB4: "edu.mit.civic.clavin.server.ParseManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "HashMap"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "loc"
    nameaftr: "loc"
    classb4: "edu.mit.civic.clavin.server.ParseManager"
    classAftr: "edu.mit.civic.clavin.server.ParseManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseManager"
  classesB4: "edu.mit.civic.clavin.server.ParseManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONArray"
      }
    }
    dtAftr {
      paramType {
        name {
          simpleType {
            name: "ArrayList"
          }
        }
        params {
          simpleType {
            name: "String"
          }
        }
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "alternateNames"
    nameaftr: "alternateNames"
    classb4: "edu.mit.civic.clavin.server.ParseManager"
    classAftr: "edu.mit.civic.clavin.server.ParseManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseManager"
  classesB4: "edu.mit.civic.clavin.server.ParseManager"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "HashMap"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "info"
    nameaftr: "info"
    classb4: "edu.mit.civic.clavin.server.ParseManager"
    classAftr: "edu.mit.civic.clavin.server.ParseManager"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseManager"
  classesB4: "edu.mit.civic.clavin.server.ParseManager"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.ParseRequestHandler"
  classesB4: "edu.mit.civic.clavin.server.ParseRequestHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.StatusRequestHandler"
  classesB4: "edu.mit.civic.clavin.server.StatusRequestHandler"
  typeChange {
    dtB4 {
      simpleType {
        name: "JSONObject"
      }
    }
    dtAftr {
      simpleType {
        name: "HashMap"
      }
    }
    refactoringType: "CHANGE_VARIABLE_TYPE"
    nameb4: "status"
    nameaftr: "status"
    classb4: "edu.mit.civic.clavin.server.StatusRequestHandler"
    classAftr: "edu.mit.civic.clavin.server.StatusRequestHandler"
  }
  refactoringType: "CHANGE_VARIABLE_TYPE"
}
refactorings {
  classesAftr: "edu.mit.civic.clavin.server.StatusRequestHandler"
  classesB4: "edu.mit.civic.clavin.server.StatusRequestHandler"
  refactoringType: "CLASS_DIFF_PROVIDER"
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONObject"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "java.util.HashMap"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.JSONObject"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "java.util.HashMap"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.json.simple.JSONObject"
            to: "java.util.HashMap"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.JSONObject"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "java.util.HashMap"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONObject"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.HashMap"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONObject"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONArray"
      typeOfType: DontKnow
    }
  }
  aftr {
    paramType {
      name {
        simpleType {
          name: "java.util.ArrayList"
          typeOfType: Jdk
        }
      }
      params {
        simpleType {
          name: "java.lang.String"
          typeOfType: Jdk
        }
      }
    }
  }
  syntacticAnalysis {
    kind: Repl
    b4 {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
    aftr {
      paramType {
        name {
          simpleType {
            name: "java.util.ArrayList"
            typeOfType: Jdk
          }
        }
        params {
          simpleType {
            name: "java.lang.String"
            typeOfType: Jdk
          }
        }
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONArray"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        paramType {
          name {
            simpleType {
              name: "java.util.ArrayList"
              typeOfType: Jdk
            }
          }
          params {
            simpleType {
              name: "java.lang.String"
              typeOfType: Jdk
            }
          }
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
  }
}
typeChangeAnalysis {
  b4 {
    simpleType {
      name: "org.json.simple.JSONArray"
      typeOfType: DontKnow
    }
  }
  aftr {
    simpleType {
      name: "java.util.ArrayList"
      typeOfType: Jdk
    }
  }
  syntacticAnalysis {
    upd {
      syntypchng {
        key: "Name"
        value {
          kind: Chng
          b4 {
            simpleType {
              name: "org.json.simple.JSONArray"
              typeOfType: DontKnow
            }
          }
          aftr {
            simpleType {
              name: "java.util.ArrayList"
              typeOfType: Jdk
            }
          }
          chng {
            from: "org.json.simple.JSONArray"
            to: "java.util.ArrayList"
          }
        }
      }
    }
    kind: Upd
    b4 {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
    aftr {
      simpleType {
        name: "java.util.ArrayList"
        typeOfType: Jdk
      }
    }
  }
  nameSpaceAnalysis {
    nameSpaceB4 {
      typeOfType: "DontKnow"
      dt {
        simpleType {
          name: "org.json.simple.JSONArray"
          typeOfType: DontKnow
        }
      }
    }
    nameSpaceAftr {
      typeOfType: "Jdk"
      dt {
        simpleType {
          name: "java.util.ArrayList"
          typeOfType: Jdk
        }
      }
    }
    autoboxing: false
  }
  appliedSpaceAnalysis {
    isTypeMigration: false
    removed {
      simpleType {
        name: "org.json.simple.JSONArray"
        typeOfType: DontKnow
      }
    }
  }
}
project: "CLAVIN-Server"
commit: "CLAVIN-Server"
tooBig: false
